bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.removeChild(parent);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.removeChild(parent);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  n.removeChild(propAlias);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.removeChild(propAlias);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.removeChild(propAlias);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  n.replaceChild(nameNode,  newVar);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.replaceChild(nameNode,  newVar);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.replaceChild(nameNode,  newVar);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  n.removeChild(p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.removeChild(p.name);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.removeChild(p.name);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
5	[BUG]  [BUGGY]  nameNode.removeChild(nameNode);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  nameNode.removeChild(nameNode);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	nameNode.removeChild(nameNode);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
6	[BUG]  [BUGGY]  nameNode.removeChild(parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  nameNode.removeChild(parent);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	nameNode.removeChild(parent);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
7	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
8	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
9	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  addAfter,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  addAfter,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING),  numStubs);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
14	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  propAlias),  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  propAlias),  NAMESPACE_REDEFINED_WARNING);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  propAlias),  NAMESPACE_REDEFINED_WARNING);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
15	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
16	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  propAlias),  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  propAlias),  NAMESPACE_REDEFINED_WARNING);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  propAlias),  NAMESPACE_REDEFINED_WARNING);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
17	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode),  numStubs);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
18	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
19	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  addAfter,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  addAfter,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  addAfter,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
20	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  n,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  n,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  n,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
21	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  nameNode,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  nameNode,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  nameNode,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
22	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_THIS));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_THIS));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
23	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  addAfter,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  addAfter,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
24	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  alias,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  alias,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  alias,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
25	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.name,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.name,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  p.name,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
26	[BUG]  [BUGGY]  parser.report(JSError.make(Token.NAME,  numStubs,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  parser.report(JSError.make(Token.NAME,  numStubs,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	parser.report(JSError.make(Token.NAME,  numStubs,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
27	[BUG]  [BUGGY]  Node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	3	None	replace
28	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	3	None	replace
29	[BUG]  [BUGGY]  Node  p  =  parent.getFirstChild();  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  parent.getFirstChild();  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  parent.getFirstChild();  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
31	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  propAlias));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
32	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
33	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  nameNode));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
35	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
36	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
37	[BUG]  [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
38	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
39	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
40	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_N  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_N	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
41	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
42	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	      	non-compiled	[CE]  not  a  statement	7	None	replace
43	[BUG]  [BUGGY]  Node  p  =  nameNode.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  nameNode.getFirstChild();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  nameNode.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
44	[BUG]  [BUGGY]  Node  p  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  parent.getFirstChild();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  parent.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
45	[BUG]  [BUGGY]  Node  p  =  parent.getParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  parent.getParent();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  parent.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
46	[BUG]  [BUGGY]  Name  p  =  nameNode.getFirstChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Name  p  =  nameNode.getFirstChild();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Name  p  =  nameNode.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
47	[BUG]  [BUGGY]  Node  p  =  newVar.getFirstChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  newVar.getFirstChild();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  newVar.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
48	[BUG]  [BUGGY]  Node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	1	None	replace
49	[BUG]  [BUGGY]  compiler.report(JSError.make(UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
50	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  propAlias));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
51	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
52	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
53	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
54	[BUG]  [BUGGY]  compiler.report(JSError.make(MOVED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(MOVED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(MOVED_WARNING,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
55	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
56	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
57	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  UNSAFE_THIS,  propAlias));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
58	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
59	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
60	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
61	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
62	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  parent));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
63	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
64	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
65	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  alias));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  alias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  alias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
66	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  UNDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
67	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
68	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  propAlias));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
69	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
70	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
71	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  nameNode));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
72	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  propAlias));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  numStubs,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  numStubs,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
73	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  numStubs));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
74	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
75	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
76	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  numStubs));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  numStubs));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  UNSAFE_NAMESPACE_WARNING,  numStubs));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
77	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
78	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
79	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  nameNode);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  nameNode);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  nameNode);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
80	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias),  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
81	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
82	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
83	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
84	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
85	[BUG]  [BUGGY]  compiler.report(JSError.make(UNKNOWN_SYNTHETIC_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(UNKNOWN_SYNTHETIC_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(UNKNOWN_SYNTHETIC_WARNING,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
86	[BUG]  [BUGGY]  compiler.report(JSError.make(UNKNOWN_SYNTHETIC_ERROR,  propAlias));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(UNKNOWN_SYNTHETIC_ERROR,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(UNKNOWN_SYNTHETIC_ERROR,  propAlias));	  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	12	None	replace
87	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  nameNode));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  nameNode));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias,  nameNode));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
88	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
89	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  DEFAULT_NAMESPACE_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
90	[BUG]  [BUGGY]  n.replaceChild(nameNode,  addAfter);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.replaceChild(nameNode,  addAfter);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.replaceChild(nameNode,  addAfter);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
91	[BUG]  [BUGGY]  n.addChildToFront(newVar);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.addChildToFront(newVar);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.addChildToFront(newVar);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
92	[BUG]  [BUGGY]  n.replaceChild(parent,  nameNode);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.replaceChild(parent,  nameNode);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.replaceChild(parent,  nameNode);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
93	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  n,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(nameNode,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	9	None	replace
94	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  nameNode));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(alias,  numStubs,  NAMESPACE_REDEFINED_WARNING,  nameNode));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
95	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  propAlias,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  propAlias,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  propAlias,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_NAMESPACE_WARNING));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_NAMESPACE_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  numStubs,  UNSAFE_NAMESPACE_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
97	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias);	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	3	None	replace
98	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	8	None	replace
99	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  parent));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  parent));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  parent));	  compiler.report(JSError.make(nameNode,    numStubs,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	11	None	replace
100	[BUG]  [BUGGY]  n.removeChild(p);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.removeChild(p);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.removeChild(p);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
101	[BUG]  [BUGGY]  n.replaceChild(parent,  newVar);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  n.replaceChild(parent,  newVar);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	n.replaceChild(parent,  newVar);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
102	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	NodeUtil.removeChild(parent,  n);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
103	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nameNode);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  NodeUtil.removeChild(parent,  nameNode);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	NodeUtil.removeChild(parent,  nameNode);	  n.removeChild(nameNode);    	non-compiled	[CE]  not  a  statement	4	None	replace
104	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
105	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_DECLARED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_DECLARED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  n,  UNSAFE_DECLARED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
106	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(sourceName,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(sourceName,  parent,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.report(JSError.make(sourceName,    n,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	13	None	replace
107	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.numStubs,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.numStubs,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  p.numStubs,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
108	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  n,  UNSAFE_NAMESPACE_WARNING));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  n,  UNSAFE_NAMESPACE_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  n,  UNSAFE_NAMESPACE_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
109	[BUG]  [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.node,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(Token.NAME,  p.node,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(Token.NAME,  p.node,  NAMESPACE_REDEFINED_WARNING));	  compiler.report(JSError.make(Token.NAME,    numStubs,    NAMESPACE_REDEFINED_WARNING));    	non-compiled	[CE]  not  a  statement	6	None	replace
110	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  NodeUtil.removeChild(parent,  p.name);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	NodeUtil.removeChild(parent,  p.name);	      	non-compiled	[CE]  not  a  statement	7	None	replace
111	[BUG]  [BUGGY]  int  refsCount  =  p.refs.size();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  int  refsCount  =  p.refs.size();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	int  refsCount  =  p.refs.size();	      	non-compiled	[CE]  not  a  statement	7	None	replace
112	[BUG]  [BUGGY]  Node  p  =  nameNode.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  Node  p  =  nameNode.getLastChild();  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	Node  p  =  nameNode.getLastChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
113	[BUG]  [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
114	[BUG]  [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
115	[BUG]  [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	if(p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  node.putBooleanProp(Node.IS_CONSTANT_N	  node.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	5	None	replace
116	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  UNSAFE_THIS));  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  NAMESPACE_REDEFINED_WARNING,  propAlias,  UNSAFE_THIS));	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias));    	non-compiled	[CE]  not  a  statement	2	None	replace
117	[BUG]  [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;    [BUGGY]  compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs);  [BUGGY]        if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	compiler.report(JSError.make(nameNode,  alias,  NAMESPACE_REDEFINED_WARNING,  numStubs);	  compiler.report(JSError.make(nameNode,    NAMESPACE_REDEFINED_WARNING,    propAlias),    numStubs);    	non-compiled	[CE]  not  a  statement	10	None	replace
