bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rParent  =  n.parent.getParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.parent.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.parent.getParent();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
2	[BUG]  [BUGGY]  Node  rParent  =  r.parent.getNext();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.getNext();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  Node  rParent  =  r.parent.cloneTree();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.cloneTree();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.cloneTree();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
4	[BUG]  [BUGGY]  Node  rParent  =  r.parent.getFirstChild();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.getFirstChild();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
5	[BUG]  [BUGGY]  Node  rParent  =  l.parent.getParent();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  l.parent.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  l.parent.getParent();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
6	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
7	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
9	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
10	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
11	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  rParent.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  rParent.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getName()  ==  null  ||  rParent.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
12	[BUG]  [BUGGY]  Node  r  =  n.node.getNext();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  n.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  n.node.getNext();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
13	[BUG]  [BUGGY]  Node  r  =  r.node.getRawParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  r.node.getRawParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  r.node.getRawParent();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
14	[BUG]  [BUGGY]  Node  r  =  r.node.getNext()  +  1;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  r.node.getNext()  +  1;  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  r.node.getNext()  +  1;	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
15	[BUG]  [BUGGY]  Node  r  =  n.node.getParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  n.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  n.node.getParent();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
16	[BUG]  [BUGGY]  Node  r  =  r.node.getRaw();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  r.node.getRaw();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  r.node.getRaw();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
17	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
18	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
19	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
20	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
21	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
22	[BUG]  [BUGGY]  if(!NodeUtil.isName(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
23	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
24	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
25	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
26	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
27	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
28	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
29	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
30	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
31	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
32	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
33	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
34	[BUG]  [BUGGY]  Node  p  =  n.node.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  n.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  n.node.getNext();	  Node    p    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	32	None	replace
35	[BUG]  [BUGGY]  Node  p  =  r.node.getPrevious();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getPrevious();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getPrevious();	  Node    p    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	32	None	replace
36	[BUG]  [BUGGY]  Node  p  =  r.node.getPosition();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getPosition();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getPosition();	  Node    p    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	32	None	replace
37	[BUG]  [BUGGY]  Node  p  =  n.node.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  n.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  n.node.getParent();	  Node    p    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	32	None	replace
38	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.node.getParent();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
39	[BUG]  [BUGGY]  Node  rParent  =  n.node.getNext();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.node.getNext();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
40	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.cloneTwin();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.cloneTwin();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
41	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTree();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.cloneTree();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.cloneTree();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
42	[BUG]  [BUGGY]  Node  rParent  =  r.node.getPrevious();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.getPrevious();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.getPrevious();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
43	[BUG]  [BUGGY]  Node  p  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  n.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  n.node.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
44	[BUG]  [BUGGY]  Node  p  =  r.node.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getLastChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getLastChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
45	[BUG]  [BUGGY]  Node  p  =  rParent.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  rParent.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  rParent.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
46	[BUG]  [BUGGY]  Node  p  =  r.node.getPreviousChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getPreviousChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getPreviousChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
47	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    &&    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    &&    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
49	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    &&    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
50	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
51	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
52	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
53	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
54	[BUG]  [BUGGY]  Name  r  =  r.node.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  r.node.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  r.node.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
55	[BUG]  [BUGGY]  Name  r  =  r.getName();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  r.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  r.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
56	[BUG]  [BUGGY]  Name  r  =  rParent.getName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  rParent.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  rParent.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
57	[BUG]  [BUGGY]  Name  r  =  n.refs.getName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.refs.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.refs.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
58	[BUG]  [BUGGY]  Name  r  =  n.props.getName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.props.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.props.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
59	[BUG]  [BUGGY]  Name  r  =  n.name();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.name();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.name();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
69	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
70	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
71	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
72	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
73	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.isName(n.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
78	[BUG]  [BUGGY]  if(r.node!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(r.node!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
79	[BUG]  [BUGGY]  if(rParent!=  null  &&  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	27	None	replace
80	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
81	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(rParent,  n)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
82	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  r.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  r.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)||  r.getTwin()  ==  null  ||  r.isSet())  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
85	[BUG]  [BUGGY]  Node  r  =  r.node.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  r.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  r.node.getFirstChild();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
86	[BUG]  [BUGGY]  alias  =  n.node.getString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  n.node.getString();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  n.node.getString();	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
87	[BUG]  [BUGGY]  alias  =  r.node.getName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  r.node.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  r.node.getName();	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
88	[BUG]  [BUGGY]  alias  =  r.node.getString()  +  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  r.node.getString()  +  1;  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  r.node.getString()  +  1;	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
89	[BUG]  [BUGGY]  alias  =  r.node.getString()  + ": ";  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  r.node.getString()  + ": ";  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  r.node.getString()  + ": ";	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
90	[BUG]  [BUGGY]  Name  p  =  n.node.getParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  n.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  n.node.getParent();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
91	[BUG]  [BUGGY]  Name  p  =  r.node.getName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getName();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
92	[BUG]  [BUGGY]  Name  p  =  r.node.getNext();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getNext();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
93	[BUG]  [BUGGY]  Name  p  =  r.node.getNameNode();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getNameNode();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getNameNode();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
94	[BUG]  [BUGGY]  Name  p  =  r.node.getNamespace();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getNamespace();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getNamespace();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
95	[BUG]  [BUGGY]  Name  p  =  r.node.getPrefix();  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getPrefix();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getPrefix();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
96	[BUG]  [BUGGY]  if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
97	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
98	[BUG]  [BUGGY]  if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
99	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
101	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  r.getName()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  r.getName()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  r.getName()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
104	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.refs.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.refs.getParent();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	14	None	replace
105	[BUG]  [BUGGY]  Node  rParent  =  r.parent;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent;  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent;	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	14	None	replace
106	[BUG]  [BUGGY]  Node  rParent  =  r.refs.getParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.refs.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.refs.getParent();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	14	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  originalName)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&  n.getTwin()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
112	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
113	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
114	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)||  NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
115	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
116	[BUG]  [BUGGY]  if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
117	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
118	[BUG]  [BUGGY]  if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
119	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
120	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(rParent,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
121	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
123	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
124	[BUG]  [BUGGY]  if(r.getTwin()!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.getTwin()!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.getTwin()!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()!=    null    &&    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
125	[BUG]  [BUGGY]  if(NodeUtil.isName(n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
126	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()!=  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
128	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
129	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
130	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
131	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  nParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
132	[BUG]  [BUGGY]  Node  rParent  =  n.props.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.props.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.props.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
133	[BUG]  [BUGGY]  Node  rParent  =  n.parent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.parent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.parent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
134	[BUG]  [BUGGY]  Node  rParent  =  n.parent;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.parent;  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.parent;	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
135	[BUG]  [BUGGY]  Node  rParent  =  n.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.getNext();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
136	[BUG]  [BUGGY]  if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
137	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
138	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
139	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
140	[BUG]  [BUGGY]  Name  p  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  n.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  n.node.getFirstChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
141	[BUG]  [BUGGY]  Name  p  =  r.node.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getLastChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getLastChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
142	[BUG]  [BUGGY]  Name  p  =  r.node.getPreviousChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getPreviousChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getPreviousChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
143	[BUG]  [BUGGY]  Name  p  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  n.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  n.getFirstChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
144	[BUG]  [BUGGY]  if(rParent!=  null  ||!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  ||!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  ||!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
145	[BUG]  [BUGGY]  if(r.node!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node!=  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
146	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
147	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
148	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
149	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  rParent)&&  (r.getName()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
150	[BUG]  [BUGGY]  if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent    ==    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
151	[BUG]  [BUGGY]  Node  p  =  r.node.getNameNode();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getNameNode();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getNameNode();	  Node    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
152	[BUG]  [BUGGY]  Node  p  =  r.node.getPrefix();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  r.node.getPrefix();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  r.node.getPrefix();	  Node    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
153	[BUG]  [BUGGY]  if(rParent.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent.getTwin()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
154	[BUG]  [BUGGY]  if(r.getParent()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.getParent()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.getParent()  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
155	[BUG]  [BUGGY]  if(r.getTwin()!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.getTwin()!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.getTwin()!=  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
156	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
157	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	24	None	replace
158	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(rParent,  n)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	24	None	replace
159	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(n,  rParent)||  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	25	None	replace
160	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
162	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
163	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  n.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(n.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
164	[BUG]  [BUGGY]  Node  rParent  =  r.node.removeFirstChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.removeFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.removeFirstChild();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	17	None	replace
165	[BUG]  [BUGGY]  Node  rParent  =  l.node.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  l.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  l.node.getParent();	  Node    rParent    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	12	None	replace
166	[BUG]  [BUGGY]  Node  rParent  =  r.node.getNameNode();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.getNameNode();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.getNameNode();	  Node    rParent    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	12	None	replace
167	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  n)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  n)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  n)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
168	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  n)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
171	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (rParent.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
172	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)&&  (r.getTwin()  ==  null  ||  rParent.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
173	[BUG]  [BUGGY]  alias  =  rParent.getString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  rParent.getString();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  rParent.getString();	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
174	[BUG]  [BUGGY]  Name  p  =  rParent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  rParent.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  rParent.getFirstChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
175	[BUG]  [BUGGY]  Name  p  =  r.node.getNamespaceURI();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  r.node.getNamespaceURI();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  r.node.getNamespaceURI();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
176	[BUG]  [BUGGY]  Name  p  =  n.getParent();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  n.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  n.getParent();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet())  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet())  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet())	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
179	[BUG]  [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r.node,  rParent)||  (r.getTwin()!=  null  &&  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
180	[BUG]  [BUGGY]  Node  rParent  =  r.parent.getParentNode();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.getParentNode();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.getParentNode();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
181	[BUG]  [BUGGY]  Node  rParent  =  r.parent.getParent(r.node);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.getParent(r.node);  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.getParent(r.node);	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
183	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
184	[BUG]  [BUGGY]  Node  p  =  rParent.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  rParent.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  rParent.getNext();	  Node    p    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	32	None	replace
185	[BUG]  [BUGGY]  if(r.parent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.parent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.parent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(r.node!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
186	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  parent.getTwin()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
187	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
188	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isTwin()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isTwin()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isTwin()))  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
189	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	24	None	replace
190	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()!=    null    &&    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
191	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  r.node)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
192	[BUG]  [BUGGY]  Name  r  =  r.name.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  r.name.getName();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  r.name.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
193	[BUG]  [BUGGY]  Name  r  =  n.getNamespaceURI();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.getNamespaceURI();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.getNamespaceURI();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
194	[BUG]  [BUGGY]  Name  r  =  n.getName(r.node);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.getName(r.node);  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.getName(r.node);	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	15	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r,  rParent)&&  (r.node.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
196	[BUG]  [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet())  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet())  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getName()  ==  null  ||  r.isSet())	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
199	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isName(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
200	[BUG]  [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent  ==  null  &&!NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
201	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  n)||  (rParent.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  n)||  (rParent.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
202	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
203	[BUG]  [BUGGY]  if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
204	[BUG]  [BUGGY]  if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
206	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  n.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  n.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
207	[BUG]  [BUGGY]  Node  r  =  r.node.cloneTree();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  r.node.cloneTree();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  r.node.cloneTree();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
208	[BUG]  [BUGGY]  Node  p  =  n.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  p  =  n.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  p  =  n.getParent();	  Node    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
209	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
210	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
211	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  r)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
212	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
213	[BUG]  [BUGGY]  Node  r  =  rParent.getNext();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  rParent.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  rParent.getNext();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
214	[BUG]  [BUGGY]  Node  r  =  rParent.node.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  rParent.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  rParent.node.getNext();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
215	[BUG]  [BUGGY]  if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)    &&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
216	[BUG]  [BUGGY]  Node  rParent  =  r.parentNode.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parentNode.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parentNode.getParent();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	14	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
218	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&!(r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&!(r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r.node,  rParent)&&!(r.getName()  ==  null  ||  r.isSet()))  {	  if(r.getTwin()    ==    null    ||!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
220	[BUG]  [BUGGY]  if(r.node  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(r.node!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
221	[BUG]  [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent  ==  null  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
222	[BUG]  [BUGGY]  Node  rParent  =  r.parent.removeFirstChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.parent.removeFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.parent.removeFirstChild();	  Node    rParent    =    r.parent.getParent();    	non-compiled	[CE]  not  a  statement	16	None	replace
223	[BUG]  [BUGGY]  Name  r  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.node.getFirstChild();	  Name    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	49	None	replace
224	[BUG]  [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
225	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)&&  (n.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
226	[BUG]  [BUGGY]  Node  r  =  l.node.getNext();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  l.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  l.node.getNext();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
227	[BUG]  [BUGGY]  if(!NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isName(n,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(r.node,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
228	[BUG]  [BUGGY]  Node  r  =  n.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  n.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  n.getParent();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
229	[BUG]  [BUGGY]  Node  rParent  =  r.ref.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.ref.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.ref.getParent();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	14	None	replace
230	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
232	[BUG]  [BUGGY]  if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent    ==    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
233	[BUG]  [BUGGY]  if(r.node  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(r.node  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(r.node  ==  null  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent    ==    null    &&!NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
234	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n)&&!NodeUtil.isObjectLitKey(r,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	24	None	replace
235	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getName()  ==  null  ||  r.isSet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getName()  ==  null  ||  r.isSet())  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isObjectLitKey(r.node,  rParent)&&  n.getName()  ==  null  ||  r.isSet())  {	  if(NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
236	[BUG]  [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(r.node,  rParent)||!NodeUtil.isObjectLitKey(r.node,  rParent)||  (r.getName()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(r.node,    rParent)||    (r.getName()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
237	[BUG]  [BUGGY]  alias  =  n.getString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  alias  =  n.getString();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	alias  =  n.getString();	  alias    =    r.node.getString();    	non-compiled	[CE]  not  a  statement	34	None	replace
238	[BUG]  [BUGGY]  Node  rParent  =  n.getParentNode();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.getParentNode();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.getParentNode();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
239	[BUG]  [BUGGY]  Name  p  =  n.node.getNext();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  p  =  n.node.getNext();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  p  =  n.node.getNext();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
240	[BUG]  [BUGGY]  Name  r  =  n.node.getParent();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Name  r  =  n.node.getParent();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Name  r  =  n.node.getParent();	  Name    p    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	18	None	replace
241	[BUG]  [BUGGY]  Node  rParent  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  n.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  n.node.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
242	[BUG]  [BUGGY]  Node  rParent  =  r.node.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  rParent  =  r.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  rParent  =  r.node.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
243	[BUG]  [BUGGY]  Node  r  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  Node  r  =  n.node.getFirstChild();  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	Node  r  =  n.node.getFirstChild();	  Node    p    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
244	[BUG]  [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(!NodeUtil.isObjectLitKey(r,  rParent)||  (r.getTwin()  ==  null  &&  r.isSet()))  {	  if(!NodeUtil.isObjectLitKey(n,    rParent)||    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
245	[BUG]  [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(rParent!=  null  &&!NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(rParent!=  null  &&!NodeUtil.isName(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(rParent!=    null    &&!NodeUtil.isName(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
246	[BUG]  [BUGGY]  if(NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();            [BUGGY]  if(NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  }  }    if  (n.props  !=  null)  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	if(NodeUtil.isName(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  if(!NodeUtil.isName(rParent,    r.node)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
