bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.type);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p.type);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
2	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n.props);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n.props);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
3	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  n.type);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  n.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  n.type);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
4	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  n);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
5	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForAlias(alias,  p.name,  p.type);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
6	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.domain);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.domain);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.domain);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
7	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.props);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p.props);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
8	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.props,  p.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.props,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.props,  p.name);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForAlias(alias,  p.name,  n.props);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(n,  alias.name,  p.props);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(n,  alias.name,  p.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(n,  alias.name,  p.props);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(n,  p.name,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(n,  p.name,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(n,  p.name,  alias);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.value);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.value);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p.value);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
13	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  n.props);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
14	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  n.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  n.name);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
15	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  p.name);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForName(alias,  p.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForName(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForName(alias,  p.name);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
17	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  p.type);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
18	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.domain);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.domain);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  p.domain);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
19	[BUG]  [BUGGY]  Name  propAlias  =  n.props.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  n.props.getName();  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  n.props.getName();	      	non-compiled	[CE]  not  a  statement	7	None	replace
20	[BUG]  [BUGGY]  Name  propAlias  =  p.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  p.getName();  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  p.getName();	      	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  Name  propAlias  =  n.nameMap.get(p);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  n.nameMap.get(p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  n.nameMap.get(p);	      	non-compiled	[CE]  not  a  statement	7	None	replace
22	[BUG]  [BUGGY]  n.props.put(alias,  p);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  n.props.put(alias,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	n.props.put(alias,  p);	      	non-compiled	[CE]  not  a  statement	7	None	replace
23	[BUG]  [BUGGY]  Name  propAlias  =(Name)n.props.get(p);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =(Name)n.props.get(p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =(Name)n.props.get(p);	      	non-compiled	[CE]  not  a  statement	7	None	replace
24	[BUG]  [BUGGY]  Name  propAlias  =  n.props.getProperty(alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  n.props.getProperty(alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  n.props.getProperty(alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
25	[BUG]  [BUGGY]  Name  propAlias  =(Name)n.props.clone();  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =(Name)n.props.clone();  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =(Name)n.props.clone();	      	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p);    	non-compiled	[CE]  not  a  statement	11	None	replace
27	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.property);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.property);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.property);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p);    	non-compiled	[CE]  not  a  statement	11	None	replace
28	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.toString());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.toString());  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.toString());	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p);    	non-compiled	[CE]  not  a  statement	11	None	replace
29	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n.props);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  n.name);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
31	[BUG]  [BUGGY]  Name  propAlias  =  appendReferencesForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendReferencesForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendReferencesForAlias(alias,  p.name);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(p,  alias.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(p,  alias.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(p,  alias.name);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
33	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.name);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  n);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  String  propAlias  =  p.nameForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.nameForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.nameForAlias(alias,  p.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
36	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
37	[BUG]  [BUGGY]  String  propAlias  =  p.nameForAlias(alias,  p.appendPropForAlias(p.name));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.nameForAlias(alias,  p.appendPropForAlias(p.name));  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.nameForAlias(alias,  p.appendPropForAlias(p.name));	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
38	[BUG]  [BUGGY]  String  propAlias  =  p.appendPropForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.appendPropForAlias(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.appendPropForAlias(alias,  n.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
39	[BUG]  [BUGGY]  Name  propAlias  =  p.appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  p.appendPropForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  p.appendPropForAlias(alias,  p.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
40	[BUG]  [BUGGY]  String  propAlias  =  n.name.appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  n.name.appendPropForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  n.name.appendPropForAlias(alias,  p.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
41	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  n.name);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
42	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name,  n.props);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
43	[BUG]  [BUGGY]  Name  propAlias  =  appendNameForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendNameForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendNameForAlias(alias,  p.name);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
44	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(p,  alias.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(p,  alias.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(p,  alias.name);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
45	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(p.name,  alias);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(p.name,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(p.name,  alias);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
46	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  n);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name,  n);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
47	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(n,  alias);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(n,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(n,  alias);	  String    propAlias    =    appendPropForAlias(alias,    n.name);    	non-compiled	[CE]  not  a  statement	9	None	replace
48	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p.name);	  String    propAlias    =    appendPropForAlias(alias,    n.name);    	non-compiled	[CE]  not  a  statement	9	None	replace
49	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForAlias(alias,  n.name);	  String    propAlias    =    appendPropForAlias(alias,    n.name);    	non-compiled	[CE]  not  a  statement	9	None	replace
50	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForAlias(alias,  p.name);	  String    propAlias    =    appendPropForAlias(alias,    n.name);    	non-compiled	[CE]  not  a  statement	9	None	replace
51	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.value);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.value);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.value);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.name);    	non-compiled	[CE]  not  a  statement	5	None	replace
52	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.propName);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.propName);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.propName);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.name);    	non-compiled	[CE]  not  a  statement	5	None	replace
53	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.domain);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.domain);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.domain);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.name);    	non-compiled	[CE]  not  a  statement	5	None	replace
54	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  n.props);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
55	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  n.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  n.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  n.name);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
56	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  p.type);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
57	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.name);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  p.name);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
58	[BUG]  [BUGGY]  String  propAlias  =  appendName(alias,  p.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendName(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendName(alias,  p.name);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
59	[BUG]  [BUGGY]  Name  propAlias  =  appendProp(alias,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendProp(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendProp(alias,  p.name);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
60	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n,  p.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n,  p.name);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n);    	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.toString());  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.name,  p.toString());  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.name,  p.toString());	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n);    	non-compiled	[CE]  not  a  statement	4	None	replace
62	[BUG]  [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  Name  propAlias  =  appendPropForAlias(alias,  p.name,  n);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	Name  propAlias  =  appendPropForAlias(alias,  p.name,  n);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n);    	non-compiled	[CE]  not  a  statement	4	None	replace
63	[BUG]  [BUGGY]  String  propAlias  =  n.nameForAlias(alias,  p.appendPropForAlias(p.name));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  n.nameForAlias(alias,  p.appendPropForAlias(p.name));  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  n.nameForAlias(alias,  p.appendPropForAlias(p.name));	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
64	[BUG]  [BUGGY]  String  propAlias  =  n.props.appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  n.props.appendPropForAlias(alias,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  n.props.appendPropForAlias(alias,  p.name);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
65	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.props);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.props);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p);    	non-compiled	[CE]  not  a  statement	11	None	replace
66	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.type);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
67	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.domain);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.domain);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p.domain);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
68	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.value);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p.value);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  p.value);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.toString());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.toString());  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  p.toString());	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
70	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.domain);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p.domain);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  p.domain);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
71	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.global);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.global);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.global);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
72	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.toString());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.toString());  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.toString());	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
73	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
74	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
75	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p.name,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
76	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  alias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
77	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.getName(),  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.getName(),  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p.getName(),  alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
78	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
79	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
80	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name,  p.type);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
81	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p.name);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name,  p.name);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
82	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name  + ", "  +  p.name);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name  + ", "  +  p.name);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name  + ", "  +  p.name);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
83	[BUG]  [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendNameForAlias(alias,  p.name,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendNameForAlias(alias,  p.name,  p);	  String    propAlias    =    appendNameForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	1	None	replace
84	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
85	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  alias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  alias);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  alias);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
86	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  alias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  alias);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  alias);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
87	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  alias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  alias);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  alias);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
88	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  alias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  alias);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  alias);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
89	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  refs.put(alias,  p);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  refs.put(alias,  p);  }  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  refs.put(alias,  p);  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
90	[BUG]  [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendProp(alias,  p.name,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendProp(alias,  p.name,  p);	  String    propAlias    =    appendProp(alias,    p.name);    	non-compiled	[CE]  not  a  statement	12	None	replace
91	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.allNames);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.allNames);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.allNames);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
92	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.value);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.value);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.type,  p.value);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p.type);    	non-compiled	[CE]  not  a  statement	8	None	replace
93	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.props);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  n.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  n.props);	  String    propAlias    =    appendPropForAlias(alias,    n.name);    	non-compiled	[CE]  not  a  statement	9	None	replace
94	[BUG]  [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForName(alias,  p.name,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForName(alias,  p.name,  p);	  String    propAlias    =    appendPropForName(alias,    p.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.allNames);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  p.allNames);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  p.allNames);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    p);    	non-compiled	[CE]  not  a  statement	11	None	replace
96	[BUG]  [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendReferencesForAlias(alias,  p.name,  p);	  String    propAlias    =    appendReferencesForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
97	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.pt);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.pt);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.pt);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
98	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.p);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.p);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.p);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
99	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.type);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.type);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
100	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.props);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.props);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.props);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
101	[BUG]  [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.pojo);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  p.name.appendPropForAlias(alias,  p.pojo);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  p.name.appendPropForAlias(alias,  p.pojo);	  String    propAlias    =    p.appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	10	None	replace
102	[BUG]  [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  n.props,  p.type);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {    [BUGGY]  String  propAlias  =  appendPropForAlias(alias,  p.name,  n.props,  p.type);  [BUGGY]      if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	String  propAlias  =  appendPropForAlias(alias,  p.name,  n.props,  p.type);	  String    propAlias    =    appendPropForAlias(alias,    p.name,    n.props);    	non-compiled	[CE]  not  a  statement	2	None	replace
