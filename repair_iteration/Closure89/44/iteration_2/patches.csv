bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(n.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	34	None	replace
3	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	34	None	replace
4	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	34	None	replace
5	[BUG]  [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	34	None	replace
6	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.    	non-compiled	[CE]  not  a  statement	54	None	replace
7	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.    	non-compiled	[CE]  not  a  statement	54	None	replace
8	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
9	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
10	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
11	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
12	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
13	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
14	[BUG]  [BUGGY]  if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
15	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
16	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
17	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
18	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	12	None	replace
19	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	12	None	replace
20	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	12	None	replace
21	[BUG]  [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	12	None	replace
22	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	12	None	replace
23	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
24	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
25	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
26	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
27	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
28	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
29	[BUG]  [BUGGY]  if(n.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	28	None	replace
30	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	28	None	replace
31	[BUG]  [BUGGY]  if(p.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	28	None	replace
32	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	42	None	replace
33	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
34	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
35	[BUG]  [BUGGY]  if(!p.inExterns  ||  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
36	[BUG]  [BUGGY]  if(p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
37	[BUG]  [BUGGY]  if(parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
38	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
39	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
40	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
41	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
42	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
43	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
44	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
45	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
46	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
47	[BUG]  [BUGGY]  if(p.node!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.node!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.node!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
48	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	100	None	replace
49	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	100	None	replace
50	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	100	None	replace
51	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	51	None	replace
52	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	51	None	replace
53	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	51	None	replace
54	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	51	None	replace
55	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	93	None	replace
56	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	93	None	replace
57	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpl  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpl  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpl	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	93	None	replace
58	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
59	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  append  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  append  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  append	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
60	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
61	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
62	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
63	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
64	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
65	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	33	None	replace
66	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    ||    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	33	None	replace
67	[BUG]  [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
68	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
69	[BUG]  [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  mustCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
70	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
71	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
72	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
73	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
74	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
75	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
76	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
77	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
78	[BUG]  [BUGGY]  p.declaration.node.getName()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getName()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getName()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
79	[BUG]  [BUGGY]  if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	27	None	replace
80	[BUG]  [BUGGY]  if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	27	None	replace
81	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
82	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
83	[BUG]  [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
84	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
85	[BUG]  [BUGGY]  if(!p.inExterns  ||  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
86	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	52	None	replace
87	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
88	[BUG]  [BUGGY]  if(n.inExterns  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
89	[BUG]  [BUGGY]  if(n.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
90	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
91	[BUG]  [BUGGY]  if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	1	None	replace
92	[BUG]  [BUGGY]  if(n.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	4	None	replace
93	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
94	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
95	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
96	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
97	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
98	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
99	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
100	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
101	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
102	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
103	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
104	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
105	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
106	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
107	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
108	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
109	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
110	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
111	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
112	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.declaration!=    null    &&    p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	38	None	replace
113	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	38	None	replace
114	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	38	None	replace
115	[BUG]  [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
116	[BUG]  [BUGGY]  if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
117	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
118	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
119	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
120	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
121	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
122	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
123	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
124	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
125	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  nu  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
126	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	74	None	replace
127	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDeclaration(  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDeclaration(  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDeclaration(	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	74	None	replace
128	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()    ==    null    &&    	non-compiled	[CE]  not  a  statement	46	None	replace
129	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()    ==    null    &&    	non-compiled	[CE]  not  a  statement	46	None	replace
130	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
131	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
132	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
133	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
134	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
135	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
136	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
137	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
138	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
139	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
140	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
141	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
142	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPRO  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPRO  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPRO	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
143	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
144	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
145	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
146	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
147	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
148	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
149	[BUG]  [BUGGY]  if(n!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
150	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
151	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
152	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
153	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
154	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  p.inExterns  }  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  p.inExterns  }  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  p.inExterns  }  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
155	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
156	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
157	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
158	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimple  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
159	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	47	None	replace
160	[BUG]  [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	47	None	replace
161	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	47	None	replace
162	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
163	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
164	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
165	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
166	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
167	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration    	non-compiled	[CE]  not  a  statement	56	None	replace
168	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration    	non-compiled	[CE]  not  a  statement	56	None	replace
169	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
170	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  }	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
171	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
172	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
173	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
174	[BUG]  [BUGGY]  if(p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	21	None	replace
175	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	21	None	replace
176	[BUG]  [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	21	None	replace
177	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
178	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
179	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
180	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
181	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	99	None	replace
182	[BUG]  [BUGGY]  if(!p.inExterns  ||  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	99	None	replace
183	[BUG]  [BUGGY]  if(!p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	99	None	replace
184	[BUG]  [BUGGY]  if(p.declaration.node!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.node!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.node!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(n.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	26	None	replace
185	[BUG]  [BUGGY]  if(canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(n.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	26	None	replace
186	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.n    	non-compiled	[CE]  not  a  statement	55	None	replace
187	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
188	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
189	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
190	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
191	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
192	[BUG]  [BUGGY]  If(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
193	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
194	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
195	[BUG]  [BUGGY]  If(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
196	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
197	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	5	None	replace
198	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	72	None	replace
199	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	72	None	replace
200	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	72	None	replace
201	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	72	None	replace
202	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	20	None	replace
203	[BUG]  [BUGGY]  if(!p.inExterns  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	20	None	replace
204	[BUG]  [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	20	None	replace
205	[BUG]  [BUGGY]  if(!p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	20	None	replace
206	[BUG]  [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	97	None	replace
207	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	97	None	replace
208	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	97	None	replace
209	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	97	None	replace
210	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	59	None	replace
211	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	59	None	replace
212	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	59	None	replace
213	[BUG]  [BUGGY]  if(n.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.parent!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	78	None	replace
214	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
215	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
216	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
217	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
218	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
219	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	16	None	replace
220	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
221	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
222	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
223	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
224	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
225	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
226	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	94	None	replace
227	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
228	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
229	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
230	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
231	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FOR)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FOR)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FOR)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
232	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	25	None	replace
233	[BUG]  [BUGGY]  if(n.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	76	None	replace
234	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	76	None	replace
235	[BUG]  [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	76	None	replace
236	[BUG]  [BUGGY]  if(p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	76	None	replace
237	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
238	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
239	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
240	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.parent.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
241	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
242	[BUG]  [BUGGY]  if(n.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
243	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
244	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
245	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	37	None	replace
246	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	37	None	replace
247	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	37	None	replace
248	[BUG]  [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	50	None	replace
249	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	50	None	replace
250	[BUG]  [BUGGY]  if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	50	None	replace
251	[BUG]  [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	50	None	replace
252	[BUG]  [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	30	None	replace
253	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	30	None	replace
254	[BUG]  [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	84	None	replace
255	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
256	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
257	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
258	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
259	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
260	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
261	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
262	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
263	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
264	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
265	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    nu    	non-compiled	[CE]  not  a  statement	19	None	replace
266	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    nu    	non-compiled	[CE]  not  a  statement	19	None	replace
267	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
268	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  append  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  append  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  append	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
269	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
270	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
271	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  app  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  app  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  app	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
272	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
273	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &    	non-compiled	[CE]  not  a  statement	45	None	replace
274	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &    	non-compiled	[CE]  not  a  statement	45	None	replace
275	[BUG]  [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
276	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
277	[BUG]  [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
278	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
279	[BUG]  [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
280	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	39	None	replace
281	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
282	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
283	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
284	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimple  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	91	None	replace
285	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimpl  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimpl  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  updateSimpl	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	91	None	replace
286	[BUG]  [BUGGY]  n.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  n.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	n.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	91	None	replace
287	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
288	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
289	[BUG]  [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
290	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
291	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
292	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
293	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
294	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
295	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    ||    n.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	32	None	replace
296	[BUG]  [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	95	None	replace
297	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	107	None	replace
298	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
299	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
300	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
301	[BUG]  [BUGGY]  node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
302	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
303	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpl  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpl  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpl	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	71	None	replace
304	[BUG]  [BUGGY]  if(n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	77	None	replace
305	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
306	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
307	[BUG]  [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
308	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
309	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
310	[BUG]  [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	41	None	replace
311	[BUG]  [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  ==  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	41	None	replace
312	[BUG]  [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	44	None	replace
313	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
314	[BUG]  [BUGGY]  if(n.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(n.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(n.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
315	[BUG]  [BUGGY]  if(parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
316	[BUG]  [BUGGY]  if(p.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
317	[BUG]  [BUGGY]  if(p.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
318	[BUG]  [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  parent!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
319	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	63	None	replace
320	[BUG]  [BUGGY]  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	63	None	replace
321	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
322	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	36	None	replace
323	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	36	None	replace
324	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
325	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  append  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  append  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  append	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
326	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
327	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPro	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
328	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlias	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
329	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  app  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  app  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  app	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
330	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	29	None	replace
331	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
332	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
333	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
334	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
335	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(n.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	40	None	replace
336	[BUG]  [BUGGY]  if(p.inExterns!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns!=  null  &&  p.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(n.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	40	None	replace
337	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &    	non-compiled	[CE]  not  a  statement	45	None	replace
338	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
339	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  }	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
340	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
341	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
342	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [Delete]  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [Delete]  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [Delete]  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
343	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
344	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
345	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
346	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
347	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
348	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
349	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
350	[BUG]  [BUGGY]  if(!p.inExterns  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  n  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	2	None	replace
351	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
352	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
353	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration  ==  null  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration  ==  null  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	105	None	replace
354	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
355	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
356	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
357	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  false  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  false  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns!=  false  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
358	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
359	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
360	[BUG]  [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
361	[BUG]  [BUGGY]  if(p.name!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.name!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.name!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
362	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	29	None	replace
363	[BUG]  [BUGGY]  if(node.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(node.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(node.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	28	None	replace
364	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  }	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
365	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
366	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
367	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	39	None	replace
368	[BUG]  [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  mustCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	1	None	replace
369	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
370	[BUG]  [BUGGY]  if(p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
371	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
372	[BUG]  [BUGGY]  If(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.declaration!=  null  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
373	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
374	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
375	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
376	[BUG]  [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	10	None	replace
377	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
378	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	23	None	replace
379	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
380	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	36	None	replace
381	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
382	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  app  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  app  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  app	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
383	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	74	None	replace
384	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
385	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
386	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
387	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [Delete]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [Delete]  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [Delete]	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
388	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
389	[BUG]  [BUGGY]  p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
390	[BUG]  [BUGGY]  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
391	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclar  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclar  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclar	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
392	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	71	None	replace
393	[BUG]  [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	41	None	replace
394	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
395	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
396	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
397	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cancollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
398	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	44	None	replace
399	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	44	None	replace
400	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
401	[BUG]  [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
402	[BUG]  [BUGGY]  if(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	6	None	replace
403	[BUG]  [BUGGY]  if(!p.inExterns  ||  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  cannotCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	37	None	replace
404	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
405	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
406	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
407	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
408	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	104	None	replace
409	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    ||    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	99	None	replace
410	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	9	None	replace
411	[BUG]  [BUGGY]  if(p.inExterns  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ==  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
412	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  update  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  update  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  update	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	91	None	replace
413	[BUG]  [BUGGY]  p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  <  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	63	None	replace
414	[BUG]  [BUGGY]  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getNext()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	63	None	replace
415	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	27	None	replace
416	[BUG]  [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
417	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
418	[BUG]  [BUGGY]  if(!p.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
419	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
420	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
421	[BUG]  [BUGGY]  if(p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
422	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
423	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
424	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
425	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
426	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
427	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p    	non-compiled	[CE]  not  a  statement	57	None	replace
428	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	30	None	replace
429	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()    ==    null    &&    	non-compiled	[CE]  not  a  statement	46	None	replace
430	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
431	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
432	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
433	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getPar  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getPar  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getPar	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
434	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
435	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
436	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getPar	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
437	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.get	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
438	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
439	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
440	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    nu    	non-compiled	[CE]  not  a  statement	19	None	replace
441	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    nu    	non-compiled	[CE]  not  a  statement	19	None	replace
442	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
443	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
444	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
445	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
446	[BUG]  [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
447	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	38	None	replace
448	[BUG]  [BUGGY]  if(node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(node!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.node!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	103	None	replace
449	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.parent!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	78	None	replace
450	[BUG]  [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	94	None	replace
451	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	94	None	replace
452	[BUG]  [BUGGY]  if(!p.inExterns  &&  cannotcollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  cannotcollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  cannotcollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
453	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cancollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
454	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
455	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
456	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.    	non-compiled	[CE]  not  a  statement	54	None	replace
457	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	59	None	replace
458	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.    	non-compiled	[CE]  not  a  statement	59	None	replace
459	[BUG]  [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	21	None	replace
460	[BUG]  [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
461	[BUG]  [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
462	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
463	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
464	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	95	None	replace
465	[BUG]  [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	95	None	replace
466	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	24	None	replace
467	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
468	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
469	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    	non-compiled	[CE]  not  a  statement	85	None	replace
470	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
471	[BUG]  [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	67	None	replace
472	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	18	None	replace
473	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	36	None	replace
474	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	36	None	replace
475	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	80	None	replace
476	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CALL)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	72	None	replace
477	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	97	None	replace
478	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    parent    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	9	None	replace
479	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESUL	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
480	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
481	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR_RESULT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
482	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.    	non-compiled	[CE]  not  a  statement	82	None	replace
483	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	106	None	replace
484	[BUG]  [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	44	None	replace
485	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	44	None	replace
486	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	79	None	replace
487	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.VAR);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.VAR);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	63	None	replace
488	[BUG]  [BUGGY]  if(p.declaration.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	21	None	replace
489	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	98	None	replace
490	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    parent!=    null    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	11	None	replace
491	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.EXPR	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.EXPR_RESULT)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	91	None	replace
492	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
493	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
494	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
495	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	61	None	replace
496	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
497	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
498	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	96	None	replace
499	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.n    	non-compiled	[CE]  not  a  statement	55	None	replace
500	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(p.inExterns    ||    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
501	[BUG]  [BUGGY]  if(p.node!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.node!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.node!=  null  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	5	None	replace
502	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.inExterns  &&  cannotCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	22	None	replace
503	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	50	None	replace
504	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
505	[BUG]  [BUGGY]  if(node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
506	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
507	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	102	None	replace
508	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.    	non-compiled	[CE]  not  a  statement	54	None	replace
509	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  }	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
510	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	66	None	replace
511	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
512	[BUG]  [BUGGY]  if(p.parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	101	None	replace
513	[BUG]  [BUGGY]  if(p.inExterns  ==  null  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  ==  null  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  ==  null  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.inExterns    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	43	None	replace
514	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.SCRIPT)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
515	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	71	None	replace
516	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	71	None	replace
517	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	71	None	replace
518	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	92	None	replace
519	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	52	None	replace
520	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	52	None	replace
521	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	1	None	replace
522	[BUG]  [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  canCollapseChildNames  ||  n.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    ||    n.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	32	None	replace
523	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR);  }	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
524	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR;  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.VAR;	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	64	None	replace
525	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(n.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	26	None	replace
526	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node	  if(n.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	26	None	replace
527	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  n.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(n.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	26	None	replace
528	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	83	None	replace
529	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  }	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
530	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH);	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH);    	non-compiled	[CE]  not  a  statement	88	None	replace
531	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
532	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
533	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	15	None	replace
534	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	87	None	replace
535	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	30	None	replace
536	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(p.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	30	None	replace
537	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	107	None	replace
538	[BUG]  [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &    	non-compiled	[CE]  not  a  statement	51	None	replace
539	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	90	None	replace
540	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	90	None	replace
541	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	90	None	replace
542	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimple	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    updateSimpleDe    	non-compiled	[CE]  not  a  statement	90	None	replace
543	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
544	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
545	[BUG]  [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  parent.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &	  if(!p.inExterns    &&    parent.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	49	None	replace
546	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  >>  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  >>  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  >>  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	14	None	replace
547	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration!=  null  &&  p.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(p.declaration!=    null    &&    p.declaration!=    null    &&    p.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	86	None	replace
548	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
549	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
550	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
551	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.FUNCTION)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAlia	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.FUNCTION)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	62	None	replace
552	[BUG]  [BUGGY]  if(!p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	100	None	replace
553	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration  }  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration  }	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration    	non-compiled	[CE]  not  a  statement	56	None	replace
554	[BUG]  [BUGGY]  if(p.node  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.node  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.node  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	4	None	replace
555	[BUG]  [BUGGY]  if(p.parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent  ==  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	4	None	replace
556	[BUG]  [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	4	None	replace
557	[BUG]  [BUGGY]  if(p.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.node!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.parent!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	78	None	replace
558	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.de  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.de  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.de	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p    	non-compiled	[CE]  not  a  statement	57	None	replace
559	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
560	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  ||  canCollapseChildNames  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    ||    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	35	None	replace
561	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	16	None	replace
562	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration    ==    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	16	None	replace
563	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.inExterns  ||  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration	  if(p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	27	None	replace
564	[BUG]  [BUGGY]  if(p.declaration!=  null  &&!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&!p.inExterns  &&  canCollapseChildNames  &&  n!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    n!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	25	None	replace
565	[BUG]  [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	77	None	replace
566	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDe	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
567	[BUG]  [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(append  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(append  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.CATCH)  {  updateSimpleDeclaration(append	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.CATCH)    {    updateSimpleDeclaration    	non-compiled	[CE]  not  a  statement	89	None	replace
568	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendProp	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
569	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropFor	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
570	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  collapseDeclarationOfNameAndDescendants(p,  appendPropForAli	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.ASSIGN)    {    collapseDeclarationOfNameAndDescendants(p,    appendPropForAlias    	non-compiled	[CE]  not  a  statement	60	None	replace
571	[BUG]  [BUGGY]  if(p.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.parent!=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    null    &&    	non-compiled	[CE]  not  a  statement	94	None	replace
572	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  parent!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
573	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.declaration.inExterns    &&    parent!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	13	None	replace
574	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    	non-compiled	[CE]  not  a  statement	81	None	replace
575	[BUG]  [BUGGY]  if(p.declaration  >=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration  >=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration  >=  null  &&  p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(p.declaration    ==    null    &&    p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	42	None	replace
576	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()  ==  null  &&	  if(!p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()    ==    null    &&    	non-compiled	[CE]  not  a  statement	46	None	replace
577	[BUG]  [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  ||  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	8	None	replace
578	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  &&  p.declaration  ==  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()  ==  nu	  if(!p.declaration.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()    ==    nu    	non-compiled	[CE]  not  a  statement	19	None	replace
579	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  cannotCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getNext()!=  null  &&	  if(!p.inExterns    &&    cannotCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getNext()!=    null    &&    	non-compiled	[CE]  not  a  statement	47	None	replace
580	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent()!=  null	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
581	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  ==  null  &&  p.declaration.node.getParent	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
582	[BUG]  [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  nu  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  nu  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.inExterns  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node  >=  null  &&  p.declaration.node.getParent()!=  nu	  if(!p.inExterns    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node    ==    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	68	None	replace
583	[BUG]  [BUGGY]  If(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.name!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
584	[BUG]  [BUGGY]  If(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  If(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	If(p.parent!=  null  &&  p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&	  If(p.declaration!=    null    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    	non-compiled	[CE]  not  a  statement	7	None	replace
585	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
586	[BUG]  [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(!p.declaration.inExterns  &&  canCollapseChildNames  ||  p.declaration.node!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.	  if(!p.declaration.inExterns    &&    canCollapseChildNames    ||    p.declaration!=    null    &&    p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    nu    	non-compiled	[CE]  not  a  statement	17	None	replace
587	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
588	[BUG]  [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null)  {  p.declaration.node!=  null  &&  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getParent().getType()  ==  Token.GETPROP)  {	  p.declaration.node!=    null    &&    p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
589	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration  >=  null  &&  p.declaration.node!=  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
590	[BUG]  [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	if(p.declaration!=  null  &&  p.inExterns  &&  canCollapseChildNames  &&  p.declaration!=  null  &&  p.declaration.node  ==  null  &&	  if(p.declaration!=    null    &&    p.inExterns    &&    canCollapseChildNames    &&    p.declaration!=    null    &&    p.declaration.node!=    null    &&    	non-compiled	[CE]  not  a  statement	58	None	replace
591	[BUG]  [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node.getParent()!=  null  &&  p.declaration.node.getNext().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
592	[BUG]  [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.canCollapse()  &&  canCollapseChildNames)  {  updateObjLitOrFunctionDeclaration(n,  alias);  }  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  collapseDeclarationOfNameAndDescendants(  p,  appendPropForAlias(alias,  p.name));      [BUGGY]  p.declaration.node  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);  [BUGGY]      p.declaration.node  !=  null  &&  p.declaration.node.getParent()  !=  null  &&  p.declaration.node.getParent().getType()  ==  Token.ASSIGN)  {  updateSimpleDeclaration(  appendPropForAlias(alias,  p.name),  p,  p.declaration);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  collapseDeclarationOfNameAndDescendants  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  initialized  inlineAliases  isObjKey  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	p.declaration.node  ==  null  &&  p.declaration.node.getParent().getType()  ==  Token.NAME);	  p.declaration.node.getParent()!=    null    &&    p.declaration.node.getParent().getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
