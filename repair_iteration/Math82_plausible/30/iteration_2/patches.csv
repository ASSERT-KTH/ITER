bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  ==  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  ==  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	47	13	replace
2	[BUG]  [BUGGY]  if  (rhs  ==  DEFAULT_EPSILON)  {  [FE]  UnboundedSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  ==  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  ==  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	47	13	replace
3	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs!=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs!=  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	47	7	replace
4	[BUG]  [BUGGY]  if  (rhs!=  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs!=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs!=  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	47	7	replace
5	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >=  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	47	11	replace
6	[BUG]  [BUGGY]  if  (rhs  >=  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >=  DEFAULT_EPSILON)  {	  if    (rhs    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	47	11	replace
7	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
8	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
9	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
11	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
12	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
13	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  /  1;	  Integer    minRatioPos    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
15	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
16	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  DEFAULT_EPSILON;	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
17	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(entry,    1,    rhs);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  2,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(entry,    1,    rhs);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
20	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
21	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
22	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
23	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
24	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
25	[BUG]  [BUGGY]  Integer  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
26	[BUG]  [BUGGY]  if  (ratio  >  0)  {  if  (ratio  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  0)  {  if  (ratio  >  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    0)    {    if  (ratio  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
27	[BUG]  [BUGGY]  if  (ratio  >  0)  {  If  (ratio  >  0)  {  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  0)  {  If  (ratio  >  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    0)    {    If  (ratio  >  0)  {	  	non-compiled	[CE]  ';'  expected	30	None	add
28	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  float    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
29	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  float    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
30	[BUG]  [BUGGY]  if  (ratio  >  maxRatio)  {  [CE]  cannot  find  symbol  maxRatio  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  maxRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  maxRatio)  {	  if    (ratio    >    minRatio)    {    if    (ratio    >    maxRatio)    {    	non-compiled	[CE]  cannot  find  symbol  maxRatio	102	None	replace
31	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  ==  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  ==  ratio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  UnboundedSolutionException  	22	6	replace
32	[BUG]  [BUGGY]  if  (rhs  ==  ratio)  {  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  ==  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  ==  ratio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  UnboundedSolutionException  	22	6	replace
33	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&  rhs  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&  rhs  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&  rhs  <  =  DEFAULT_EPSILON)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
34	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >=  ratio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	22	4	replace
35	[BUG]  [BUGGY]  if  (rhs  >=  ratio)  {  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >=  ratio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	22	4	replace
36	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  table.getValue()  -  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  table.getValue()  -  1;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
37	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  table.getValue()  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  table.getValue()  +  1;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
38	[BUG]  [BUGGY]  Integer  minRatioPos  =  input.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  input.getValue();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  input.getValue();	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
39	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
40	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
41	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
42	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
43	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  minValue);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  minValue);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  minValue);	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
44	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
45	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry  -  1);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
50	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  /  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  /  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  /  1);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
51	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon  -  1);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
52	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
53	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
54	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
55	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  rhs  -  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio  rhs  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs    -    1);    	non-compiled	[CE]  ')'  expected	98	None	replace
56	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  float    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
57	[BUG]  [BUGGY]  if(ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    If    (ratio    <    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
58	[BUG]  [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    If    (ratio    <    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
59	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  ratio;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  /  ratio;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  ratio;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  ratio;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
63	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
64	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
65	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
66	[BUG]  [BUGGY]  if  (index  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (index  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (index  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    index    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
67	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  index  <  DEFAULT_EPSILON)  {  [CE]  cannot  find  symbol  index  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  index  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  index  <  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    index    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  cannot  find  symbol  index	99	None	replace
68	[BUG]  [BUGGY]  if  (rhs  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    index    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
69	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
70	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.rhs,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.rhs,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.rhs,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.length,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  if  (  ratio  <  rhs)  {  if  (  ratio  <  rhs)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  rhs)  {  if  (  ratio  <  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (    ratio    <    rhs)    {    if  (  ratio  <  rhs)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
73	[BUG]  [BUGGY]  if  (  ratio  <  rhs)  {  If  (  ratio  <  rhs)  {  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  rhs)  {  If  (  ratio  <  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (    ratio    <    rhs)    {    If  (  ratio  <  rhs)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
74	[BUG]  [BUGGY]  if  (rhs  <  ratio)  {  If  (rhs  >  ratio)  {  [CE]  ';'  expected  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio)  {  If  (rhs  >  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio)  {  If  (rhs  >  ratio)  {	  if    (rhs    <    ratio)    {    If    (rhs    <    ratio)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
75	[BUG]  [BUGGY]  if  (rhs  <  =  ratio)  {  If  (rhs  <  ratio)  {  [CE]  illegal  start  of  expression  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  ratio)  {  If  (rhs  <  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  ratio)  {  If  (rhs  <  ratio)  {	  if    (rhs    <    ratio)    {    If    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  if  (rhs  <  minRatio)  {  If  (rhs  <  ratio)  {  [CE]  ';'  expected  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  minRatio)  {  If  (rhs  <  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  minRatio)  {  If  (rhs  <  ratio)  {	  if    (rhs    <    ratio)    {    If    (rhs    <    ratio)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
77	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
78	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
79	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
80	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  >=  minRatio)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  >=  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >=    minRatio)    {    if  (ratio  >=  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
82	[BUG]  [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio!=  minRatio)  {  [CE]  illegal  start  of  expression  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio!=  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >=    minRatio)    {    if  (ratio!=  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
83	[BUG]  [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  >>  minRatio)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  >>  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >=    minRatio)    {    if  (ratio  >>  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
84	[BUG]  [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  ==  minRatio)  {  [CE]  illegal  start  of  expression  [FE]          UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  minRatio)  {  if  (ratio  ==  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >=    minRatio)    {    if  (ratio  ==  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
85	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
86	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
87	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON    ||    ratio    >    MAX_EPSILON)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	48	None	replace
88	[BUG]  [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON    ||    ratio    >    MAX_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
89	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
90	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSilON)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSilON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSilON)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
91	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  If  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  If  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    If  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
92	[BUG]  [BUGGY]  if  (ratio  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  =  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  =  0)  {	  if    (ratio    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
93	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
94	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
95	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
96	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
97	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
98	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
99	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
100	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
101	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
102	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  float    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
103	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  float    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
104	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
106	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
107	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  >=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  >=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio    >=    DEFAULT_EPSILON)    {    if(ratio  >=  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
108	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  >>  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  >>  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio    >=    DEFAULT_EPSILON)    {    if(ratio  >>  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
109	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio!=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio!=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio    >=    DEFAULT_EPSILON)    {    if(ratio!=  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
110	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  ==  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  if(ratio  ==  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio    >=    DEFAULT_EPSILON)    {    if(ratio  ==  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
111	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  if  (ratio  >  rhs)  {  if  (ratio  >  rhs)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  rhs)  {  if  (ratio  >  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    rhs)    {    if  (ratio  >  rhs)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
116	[BUG]  [BUGGY]  if  (ratio  >  rhs)  {  If  (ratio  >  rhs)  {  [CE]  ';'  expected  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  rhs)  {  If  (ratio  >  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    rhs)    {    If  (ratio  >  rhs)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
117	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(Entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
118	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  ratio);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(Entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
119	[BUG]  [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    DEFAULT_EPSILON)    {    if  (ratio  >  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
120	[BUG]  [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  If  (ratio  >  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  If  (ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    DEFAULT_EPSILON)    {    If  (ratio  >  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
121	[BUG]  [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >  DEFAULT_EPSilON)  {  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >  DEFAULT_EPSilON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    DEFAULT_EPSILON)    {    if  (ratio  >  DEFAULT_EPSilON)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
122	[BUG]  [BUGGY]  If  (ratio  >  0)  {  [CE]  ';'  expected  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  If  (ratio  >  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	If  (ratio  >  0)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
123	[BUG]  [BUGGY]  If  (ratio  <  minRatio)  {  [CE]  ';'  expected  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  If  (ratio  <  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	If  (ratio  <  minRatio)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
124	[BUG]  [BUGGY]  If  (ratio  >  rhs)  {  [CE]  ';'  expected  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  If  (ratio  >  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	If  (ratio  >  rhs)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
125	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
126	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
127	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
128	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
129	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  minRatio  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  <  minRatio  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	27	6	replace
130	[BUG]  [BUGGY]  if  (ratio  <  minRatio  ||  ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  minRatio  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  minRatio  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	27	6	replace
131	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
132	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
133	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  col,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  col,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  col,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
134	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
135	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
136	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
137	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
138	[BUG]  [BUGGY]  Integer  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  ratio  =  MathUtils.compareTo(entry,  0,  rhs);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
139	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
140	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    ratio,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
141	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  int    minRatio    =    MathUtils.compareTo(entry,    0,    ratio)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
142	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  int    minRatio    =    MathUtils.compareTo(entry,    0,    ratio)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
143	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
144	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
145	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
146	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)/  epsilon;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
147	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
148	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
149	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
151	[BUG]  [BUGGY]  if  (rhs  <  minRatio)  {  if  (rhs  <  minRatio)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  minRatio)  {  if  (rhs  <  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    <    minRatio)    {    if  (rhs  <  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
152	[BUG]  [BUGGY]  if  (rhs  <  minRatio)  {  If  (rhs  <  minRatio)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  minRatio)  {  If  (rhs  <  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    <    minRatio)    {    If  (rhs  <  minRatio)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
153	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
154	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
155	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
156	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
157	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
158	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  ((  ratio  <  rhs)||(  ratio  >  DEFAULT_EPSILON))  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  ((  ratio  <  rhs)||(  ratio  >  DEFAULT_EPSILON))  {	  if    (    ratio    <    rhs)    {    	compilable	  [FE]  NoFeasibleSolutionException  	86	11	replace
159	[BUG]  [BUGGY]  if  ((  ratio  <  rhs)||(  ratio  >  DEFAULT_EPSILON))  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  ((  ratio  <  rhs)||(  ratio  >  DEFAULT_EPSILON))  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  ((  ratio  <  rhs)||(  ratio  >  DEFAULT_EPSILON))  {	  if    (    ratio    <    rhs)    {    	compilable	  [FE]  NoFeasibleSolutionException  	86	11	replace
160	[BUG]  [BUGGY]  if  (  ratio  <  =  rhs)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  =  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (  ratio  <  =  rhs)  {	  if    (    ratio    <    rhs)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
161	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  int    minRatio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
162	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  -  1);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
163	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
164	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  /  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  /  2);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio  /  2);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
165	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
166	[BUG]  [BUGGY]  Integer  minRatioPos  =  col.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  col.getValue()  -  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  col.getValue()  -  1;	  Integer    minRatioPos    =    entry.getValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
167	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	46	7	replace
168	[BUG]  [BUGGY]  if  (rhs  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	46	7	replace
169	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_MINOR)  {  [CE]  cannot  find  symbol  DEFAULT_MINOR  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_MINOR)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_MINOR)  {	  if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MINOR	46	None	replace
170	[BUG]  [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
171	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
172	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
173	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
174	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
175	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
176	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
177	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
178	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry);	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
179	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
180	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
181	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  rhs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  rhs;	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
182	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
183	[BUG]  [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  DEFAULT_EPSILON  ||  ratio  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    =    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
184	[BUG]  [BUGGY]  if  (rhs  <  =  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  =  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    =    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
185	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
186	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
187	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
188	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	25	13	replace
189	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON)  {  [FE]  UnboundedSolutionException  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	25	13	replace
190	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]                UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON  ||  ratio  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON  ||  ratio  <  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	25	12	replace
191	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON  ||  ratio  <  DEFAULT_EPSILON)  {  [FE]  UnboundedSolutionException  [FE]                UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON  ||  ratio  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  ratio  <  DEFAULT_EPSILON  ||  ratio  <  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	25	12	replace
192	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
193	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
194	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
195	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
196	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
197	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
198	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  ratio)/  entry;	  int    minRatio    =    MathUtils.compareTo(entry,    0,    ratio)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
199	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
200	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
201	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
202	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	  long    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
203	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  >=  rhs)  {	  if    (ratio    >    rhs)    {    	compilable	  [FE]  UnboundedSolutionException  	29	7	replace
204	[BUG]  [BUGGY]  if  (ratio  >=  rhs)  {  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >=  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >=  rhs)  {	  if    (ratio    >    rhs)    {    	compilable	  [FE]  UnboundedSolutionException  	29	7	replace
205	[BUG]  [BUGGY]  if  (ratio  >  rhs  &&  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  rhs  &&  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  rhs  &&  ratio  <  =  DEFAULT_EPSILON)  {	  if    (ratio    >    rhs)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
206	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
207	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
208	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >  minRatio)  {	  if    (rhs    <    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	24	13	replace
209	[BUG]  [BUGGY]  if  (rhs  >  minRatio)  {  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  minRatio)  {	  if    (rhs    <    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	24	13	replace
210	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >=  minRatio)  {	  if    (rhs    <    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	24	13	replace
211	[BUG]  [BUGGY]  if  (rhs  >=  minRatio)  {  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >=  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >=  minRatio)  {	  if    (rhs    <    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	24	13	replace
212	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
213	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
214	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
215	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  double    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
216	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
217	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
218	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
219	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
220	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
221	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry).compareTo(rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry).compareTo(rhs)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry).compareTo(rhs)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
222	[BUG]  [BUGGY]  if  (rhs  >  ratio)  {  if  (rhs  >  ratio)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio)  {  if  (rhs  >  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    >    ratio)    {    if  (rhs  >  ratio)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
223	[BUG]  [BUGGY]  if  (rhs  >  ratio)  {  If  (rhs  >  ratio)  {  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio)  {  If  (rhs  >  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    >    ratio)    {    If  (rhs  >  ratio)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
224	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
225	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
226	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
227	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  ==  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  ==  DEFAULT_EPSILON)  {	  if(ratio    >=    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	104	13	replace
228	[BUG]  [BUGGY]  if(ratio  ==  DEFAULT_EPSILON)  {  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  ==  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  ==  DEFAULT_EPSILON)  {	  if(ratio    >=    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	104	13	replace
229	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon  -  1);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
230	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
231	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
232	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)>  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)>  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)>  0)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	22	None	replace
233	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  <  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  <  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  <  0)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	22	None	replace
234	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  >=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&!MathUtils.compareTo(rhs,  0,  epsilon)  >=  0)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	22	None	replace
235	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
236	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  double    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
237	[BUG]  [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  >  minRatio)  {  [CE]  illegal  start  of  expression  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  >  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  =  DEFAULT_EPSILON)  {  If  (ratio  >  minRatio)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
238	[BUG]  [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  DEFAULT_EPSILON)  {  If  (ratio  <  =  DEFAULT_EPSILON)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
239	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  *  1;	  Integer    minRatioPos    =    entry.getValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
240	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  float    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
241	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  If(ratio  >=  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  If(ratio  >=  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio    >=    DEFAULT_EPSILON)    {    If(ratio  >=  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
242	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
243	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
244	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon)/  ratio;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
245	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
246	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
247	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
248	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
249	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
250	[BUG]  [BUGGY]  float  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
251	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  ratio);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(value,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
252	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
253	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  rhs.length);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    ratio);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
254	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon)/  ratio;	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
255	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  index  <  =  MAX_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio  &&  index  <  =  MAX_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  index  <  =  MAX_EPSILON)  {	  if    (rhs    <    ratio    &&    index    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
256	[BUG]  [BUGGY]  Double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
257	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  0,  ratio);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  epsilon,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    ratio,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
258	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  long  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	long  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	  long    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
259	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(value,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(value,  0,  epsilon)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(value,  0,  epsilon)/  ratio;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
260	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
261	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  if  (ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON    ||    ratio    >    DEFAULT_EPSILON)    {    if  (ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
262	[BUG]  [BUGGY]  if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  rhs)  {  [CE]  illegal  start  of  expression  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  rhs)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
263	[BUG]  [BUGGY]  if  (rhs  <  ratio)  {  If  (ratio  <  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio)  {  If  (ratio  <  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio)  {  If  (ratio  <  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    If    (ratio    <    DEFAULT_EPSILON)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
264	[BUG]  [BUGGY]  if  (rhs  >  ratio)  {  if  (rhs  <  ratio)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio)  {  if  (rhs  <  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio)  {  if  (rhs  <  ratio)  {	  if    (rhs    <    ratio)    {    if    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
265	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  >=  0)  {	  if    (ratio    >    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	31	9	replace
266	[BUG]  [BUGGY]  if(ratio  >=  0)  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  >=  0)  {	  if    (ratio    >    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	31	9	replace
267	[BUG]  [BUGGY]  if(ratio  >  0  &&  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >  0  &&  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  >  0  &&  ratio  <  =  DEFAULT_EPSILON)  {	  if    (ratio    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
268	[BUG]  [BUGGY]  if  (ratio  <  =  MAX_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  <  =  MAX_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  =  MAX_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON    ||    ratio    >    MAX_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
269	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
270	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
271	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
272	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
273	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio)/  epsilon;	  int    minValue    =    MathUtils.compareTo(entry,    0,    ratio)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
274	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
275	[BUG]  [BUGGY]  if  (ratio  >  EPSILON)  {  [CE]  cannot  find  symbol  EPSILON  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (ratio  >  EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  EPSILON)  {	  if    (ratio    >    rhs)    {    	non-compiled	[CE]  cannot  find  symbol  EPSILON	29	None	replace
276	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  +  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
277	[BUG]  [BUGGY]  if  (rhs  <  ratio)  {  if  (rhs  >  ratio)  {  [CE]  illegal  start  of  expression  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  ratio)  {  if  (rhs  >  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio)  {  if  (rhs  >  ratio)  {	  if    (rhs    <    ratio)    {    If    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
278	[BUG]  [BUGGY]  if  (rhs  >  ratio)  {  If  (rhs  <  ratio)  {  [CE]  ';'  expected  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio)  {  If  (rhs  <  ratio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio)  {  If  (rhs  <  ratio)  {	  if    (rhs    <    ratio)    {    If    (rhs    <    ratio)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
279	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    ratio,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
280	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    ratio,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
281	[BUG]  [BUGGY]  if  (rhs  <  minRatio)  {  if  (rhs  >=  minRatio)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  <  minRatio)  {  if  (rhs  >=  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    <    minRatio)    {    if  (rhs  >=  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
282	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
283	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;	  int    minRatio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
284	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  if  (  ratio  <  rhs)  {  if  (  ratio  >=  rhs)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  rhs)  {  if  (  ratio  >=  rhs)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (    ratio    <    rhs)    {    if  (  ratio  >=  rhs)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
286	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
287	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);	  int    minRatio    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
288	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
289	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
290	[BUG]  [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
291	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
292	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
294	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
295	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry,  epsilon,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
296	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon,    ratio);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
297	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
298	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
299	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon  +  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon  +  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
300	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&  epsilon  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&  epsilon  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&  epsilon  <  =  DEFAULT_EPSILON)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
301	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&  epsilon  <  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >  ratio  &&  epsilon  <  minRatio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	22	13	replace
302	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&  epsilon  <  minRatio)  {  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&  epsilon  <  minRatio)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&  epsilon  <  minRatio)  {	  if    (rhs    >    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	22	13	replace
303	[BUG]  [BUGGY]  if  (rhs  >  ratio  &&!epsilon)  {  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (rhs  >  ratio  &&!epsilon)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio  &&!epsilon)  {	  if    (rhs    >    ratio)    {    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	22	None	replace
304	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  ratio  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  ratio  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  +  ratio  /  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
305	[BUG]  [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
306	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
307	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  <  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  <  0)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    If    (ratio    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	37	13	replace
308	[BUG]  [BUGGY]  if(ratio  <  0)  {  [FE]  UnboundedSolutionException  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  <  0)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  <  0)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    If    (ratio    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  UnboundedSolutionException  	37	13	replace
309	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
310	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON  +  1;	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
311	[BUG]  [BUGGY]  If  (ratio  >  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]          UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  If  (ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	If  (ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
312	[BUG]  [BUGGY]  If  (ratio  >  epsilon)  {  [CE]  ';'  expected  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  If  (ratio  >  epsilon)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	If  (ratio  >  epsilon)  {	  if    (ratio    >    minRatio)    {    If    (ratio    >    minRatio)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
313	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
314	[BUG]  [BUGGY]  float  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  int    minRatio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
315	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if(ratio    >=    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	104	11	replace
316	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  >=  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if(ratio    >=    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	104	11	replace
317	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
318	[BUG]  [BUGGY]  if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (  ratio  <  =  DEFAULT_EPSILON  &&  ratio  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    ratio    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
319	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  1,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  1,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  1,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
320	[BUG]  [BUGGY]  if  (index  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if  (index  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (index  <  =  ratio  &&  index  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio    &&    index    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
321	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
322	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
323	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
324	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  double    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
325	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	          int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
326	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  int    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
327	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
328	[BUG]  [BUGGY]  if(ratio  <  rhs  ||  ratio  >  EPSILON)  {  [CE]  cannot  find  symbol  EPSILON  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  <  rhs  ||  ratio  >  EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  <  rhs  ||  ratio  >  EPSILON)  {	  if    (    ratio    <    rhs)    {    	non-compiled	[CE]  cannot  find  symbol  EPSILON	86	None	replace
329	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(  ratio  <  rhs  ||  ratio  >  epsilon)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(  ratio  <  rhs  ||  ratio  >  epsilon)  {	  if    (    ratio    <    rhs)    {    	compilable	  [FE]  NoFeasibleSolutionException  	86	11	replace
330	[BUG]  [BUGGY]  if(  ratio  <  rhs  ||  ratio  >  epsilon)  {  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(  ratio  <  rhs  ||  ratio  >  epsilon)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(  ratio  <  rhs  ||  ratio  >  epsilon)  {	  if    (    ratio    <    rhs)    {    	compilable	  [FE]  NoFeasibleSolutionException  	86	11	replace
331	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
332	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
333	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  int    minRatio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
334	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  ratio);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  ratio);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON,  ratio);	  int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
335	[BUG]  [BUGGY]  float  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  float  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
336	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
337	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
338	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(value,  rhs,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    entry);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
339	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
340	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  rhs)/  ratio;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
341	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	27	11	replace
342	[BUG]  [BUGGY]  if(ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;      [BUGGY]  if(ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  >  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	27	11	replace
