bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (rhs  <  ratio)  {  if  (rhs  <  ratio)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  ratio)  {  if  (rhs  <  ratio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    <    ratio)    {    if  (rhs  <  ratio)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
2	[BUG]  [BUGGY]  if  (rhs  <  ratio)  {  If  (rhs  <  ratio)  {  [CE]  ';'  expected  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  ratio)  {  If  (rhs  <  ratio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (rhs    <    ratio)    {    If  (rhs  <  ratio)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
3	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
7	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
8	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
9	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
10	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  1;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  +  1;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  1;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  -  1;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	add
14	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	add
15	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	add
16	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
18	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  if  (rhs  <  =  ratio)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  =  ratio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  ratio)  {	  if    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  >  ratio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  >  ratio)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	9	13	replace
22	[BUG]  [BUGGY]  if  (rhs  >  ratio)  {  [FE]  NoFeasibleSolutionException  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  >  ratio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  >  ratio)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	9	13	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (rhs  <  minRatio)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  AssertionError  	9	4	replace
24	[BUG]  [BUGGY]  if  (rhs  <  minRatio)  {  [FE]  AssertionError  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  minRatio)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  AssertionError  	9	4	replace
25	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  ratio  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	11	11	replace
27	[BUG]  [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	11	11	replace
28	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  rhs)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  >  rhs)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	11	13	replace
29	[BUG]  [BUGGY]  if  (ratio  >  rhs)  {  [FE]  UnboundedSolutionException  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  rhs)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  rhs)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	11	13	replace
30	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  0)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  >  0)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	11	11	replace
31	[BUG]  [BUGGY]  if  (ratio  >  0)  {  [FE]  NoFeasibleSolutionException  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  0)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >  0)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	11	11	replace
32	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  if  (ratio  <  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON)    {    if  (ratio  <  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
36	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  if  (ratio  >=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  if  (ratio  >=  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON)    {    if  (ratio  >=  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
37	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  If  (ratio  <  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  DEFAULT_EPSILON)  {  If  (ratio  <  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    <    DEFAULT_EPSILON)    {    If  (ratio  <  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
38	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);	      int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	      int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	7	6	replace
46	[BUG]  [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  DEFAULT_EPSILON  ||  ratio  >  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	7	6	replace
47	[BUG]  [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  =  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  =  DEFAULT_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  <  =  DEFAULT_EPSILON  ||  ratio  >  MAX_EPSILON)  {	  if    (ratio    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
50	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
51	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
52	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
54	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	      int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
58	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
59	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  epsilon;	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  if  (ratio  >  minRatio)  {  if  (ratio  >  minRatio)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  minRatio)  {  if  (ratio  >  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    minRatio)    {    if  (ratio  >  minRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
70	[BUG]  [BUGGY]  if  (ratio  >  minRatio)  {  If  (ratio  >  minRatio)  {  [CE]  ';'  expected  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  minRatio)  {  If  (ratio  >  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    minRatio)    {    If  (ratio  >  minRatio)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
71	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs);	      int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
78	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	add
83	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
85	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (  ratio  <  rhs)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (  ratio  <  rhs)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	9	13	replace
86	[BUG]  [BUGGY]  if  (  ratio  <  rhs)  {  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (  ratio  <  rhs)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (  ratio  <  rhs)  {	  if    (rhs    <    ratio)    {    	compilable	  [FE]  NoFeasibleSolutionException  	9	13	replace
87	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >=  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if  (ratio  >=  minRatio)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	11	13	replace
88	[BUG]  [BUGGY]  if  (ratio  >=  minRatio)  {  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >=  minRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (ratio  >=  minRatio)  {	  if    (ratio    >    minRatio)    {    	compilable	  [FE]  UnboundedSolutionException  	11	13	replace
89	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	double  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
91	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon,  DEFAULT_EPSILON);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    minRatio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  ratio;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	      int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
99	[BUG]  [BUGGY]  if  (rhs  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (rhs  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if  (rhs  <  ratio  &&  index  <  =  DEFAULT_EPSILON)  {	  if    (rhs    <    ratio)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
100	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  Integer  minRatioPos  =  table.getValue();  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	Integer  minRatioPos  =  table.getValue();	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  if  (ratio  >  minRatio)  {  if  (ratio  >  maxRatio)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if  (ratio  >  minRatio)  {  if  (ratio  >  maxRatio)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if    (ratio    >    minRatio)    {    if  (ratio  >  maxRatio)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
103	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	if(ratio  >=  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	21	11	replace
104	[BUG]  [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  [FE]  NoFeasibleSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;    [BUGGY]  if(ratio  >=  DEFAULT_EPSILON)  {  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	if(ratio  >=  DEFAULT_EPSILON)  {	  if    (ratio    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  NoFeasibleSolutionException  	21	11	replace
