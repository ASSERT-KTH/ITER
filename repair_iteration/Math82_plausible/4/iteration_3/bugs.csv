bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON);	  return!setOptimalValue(getOptimalValue(i),    epsilon);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
3	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  DEFAULT_EPSILON,  epsilon);	  return!setOptimalValue(getOptimalValue(i),    epsilon);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
4	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  table);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  table);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  table);	  return!setOptimalValue(getOptimalValue(i),    epsilon);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
5	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  return!isOptimal(getOptimalValue());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimal(getOptimalValue());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimal(getOptimalValue());	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
10	[BUG]  [BUGGY]  return!isOptimalValue(getRatioValue());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getRatioValue());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getRatioValue());	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
11	[BUG]  [BUGGY]  return!isOptimalValue(getRawValue());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getRawValue());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getRawValue());	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
12	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
13	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
14	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
16	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    multiplier)    <    0;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
18	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    multiplier)    <    0;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
19	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  DEFAULT_EPSILON,  epsilon);	  return!isOptimalValue(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
20	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  DEFAULT_EPSILON,  pivotVal);	  return!isOptimalValue(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
21	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon))  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon))  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
23	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  ||    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  ||    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
26	[BUG]  [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())&&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
27	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())||(i  >=  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
28	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())||(i  >  0);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())||(i  >  0);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
29	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())&&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
30	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
31	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
32	[BUG]  [BUGGY]  return!isOptimalValue(entry,  tableau);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(entry,  tableau);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(entry,  tableau);	  return!isOptimalValue(tableau,    entry);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  return  isOptimalValue(entry,  tableau);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  isOptimalValue(entry,  tableau);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  isOptimalValue(entry,  tableau);	  return!isOptimalValue(tableau,    entry);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  return!isOptimal(entry,  tableau);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimal(entry,  tableau);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimal(entry,  tableau);	  return!isOptimalValue(tableau,    entry);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue()  +  1);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue()  +  1);	  return!setOptimumValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(),  true);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(),  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(),  true);	  return!setOptimumValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
37	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
38	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
39	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)>  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)>  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
40	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
41	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;	  return    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
42	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  =  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  =  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  =  0;	  return    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
43	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;	  return    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
44	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
45	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
46	[BUG]  [BUGGY]  return!isOptimal(getOptimalValue(i));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimal(getOptimalValue(i));  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimal(getOptimalValue(i));	  return!isOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(i),  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getOptimalValue(i),  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(i),  true);	  return!isOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(i),  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getOptimalValue(i),  false);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(i),  false);	  return!isOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i),  true);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(i),  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i),  true);	  return!setOptimumValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
50	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(),  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(),  DEFAULT_EPSILON);	  return!setOptimalValue(getOptimalValue(),    epsilon);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
51	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(),  0,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(),  0,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(),  0,  epsilon);	  return!setOptimalValue(getOptimalValue(),    epsilon);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
52	[BUG]  [BUGGY]  return!setOptimalValue(getRatio(),  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getRatio(),  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getRatio(),  epsilon);	  return!setOptimalValue(getOptimalValue(),    epsilon);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
53	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(),  table);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(),  table);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(),  table);	  return!setOptimalValue(getOptimalValue(),    epsilon);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
54	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon))  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon))  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  entry,  epsilon,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  entry,  epsilon,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  entry,  epsilon,  pivotVal);	  return!isOptimalValue(tableau,    epsilon,    pivotVal);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  epsilon,  minRatio);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  epsilon,  minRatio);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  epsilon,  minRatio);	  return!isOptimalValue(tableau,    epsilon,    pivotVal);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  entry,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  entry,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  entry,  DEFAULT_EPSILON);	  return!isOptimalValue(tableau,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
58	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON,  pivotVal);	  return!isOptimalValue(tableau,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
59	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  entry,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  entry,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  entry,  epsilon,  DEFAULT_EPSILON);	  return!isOptimalValue(tableau,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
60	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
61	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
62	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue()  /  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue()  /  1);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue()  /  1);	  return!setOptimalValue(getOptimalValue()    +    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
63	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  -  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
65	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon.getRatio());	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
66	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    table.getRatio());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
67	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table),  true);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table),  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i,  table),  true);	  return!setOptimalValue(getOptimalValue(i,    table));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
68	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i,  table));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(i,  table));  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i,  table));	  return!setOptimalValue(getOptimalValue(i,    table));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
69	[BUG]  [BUGGY]  return!isOptimal(getOptimalValue(i,  table));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimal(getOptimalValue(i,  table));  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimal(getOptimalValue(i,  table));	  return!setOptimalValue(getOptimalValue(i,    table));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
70	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())&&(i  >  epsilon;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
73	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())||(i  >=  epsilon;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
74	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >  epsilon;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())||(i  >  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())||(i  >  epsilon;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
75	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())||(i  >  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())||(i  >  0;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
76	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
77	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
78	[BUG]  [BUGGY]  return(i  <  table.getWidth())>  epsilon;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())>  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())>  epsilon;	  return(i    <    =    table.getWidth())>    epsilon;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
79	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())>  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth())>  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())>  DEFAULT_EPSILON;	  return(i    <    =    table.getWidth())>    epsilon;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
80	[BUG]  [BUGGY]  return(i  <  =  table.getWidth()  -  1)>  epsilon;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth()  -  1)>  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth()  -  1)>  epsilon;	  return(i    <    =    table.getWidth())>    epsilon;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
81	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  pivotVal);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  pivotVal);	  return!setOptimalValue(getOptimalValue(i),    Table.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
82	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  true);	  return!setOptimalValue(getOptimalValue(i),    Table.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
83	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  null);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  null);	  return!setOptimalValue(getOptimalValue(i),    Table.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
84	[BUG]  [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
85	[BUG]  [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon);	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
86	[BUG]  [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
87	[BUG]  [BUGGY]  Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
88	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  false);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  false);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  false);	  return!setOptimalValue(getOptimalValue(i),    true);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
90	[BUG]  [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	String  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
91	[BUG]  [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Character  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
94	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  *  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
95	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
96	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
97	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
98	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
99	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
100	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0;	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
101	[BUG]  [BUGGY]  return(i  <  table.getWidth())>  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  table.getWidth())>  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  table.getWidth())>  DEFAULT_EPSILON;	  return(i    <    =    table.getWidth())>    epsilon;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
102	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
103	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
104	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(),  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(),  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(),  epsilon);	  return!setOptimumValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
105	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(i),  epsilon);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getOptimalValue(i),  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(i),  epsilon);	  return!isOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
106	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(i),  table);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getOptimalValue(i),  table);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(i),  table);	  return!isOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
107	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
108	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
109	[BUG]  [BUGGY]  return!isOptimalValue(getPositiveValue());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getPositiveValue());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getPositiveValue());	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
110	[BUG]  [BUGGY]  return!isOptimalValue(getStandardValue());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getStandardValue());  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getStandardValue());	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
111	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
112	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
113	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
114	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  -  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
116	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    defsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
117	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  defsilon)  <  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  defsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  defsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    defsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
118	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i),  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(i),  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i),  epsilon);	  return!setOptimumValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
119	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);	  return!setOptimumValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
120	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())&&(i  >  epsilon;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
121	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    multiplier)    <    0;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
122	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  epsilon);	  return!setOptimalValue(getOptimalValue(i),    Table.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
123	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
124	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
125	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  epsilon,  pivotVal);	  return!setOptimalValue(getOptimalValue(i),    epsilon);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
126	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table),  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table),  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i,  table),  epsilon);	  return!setOptimalValue(getOptimalValue(i,    table));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
127	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
128	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(epsilon,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(epsilon,  i),  0,  epsilon)  <  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(epsilon,  i),  0,  epsilon)  <  0;	  return    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
129	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
130	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon))  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon))  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
131	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
132	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }	  ||    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
133	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }	  ||    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
134	[BUG]  [BUGGY]  return!isOptimalValue(entry,  table);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(entry,  table);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(entry,  table);	  return!isOptimalValue(tableau,    entry);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
135	[BUG]  [BUGGY]  return  isOptimalValue(tableau,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  isOptimalValue(tableau,  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  isOptimalValue(tableau,  epsilon);	  return!isOptimalValue(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
136	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(),  epsilon,  pivotVal);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(),  epsilon,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(),  epsilon,  pivotVal);	  return!setOptimalValue(getOptimalValue(),    epsilon);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
137	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON,  DEFAULT_EPSILON);	  return!setOptimalValue(getOptimalValue(i),    Table.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
138	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  epsilon,  DEFAULT_EPSILON);	  return!setOptimalValue(getOptimalValue(i),    epsilon);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
139	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  entry,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(tableau,  entry,  pivotVal);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  entry,  pivotVal);	  return!isOptimalValue(tableau,    epsilon,    pivotVal);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
140	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
141	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
142	[BUG]  [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth()  &&(i  >  epsilon;	  return(i    <    =    table.getWidth())||(i    >    epsilon;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
143	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
144	[BUG]  [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth()  &&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
145	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  ||!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
146	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
147	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
148	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i,  Table.VERTICAL));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!setOptimumValue(getOptimalValue(i,  Table.VERTICAL));  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i,  Table.VERTICAL));	  return!setOptimumValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
149	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
150	[BUG]  [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
151	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON))  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON))  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
152	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(),  true);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return!isOptimalValue(getOptimalValue(),  true);  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(),  true);	  return!isOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
153	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
154	[BUG]  [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	Char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	  char    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
155	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0;	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
156	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }      [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;  [BUGGY]      }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0),  0,  epsilon)  <  0;	  return    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
