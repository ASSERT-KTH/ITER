bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);		compilable	  [FE]  AssertionError  	62	1	add
2	[BUG]  [BUGGY]    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);		compilable	  [FE]  AssertionError  	62	1	add
3	[BUG]  [BUGGY]    int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);		non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
4	[BUG]  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon);		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
5	[BUG]  [BUGGY]    Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  epsilon);		non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
6	[BUG]  [BUGGY]    Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);		non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  i;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i;	minRatio  =  ratio;  	compilable	  [FE]  AssertionError  	61	4	replace
8	[BUG]  [BUGGY]  minRatio  =  i;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  i;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i;	minRatio  =  ratio;  	compilable	  [FE]  AssertionError  	61	4	replace
9	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  -  1;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  1;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	3	replace
10	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  [FE]  NoFeasibleSolutionException  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  -  1;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	3	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio);	minRatio  =  ratio;  	compilable	  [FE]  AssertionError  	61	1	replace
12	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio);	minRatio  =  ratio;  	compilable	  [FE]  AssertionError  	61	1	replace
13	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	2	replace
14	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	2	replace
15	[BUG]  [BUGGY]    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
16	[BUG]  [BUGGY]    double  ratio  =  rhs  /  entry.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    double  ratio  =  rhs  /  entry.doubleValue();  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    double  ratio  =  rhs  /  entry.doubleValue();		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
17	[BUG]  [BUGGY]    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
18	[BUG]  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  ratio;		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
19	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  +  1;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  +  1;	minRatio  =  ratio;  	compilable	  [FE]  UnboundedSolutionException  	61	1	replace
20	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  [FE]  UnboundedSolutionException  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  ratio  +  1;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  +  1;	minRatio  =  ratio;  	compilable	  [FE]  UnboundedSolutionException  	61	1	replace
21	[BUG]  [BUGGY]    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	62	None	add
22	[BUG]  [BUGGY]    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    epsilon  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	62	None	add
23	[BUG]  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;		non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	62	None	add
24	[BUG]  [BUGGY]    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;		non-compiled	[CE]  possible  loss  of  precision	62	None	add
25	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  DEFAULT_EPSILON;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	5	replace
26	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  DEFAULT_EPSILON;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	5	replace
27	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  epsilon;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  epsilon;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	5	replace
28	[BUG]  [BUGGY]  minRatio  =  epsilon;  [FE]  NoFeasibleSolutionException  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  [BUGGY]  minRatio  =  epsilon;  [BUGGY]  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  epsilon;	minRatio  =  ratio;  	compilable	  [FE]  NoFeasibleSolutionException  	61	5	replace
