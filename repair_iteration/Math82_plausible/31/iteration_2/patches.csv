bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
2	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
3	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minValue);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minValue);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minValue);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
4	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
5	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
6	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
7	[BUG]  [BUGGY]  minRatio  =  rhs;  maxRatio  =  epsilon;  [CE]  cannot  find  symbol  maxRatio  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs;  maxRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  rhs;  maxRatio  =  epsilon;	  minRatio    =    epsilon;    maxRatio    =    epsilon;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	72	None	replace
8	[BUG]  [BUGGY]  minRatio  =  ratio;  maxRatio  =  epsilon;  [CE]  cannot  find  symbol  maxRatio  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  maxRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  maxRatio  =  epsilon;	  minRatio    =    epsilon;    maxRatio    =    epsilon;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	72	None	replace
9	[BUG]  [BUGGY]  value  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  cannot  find  symbol  value  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  value  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	value  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  value    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  cannot  find  symbol  value	124	None	replace
10	[BUG]  [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	  value    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	124	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  AssertionError  	105	1	add
12	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  AssertionError  	105	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
14	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(  ratio  /  DEFAULT_EPSILON  +  1  <  minRatio)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(  ratio  /  DEFAULT_EPSILON  +  1  <  minRatio)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
16	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(  ratio  /  DEFAULT_EPSILON  +  1  <  minRatio)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(  ratio  /  DEFAULT_EPSILON  +  1  <  minRatio)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(  ratio  /  DEFAULT_EPSILON  +  1  <  minRatio)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	105	1	add
18	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	105	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
20	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        DEFAULT_EPSILON;        minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	87	1	add
22	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	87	1	add
23	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  int  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  int  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        minRatio    =    DEFAULT_EPSILON;    int  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	87	None	add
24	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        minRatio    =    DEFAULT_EPSILON;    maxRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	87	None	add
25	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSOLON;  [CE]  cannot  find  symbol  DEFAULT_EPSOLON  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSOLON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSOLON;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSOLON	87	None	add
26	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnboundedSolutionException  	145	1	replace
27	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  UnboundedSolutionException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnboundedSolutionException  	145	1	replace
28	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	145	14	replace
29	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	145	14	replace
30	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnboundedSolutionException  	145	1	replace
31	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [FE]  UnboundedSolutionException  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnboundedSolutionException  	145	1	replace
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	145	14	replace
33	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	145	14	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  MathUtils.compareTo(rhs,  0,  entry);	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  AssertionError  	133	6	replace
35	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(rhs,  0,  entry);	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  AssertionError  	133	6	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  MathUtils.compareTo(entry,  0,  epsilon);	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  AssertionError  	133	6	replace
37	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon);  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(entry,  0,  epsilon);	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  AssertionError  	133	6	replace
38	[BUG]  [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  MathUtils.compareTo(entry,  0,  rhs);	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	133	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  3;	  minRatio    =    ratio    /    1;    	compilable	  [FE]  AssertionError  	6	5	replace
40	[BUG]  [BUGGY]  minRatio  =  ratio  /  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  3;	  minRatio    =    ratio    /    1;    	compilable	  [FE]  AssertionError  	6	5	replace
41	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	85	None	replace
42	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	85	None	replace
43	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	85	None	replace
44	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	85	None	replace
45	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	30	None	replace
46	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	30	None	replace
47	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	64	None	replace
48	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	64	None	replace
49	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	64	None	replace
50	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.max(minRatio,  ratio  -  1);	  minRatio    =    Math.max(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	47	4	replace
51	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  -  1);  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(minRatio,  ratio  -  1);	  minRatio    =    Math.max(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	47	4	replace
52	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.max(minRatio,  ratio  +  1);	  minRatio    =    Math.max(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	47	4	replace
53	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  +  1);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(minRatio,  ratio  +  1);	  minRatio    =    Math.max(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	47	4	replace
54	[BUG]  [BUGGY]  final  double  minRatioPos  =  i;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  final  double  minRatioPos  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	final  double  minRatioPos  =  i;	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	202	None	replace
55	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	202	None	replace
56	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	202	None	replace
57	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	202	None	replace
58	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	153	None	replace
59	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	153	None	replace
60	[BUG]  [BUGGY]  Ratio  ratio  =  Math.max(ratio,  minRatio);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  Math.max(ratio,  minRatio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  Math.max(ratio,  minRatio);	  minRatio    =    Math.min(minRatio,    ratio);    minRatio    =    Math.max(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
61	[BUG]  [BUGGY]  minRatio  =  Math.max(minimumRatio,  ratio);  [CE]  cannot  find  symbol  minimumRatio  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minimumRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(minimumRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    minRatio    =    Math.max(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimumRatio	27	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    *    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	148	1	add
63	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    *    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	148	1	add
64	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    *    DEFAULT_EPSILON;    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	148	None	add
65	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    *    DEFAULT_EPSILON;    maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	148	None	add
66	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSOLON;  [CE]  cannot  find  symbol  DEFAULT_EPSOLON  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSOLON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    *    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSOLON;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSOLON	148	None	add
67	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	215	None	replace
68	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;	  double    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	32	None	replace
69	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  2;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  2;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  2;	  double    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	32	None	replace
70	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	183	None	add
71	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	183	None	add
72	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	183	None	add
73	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	  	non-compiled	[CE]  ';'  expected	183	None	add
74	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	add
75	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(MINRatio,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(MINRatio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(MINRatio,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	add
76	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(MIN_EPSILON,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(MIN_EPSILON,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(MIN_EPSILON,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	add
77	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(miniRatio,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(miniRatio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(miniRatio,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	add
78	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(maxRatio,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(maxRatio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(maxRatio,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	add
79	[BUG]  [BUGGY]  double  ratio  =  entry  /  DEFAULT_EPSILON.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry  /  DEFAULT_EPSILON.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry  /  DEFAULT_EPSILON.doubleValue();	  double    ratio    =    rhs    /    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	206	None	replace
80	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON.doubleValue();	  double    ratio    =    rhs    /    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	206	None	replace
81	[BUG]  [BUGGY]  double  ratio  =  rhs  *  DEFAULT_EPSILON.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  rhs  *  DEFAULT_EPSILON.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  rhs  *  DEFAULT_EPSILON.doubleValue();	  double    ratio    =    rhs    /    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	206	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionError  	162	6	replace
83	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionError  	162	6	replace
84	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	162	None	replace
85	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
86	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
87	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  minRatio)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  >  minRatio)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
88	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
89	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  incompatible  types	199	None	replace
90	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  incompatible  types	199	None	replace
91	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  UnboundedSolutionException  	140	1	replace
92	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  UnboundedSolutionException  	140	1	replace
93	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	4	replace
94	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	4	replace
95	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	2	replace
96	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	2	replace
97	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	4	replace
98	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	140	4	replace
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  /  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio  /  1);	  minRatio    =    Math.min(minRatio,    ratio    +    1);    	compilable	  [FE]  AssertionError  	44	1	replace
100	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  /  1);  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  /  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio  /  1);	  minRatio    =    Math.min(minRatio,    ratio    +    1);    	compilable	  [FE]  AssertionError  	44	1	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  *  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio  *  1);	  minRatio    =    Math.min(minRatio,    ratio    +    1);    	compilable	  [FE]  AssertionError  	44	1	replace
102	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  *  1);  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  *  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio  *  1);	  minRatio    =    Math.min(minRatio,    ratio    +    1);    	compilable	  [FE]  AssertionError  	44	1	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	18	1	add
104	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	18	1	add
105	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	18	1	add
107	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	18	1	add
108	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	add
109	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  minRatio  =  ratio  -  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    2;    minRatio  =  ratio  -  2;	  	compilable	  [FE]  AssertionError  	92	1	add
111	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  minRatio  =  ratio  -  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  minRatio  =  ratio  -  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    2;    minRatio  =  ratio  -  2;	  	compilable	  [FE]  AssertionError  	92	1	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	92	1	add
113	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	92	1	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  minRatioPos  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  minRatioPos  =  i;	  	compilable	  [FE]  AssertionError  	92	1	add
115	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  minRatioPos  =  i;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  minRatioPos  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  minRatioPos  =  i;	  	compilable	  [FE]  AssertionError  	92	1	add
116	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatioPos)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatioPos)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	92	14	add
117	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatioPos)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatioPos)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatioPos)  {  minRatio  =  ratio  -  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	92	14	add
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }	  	compilable	  [FE]  AssertionError  	92	1	add
119	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  2;  if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    2;    if(  ratio  -  2  <  minRatio)  {  minRatio  =  ratio  -  2;  }	  	compilable	  [FE]  AssertionError  	92	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    i)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	165	1	add
121	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    i)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	165	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    i)    {    minRatio    =    i;    }    if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	165	1	add
123	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  if(minRatio  <  i)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    i)    {    minRatio    =    i;    }    if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	165	1	add
124	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    i)    {    minRatio    =    i;    }    int  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	165	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  2);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio  -  2);	  minRatio    =    Math.min(minRatio,    ratio    -    1);    	compilable	  [FE]  AssertionError  	42	5	replace
126	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  2);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  2);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio  -  2);	  minRatio    =    Math.min(minRatio,    ratio    -    1);    	compilable	  [FE]  AssertionError  	42	5	replace
127	[BUG]  [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio  -  1);  [CE]  cannot  find  symbol  minimumRatio  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimumRatio,  ratio  -  1);	  minRatio    =    Math.min(minRatio,    ratio    -    1);    	non-compiled	[CE]  cannot  find  symbol  minimumRatio	42	None	replace
128	[BUG]  [BUGGY]  minRatio  =  Math.min(minimumRatio,  rhs);  [CE]  cannot  find  symbol  minimumRatio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minimumRatio,  rhs);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimumRatio,  rhs);	  minRatio    =    Math.min(minimumRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimumRatio	45	None	replace
129	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
130	[BUG]  [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
131	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
132	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
133	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	add
134	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	add
135	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  }	  	compilable	  [FE]  NullPointerException  	16	14	add
136	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  }	  	compilable	  [FE]  NullPointerException  	16	14	add
137	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	16	14	add
138	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatioPos  =  i;  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	16	14	add
139	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	16	14	add
140	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	16	14	add
141	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	replace
142	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  2;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  2;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  2;	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	replace
143	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
144	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
145	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
146	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
147	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
148	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	61	4	replace
149	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  erhs  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  erhs	61	None	replace
150	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;	  double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    1;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	33	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  minRatio  =  ratio  /  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    2;    minRatio  =  ratio  /  2;	  	compilable	  [FE]  AssertionError  	134	1	add
152	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  minRatio  =  ratio  /  2;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  minRatio  =  ratio  /  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    2;    minRatio  =  ratio  /  2;	  	compilable	  [FE]  AssertionError  	134	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  2;  }	  	compilable	  [FE]  AssertionError  	134	1	add
154	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  2;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  2;  }	  	compilable	  [FE]  AssertionError  	134	1	add
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  2;  }	  	compilable	  [FE]  AssertionError  	134	1	add
156	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  2;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  2;  }	  	compilable	  [FE]  AssertionError  	134	1	add
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio)  {  minRatio  =  ratio  /  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio)  {  minRatio  =  ratio  /  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	134	1	add
158	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio)  {  minRatio  =  ratio  /  2;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio)  {  minRatio  =  ratio  /  2;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio)  {  minRatio  =  ratio  /  2;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	134	1	add
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	14	add
160	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2;  if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    2;    if(  ratio  /  2!=  minRatio);  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	14	add
161	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
162	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	204	3	replace
163	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	204	3	replace
164	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	204	2	replace
165	[BUG]  [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	204	2	replace
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  }	  minRatio    =    Math.min(minRatio,    ratio);    if(minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  AssertionError  	150	1	replace
167	[BUG]  [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  }	  minRatio    =    Math.min(minRatio,    ratio);    if(minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  AssertionError  	150	1	replace
168	[BUG]  [BUGGY]  minRatio  =  Math.max(0,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(0,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(0,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    if(minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  ')'  expected	150	None	replace
169	[BUG]  [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  }	  minRatio    =    Math.min(minRatio,    ratio);    if(minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  ')'  expected	150	None	replace
170	[BUG]  [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatioPos,  ratio);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatioPos,  ratio);  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(rhs  <  minRatio)  {  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatioPos,  ratio);  }	  minRatio    =    Math.min(minRatio,    ratio);    if(minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  ')'  expected	150	None	replace
171	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	198	4	replace
172	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	198	4	replace
173	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	198	None	replace
174	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	198	4	replace
175	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [FE]  NoFeasibleSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	198	4	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
177	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
179	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
180	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	192	None	add
181	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	192	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
183	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	192	1	add
184	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	200	None	add
185	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	200	6	add
186	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	200	6	add
187	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	200	None	add
188	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
189	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	115	None	add
190	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	115	None	add
191	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	115	None	add
192	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  1,  ratio);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  int  minValue  =  MathUtils.compareTo(entry,  1,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    ratio);    int  minValue  =  MathUtils.compareTo(entry,  1,  ratio);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	115	None	add
193	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	195	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	195	1	add
195	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	195	1	add
196	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,	  	non-compiled	[CE]  ')'  expected	195	None	add
197	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,	  	non-compiled	[CE]  ')'  expected	195	None	add
198	[BUG]  [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  e  [CE]  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  e  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  e	  	non-compiled	[CE]  	195	None	add
199	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  long    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	59	None	replace
200	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON)>  0;	  double    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	182	None	replace
201	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	57	None	add
202	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	57	None	add
203	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	57	None	add
204	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	57	None	add
205	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
206	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
207	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
208	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	81	1	add
210	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	81	1	add
211	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defsilon;	  double    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	185	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	52	1	add
213	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	52	1	add
214	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	52	None	add
215	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  +  1;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  incompatible  types	52	None	add
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	52	1	add
217	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	52	1	add
218	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
219	[BUG]  [BUGGY]  minRatio  =  ratio;  epsilon  =  epsilon;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  epsilon  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  epsilon  =  epsilon;	  minRatio    =    epsilon;    epsilon    =    epsilon;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	71	None	replace
220	[BUG]  [BUGGY]  epsilon  =  epsilon;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  epsilon;	  minRatio    =    epsilon;    epsilon    =    epsilon;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	71	None	replace
221	[BUG]  [BUGGY]  minRatio  =  rhs;  epsilon  =  epsilon;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs;  epsilon  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  rhs;  epsilon  =  epsilon;	  minRatio    =    epsilon;    epsilon    =    epsilon;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	71	None	replace
222	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  minRatio    =    epsilon;    epsilon    =    epsilon;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	71	None	replace
223	[BUG]  [BUGGY]  double  ratio  =  entry  *  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry  *  rhs.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry  *  rhs.doubleValue();	  double    ratio    =    entry    /    rhs.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	111	None	replace
224	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  ratio;  [CE]  cannot  find  symbol  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  ratio;	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
225	[BUG]  [BUGGY]  i  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  i  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	i  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  possible  loss  of  precision	177	None	replace
226	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
227	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	53	5	replace
228	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	53	5	replace
229	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  UnboundedSolutionException  	53	1	replace
230	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  +  1;  }  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  UnboundedSolutionException  	53	1	replace
231	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	53	4	replace
232	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    +    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	53	4	replace
233	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  rhs  -  1;	  minRatio    =    i    -    1;    	compilable	  [FE]  NoFeasibleSolutionException  	95	3	replace
234	[BUG]  [BUGGY]  minRatio  =  rhs  -  1;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  rhs  -  1;	  minRatio    =    i    -    1;    	compilable	  [FE]  NoFeasibleSolutionException  	95	3	replace
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  1;	  minRatio    =    0;    	compilable	  [FE]  AssertionError  	128	6	replace
236	[BUG]  [BUGGY]  minRatio  =  1;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  1;	  minRatio    =    0;    	compilable	  [FE]  AssertionError  	128	6	replace
237	[BUG]  [BUGGY]  minRatio  =  Math.min(minimum,  ratio  -  1);  [CE]  cannot  find  symbol  minimum  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minimum,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimum,  ratio  -  1);	  minRatio    =    Math.min(minimum,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimum	152	None	replace
238	[BUG]  [BUGGY]  minRatio  =  Math.min(minimum,  epsilon);  [CE]  cannot  find  symbol  minimum  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minimum,  epsilon);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimum,  epsilon);	  minRatio    =    Math.min(minimum,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimum	152	None	replace
239	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    maxRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
240	[BUG]  [BUGGY]  minRatio  =  ratio;  maxRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  maxRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  maxRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    maxRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	90	None	replace
241	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    maxRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	13	replace
243	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;  if(ratio  <  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	13	replace
244	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	8	replace
245	[BUG]  [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	8	replace
246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	8	replace
247	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  1;  if(ratio  >  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	201	8	replace
248	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	201	3	replace
249	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoFeasibleSolutionException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    ratio    -    1;    if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	201	3	replace
250	[BUG]  [BUGGY]  Ratio  ratio  =  Math.min(Ratio.MAX_VALUE,  ratio);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  Math.min(Ratio.MAX_VALUE,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  Math.min(Ratio.MAX_VALUE,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
251	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  incompatible  types	123	None	replace
252	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;	  minRatio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  incompatible  types	123	None	replace
253	[BUG]  [BUGGY]  int  minRatio  =  Math.min(minRatio,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  Math.min(minRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    int    minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	24	None	replace
254	[BUG]  [BUGGY]  int  minRatio  =  Math.min(rhs,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  Math.min(rhs,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  Math.min(rhs,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    int    minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	24	None	replace
255	[BUG]  [BUGGY]  int  minRatio  =  Math.min(minimumRatio,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  Math.min(minimumRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  Math.min(minimumRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    int    minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	24	None	replace
256	[BUG]  [BUGGY]  int  minRatio  =  Math.min(mapping,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  Math.min(mapping,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  Math.min(mapping,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    int    minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	24	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  minRatio  -=  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    epsilon;    minRatio  -=  epsilon;	  	compilable	  [FE]  AssertionError  	154	1	add
258	[BUG]  [BUGGY]  minRatio  -=  epsilon;  minRatio  -=  epsilon;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  minRatio  -=  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    epsilon;    minRatio  -=  epsilon;	  	compilable	  [FE]  AssertionError  	154	1	add
259	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
260	[BUG]  [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  epsilon;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
262	[BUG]  [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  epsilon;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
263	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
264	[BUG]  [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  epsilon;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
266	[BUG]  [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  -=  epsilon;  }  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  epsilon;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  -=  epsilon;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    epsilon;    if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  -=  epsilon;  }	  	compilable	  [FE]  AssertionError  	154	1	add
267	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    1;    minRatio  =  ratio  /  1;	  	compilable	  [FE]  AssertionError  	5	1	add
268	[BUG]  [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    1;    minRatio  =  ratio  /  1;	  	compilable	  [FE]  AssertionError  	5	1	add
269	[BUG]  [BUGGY]  minRatio  =  ratio  /  1;  int  minRatio  =  ratio  /  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  int  minRatio  =  ratio  /  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    1;    int  minRatio  =  ratio  /  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	add
270	[BUG]  [BUGGY]  minRatio  =  ratio  /  1;  maxRatio  =  ratio  /  1;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  maxRatio  =  ratio  /  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    1;    maxRatio  =  ratio  /  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	5	None	add
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    1;    minRatio  =  ratio  /  2;	  	compilable	  [FE]  AssertionError  	5	1	add
272	[BUG]  [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  2;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  1;  minRatio  =  ratio  /  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    1;    minRatio  =  ratio  /  2;	  	compilable	  [FE]  AssertionError  	5	1	add
273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  +  3;	  minRatio    =    ratio    +    2;    	compilable	  [FE]  AssertionError  	8	3	replace
274	[BUG]  [BUGGY]  minRatio  =  ratio  +  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  +  3;	  minRatio    =    ratio    +    2;    	compilable	  [FE]  AssertionError  	8	3	replace
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
276	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
277	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	14	None	add
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
279	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
280	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	14	None	add
281	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
282	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatioPos  =  i;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	14	1	add
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio;  if(minRatio  <  i)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	1	replace
284	[BUG]  [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  if(minRatio  <  i)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	1	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(ratio  <  minRatio)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(ratio  <  minRatio)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	4	replace
286	[BUG]  [BUGGY]  if(ratio  <  minRatio)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(ratio  <  minRatio)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(ratio  <  minRatio)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	4	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio;  if(minRatio  <  i)  {  minRatioPos  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	1	replace
288	[BUG]  [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  i)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  if(minRatio  <  i)  {  minRatioPos  =  i;  }	  minRatio    =    i;    if(minRatio    <    i)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	166	1	replace
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  *  DEFAULT_EPSILON  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  AssertionError  	106	5	replace
290	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  +  1;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  *  DEFAULT_EPSILON  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  AssertionError  	106	5	replace
291	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  *  1  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON  *  1  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  NoFeasibleSolutionException  	106	3	replace
292	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  *  1  +  1;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  *  1  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON  *  1  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  NoFeasibleSolutionException  	106	3	replace
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  minRatio  -=  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    DEFAULT_EPSILON;    minRatio  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	125	1	add
294	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  minRatio  -=  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  minRatio  -=  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    DEFAULT_EPSILON;    minRatio  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	125	1	add
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
296	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
298	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
299	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
300	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
302	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  -=  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	125	1	add
303	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;	  int    ratio    =    MathUtils.compareTo(entry,    0,    col)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	10	None	replace
304	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	84	None	replace
305	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	84	None	replace
306	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	84	None	replace
307	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  rhs);  [CE]  cannot  find  symbol  value  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(value,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(value,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  value	151	None	replace
308	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minValue,  0,  epsilon);  [CE]  variable  minValue  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minValue,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(minValue,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(value,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  might  not  have  been  initialized	151	None	replace
309	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  ratio);  [CE]  cannot  find  symbol  value  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(value,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(value,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  value	151	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	26	1	add
311	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	26	1	add
312	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  int  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  int  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.max(minRatio,    ratio);    int  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	26	None	add
313	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.max(minRatio,    ratio);    maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	26	None	add
314	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.max(minRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.max(minRatio,  ratio);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	26	None	add
315	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    ratio);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	102	None	replace
316	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  ratio,  DEFAULT_EPSILON);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    ratio);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	102	None	replace
317	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	175	None	replace
318	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	175	None	replace
319	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	175	None	replace
320	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	39	4	replace
321	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	39	4	replace
322	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	39	None	replace
323	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	39	None	replace
324	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	39	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	46	1	add
326	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	46	1	add
327	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  int  minRatio  =  Math.max(minRatio,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  int  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.max(minRatio,    ratio);    int  minRatio  =  Math.max(minRatio,  ratio);	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	46	None	add
328	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  maxRatio  =  Math.max(minRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  maxRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.max(minRatio,    ratio);    maxRatio  =  Math.max(minRatio,  ratio);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	46	None	add
329	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	46	1	add
330	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.max(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	46	1	add
331	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
332	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
333	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
334	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
335	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
336	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	5	replace
337	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  0;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  0;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	7	replace
338	[BUG]  [BUGGY]  minRatio  =  0;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  0;  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  0;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	193	7	replace
339	[BUG]  [BUGGY]  minRatio  =  i  -  1;  maxRatio  =  ratio  -  1;  [CE]  cannot  find  symbol  maxRatio  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  maxRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;  maxRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    maxRatio    =    ratio    -    1;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	174	None	replace
340	[BUG]  [BUGGY]  maxRatio  =  ratio  -  1;  [CE]  cannot  find  symbol  maxRatio  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  maxRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	maxRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    maxRatio    =    ratio    -    1;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	174	None	replace
341	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;	  epsilon    =    MathUtils.compareTo(entry,    0,    ratio)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	121	None	replace
342	[BUG]  [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  ratio)>  0;  [CE]  cannot  find  symbol  value  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  ratio)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	value  =  MathUtils.compareTo(entry,  0,  ratio)>  0;	  epsilon    =    MathUtils.compareTo(entry,    0,    ratio)>    0;    	non-compiled	[CE]  cannot  find  symbol  value	121	None	replace
343	[BUG]  [BUGGY]  minRatio  =  entry.doubleValue  /  ratio.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  entry.doubleValue  /  ratio.doubleValue;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  entry.doubleValue  /  ratio.doubleValue;	  minRatio    =    ratio    /    entry.doubleValue;    	non-compiled	[CE]  double  cannot  be  dereferenced	186	None	replace
344	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON.doubleValue;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON.doubleValue;	  minRatio    =    ratio    /    entry.doubleValue;    	non-compiled	[CE]  double  cannot  be  dereferenced	186	None	replace
345	[BUG]  [BUGGY]  minRatio  =  entry  /  ratio.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  entry  /  ratio.doubleValue;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  entry  /  ratio.doubleValue;	  minRatio    =    ratio    /    entry.doubleValue;    	non-compiled	[CE]  double  cannot  be  dereferenced	186	None	replace
346	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry.minRatio);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry.minRatio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  entry.minRatio);	  epsilon    =    MathUtils.compareTo(entry,    0,    minRatio);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	131	None	replace
347	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  -=  ratio;	  minRatio    -=    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	155	4	replace
348	[BUG]  [BUGGY]  minRatio  -=  ratio;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  -=  ratio;	  minRatio    -=    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	155	4	replace
349	[BUG]  [BUGGY]  epsilon  -=  minRatio;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  -=  minRatio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  -=  minRatio;	  minRatio    -=    epsilon;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	155	None	replace
350	[BUG]  [BUGGY]  maxRatio  -=  ratio;  [CE]  cannot  find  symbol  maxRatio  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  maxRatio  -=  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	maxRatio  -=  ratio;	  minRatio    -=    epsilon;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	155	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
352	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
353	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	50	None	add
354	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatioPos  =  i;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  incompatible  types	50	None	add
355	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
356	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
357	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
358	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	50	1	add
359	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  <  epsilon)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  0;  if(minRatio  <  epsilon)  {  minRatio  =  0;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	164	7	replace
360	[BUG]  [BUGGY]  minRatio  =  0;  if(minRatio  <  epsilon)  {  minRatio  =  0;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  <  epsilon)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  if(minRatio  <  epsilon)  {  minRatio  =  0;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	164	7	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  epsilon)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio;  if(minRatio  <  epsilon)  {  minRatioPos  =  i;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	164	1	replace
362	[BUG]  [BUGGY]  minRatio  =  ratio;  if(minRatio  <  epsilon)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  epsilon)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  if(minRatio  <  epsilon)  {  minRatioPos  =  i;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  AssertionError  	164	1	replace
363	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(ratio  <  epsilon)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  0;  if(ratio  <  epsilon)  {  minRatio  =  0;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	164	7	replace
364	[BUG]  [BUGGY]  minRatio  =  0;  if(ratio  <  epsilon)  {  minRatio  =  0;  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(ratio  <  epsilon)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  if(ratio  <  epsilon)  {  minRatio  =  0;  }	  minRatio    =    i;    if(minRatio    <    epsilon)    {    minRatio    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	164	7	replace
365	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  minRatio  =  0;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  0;  minRatio  =  0;	  minRatio    =    epsilon;    minRatio    =    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	69	7	replace
366	[BUG]  [BUGGY]  minRatio  =  0;  minRatio  =  0;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  minRatio  =  0;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  minRatio  =  0;	  minRatio    =    epsilon;    minRatio    =    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	69	7	replace
367	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	143	None	replace
368	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	143	None	replace
369	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    final    double    minRatioPos    =    i;    }    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	143	None	replace
370	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  -  1;  minRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    minRatio    =    ratio    -    1;    	compilable	  [FE]  NoFeasibleSolutionException  	13	3	replace
371	[BUG]  [BUGGY]  minRatio  =  i  -  1;  minRatio  =  ratio  -  1;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;  minRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    minRatio    =    ratio    -    1;    	compilable	  [FE]  NoFeasibleSolutionException  	13	3	replace
372	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  <  ratio)  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  <  ratio)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  <  ratio)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
373	[BUG]  [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
374	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	35	None	replace
375	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  epsilon;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	35	None	replace
376	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	35	None	replace
377	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
378	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
379	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
380	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
381	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	196	14	replace
382	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	196	14	replace
383	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
384	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  ratio)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NoFeasibleSolutionException  	196	5	replace
385	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  ratio);	  epsilon    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	130	None	replace
386	[BUG]  [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  cannot  find  symbol  value  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	value  =  MathUtils.compareTo(entry,  0,  ratio);	  epsilon    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  cannot  find  symbol  value	130	None	replace
387	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	207	None	add
388	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	207	1	add
389	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	207	1	add
390	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	207	None	add
391	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }	  	compilable	  [FE]  IllegalArgumentException  	207	1	add
392	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }	  	compilable	  [FE]  IllegalArgumentException  	207	1	add
393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  +  1;	  minRatio    =    epsilon    +    1;    	compilable	  [FE]  AssertionError  	157	4	replace
394	[BUG]  [BUGGY]  minRatio  =  i  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  +  1;	  minRatio    =    epsilon    +    1;    	compilable	  [FE]  AssertionError  	157	4	replace
395	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  rhs  +  1;	  minRatio    =    epsilon    +    1;    	compilable	  [FE]  UnboundedSolutionException  	157	1	replace
396	[BUG]  [BUGGY]  minRatio  =  rhs  +  1;  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  rhs  +  1;	  minRatio    =    epsilon    +    1;    	compilable	  [FE]  UnboundedSolutionException  	157	1	replace
397	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	9	None	replace
398	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	9	None	replace
399	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	82	5	replace
400	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	82	5	replace
401	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	82	5	replace
402	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	82	5	replace
403	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
404	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	31	None	replace
405	[BUG]  [BUGGY]  Ratio  minRatio  =  ratio;  if(minRatio  <  0)  {  minRatio  =  i;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  ratio;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  ratio;  if(minRatio  <  0)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    0)    {    minRatio    =    i;    }    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
406	[BUG]  [BUGGY]  minRatio  =  ratio;  if(miniRatio  <  0)  {  minRatio  =  i;  }  [CE]  cannot  find  symbol  miniRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(miniRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  if(miniRatio  <  0)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    0)    {    minRatio    =    i;    }    	non-compiled	[CE]  cannot  find  symbol  miniRatio	168	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
408	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
409	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
410	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
411	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    maxRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	22	None	add
412	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
413	[BUG]  [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        Math.min(minRatio,        ratio);        minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	22	1	add
414	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  ratio  =  DEFAULT_EPSILON;  [CE]  cannot  assign  a  value  to  final  variable  ratio  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  DEFAULT_EPSILON;  ratio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  DEFAULT_EPSILON;  ratio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    rhs    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  ratio	91	None	replace
415	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  DEFAULT_EPSILON;  minRatioPos  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    rhs    =    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	91	None	replace
416	[BUG]  [BUGGY]  rhs  =  DEFAULT_EPSILON;  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    rhs    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	91	None	replace
417	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  entry);	  epsilon    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	129	None	replace
418	[BUG]  [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  MathUtils.compareTo(entry,  0,  epsilon);	  epsilon    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	129	None	replace
419	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
420	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    *    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	107	1	add
421	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    *    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	107	1	add
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	107	1	add
423	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	107	1	add
424	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	107	1	add
425	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	107	1	add
426	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	107	1	add
427	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	107	1	add
428	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	107	1	add
429	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    *    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	107	1	add
430	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  minRatio  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    i;    minRatio  -=  i;	  	compilable	  [FE]  AssertionError  	66	1	add
431	[BUG]  [BUGGY]  minRatio  -=  i;  minRatio  -=  i;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  minRatio  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    i;    minRatio  -=  i;	  	compilable	  [FE]  AssertionError  	66	1	add
432	[BUG]  [BUGGY]  minRatio  -=  i;  int  minRatio  -=  i;  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  int  minRatio  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    i;    int  minRatio  -=  i;	  	non-compiled	[CE]  ';'  expected	66	None	add
433	[BUG]  [BUGGY]  minRatio  -=  i;  maxRatio  -=  i;  [CE]  cannot  find  symbol  maxRatio  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  maxRatio  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    i;    maxRatio  -=  i;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	66	None	add
434	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  i  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    -=    i;    i  -=  i;	  	compilable	  [FE]  OptimizationException  	66	12	add
435	[BUG]  [BUGGY]  minRatio  -=  i;  i  -=  i;  [FE]  OptimizationException  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  i;  i  -=  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    -=    i;    i  -=  i;	  	compilable	  [FE]  OptimizationException  	66	12	add
436	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
437	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio,  0,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  minRatio,  0,  epsilon);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
438	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  minRatio);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  minRatio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  minRatio);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
439	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);	  int    ratio    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
440	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	36	None	replace
441	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;	  double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	36	None	replace
442	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  ratio;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
443	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  rhs;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	171	1	add
445	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	171	1	add
446	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    int  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	171	None	add
447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	171	1	add
448	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	171	1	add
449	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  maxRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  maxRatio  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  maxRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    maxRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	171	None	add
450	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  entry.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  entry.doubleValue());  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  entry.doubleValue());	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  double  cannot  be  dereferenced	208	None	replace
451	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  entry.length()  -  1);  [CE]  double  cannot  be  dereferenced  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  entry.length()  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  entry.length()  -  1);	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  double  cannot  be  dereferenced	208	None	replace
452	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  entry.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.max(minRatio,  entry.doubleValue());  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(minRatio,  entry.doubleValue());	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  double  cannot  be  dereferenced	208	None	replace
453	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	103	None	replace
454	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	103	None	replace
455	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	103	None	replace
456	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
457	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
458	[BUG]  [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
459	[BUG]  [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
460	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	20	14	add
461	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	20	14	add
462	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    int  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	add
463	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	20	14	add
464	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	20	14	add
465	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	add
466	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  maxRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  maxRatio  [FE]            NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  maxRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  maxRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	20	None	add
467	[BUG]  [BUGGY]  minRatio  =  ratio;  maxRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  maxRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  maxRatio  =  i;	  minRatio    =    i;    maxRatio    =    i;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	190	None	replace
468	[BUG]  [BUGGY]  minRatio  =  rhs;  maxRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  rhs;  maxRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  rhs;  maxRatio  =  i;	  minRatio    =    i;    maxRatio    =    i;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	190	None	replace
469	[BUG]  [BUGGY]  minRatio  =  col;  maxRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  col;  maxRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  col;  maxRatio  =  i;	  minRatio    =    i;    maxRatio    =    i;    	non-compiled	[CE]  cannot  find  symbol  maxRatio	190	None	replace
470	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	74	2	replace
471	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	74	2	replace
472	[BUG]  [BUGGY]  MinRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  MinRatio  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  MinRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	MinRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  MinRatio	74	None	replace
473	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
474	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
475	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
476	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
477	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
478	[BUG]  [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFA  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFA  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFA	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    int    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	194	None	replace
479	[BUG]  [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValu  [CE]  ';'  expected  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValu  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValu	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    int    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	194	None	replace
480	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;  }  [CE]  possible  loss  of  precision  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    int    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
481	[BUG]  [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  [CE]  ';'  expected  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    int    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	194	None	replace
482	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)+    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
483	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)+  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)+  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)+    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
484	[BUG]  [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)+    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
485	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)+    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
486	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]              UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
487	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  +  1;  [CE]  cannot  find  symbol  [FE]                UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  +  1;	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
488	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(rhs  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]                  UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(rhs  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  +  1;  if(rhs  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
489	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [CE]  cannot  find  symbol  [FE]                    UnboundedSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  +  1;  if(ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    return    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
490	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;	  int    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	213	None	replace
491	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  rhs;	  int    ratio    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	213	None	replace
492	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	73	1	add
493	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	73	1	add
494	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	73	None	add
495	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    maxRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	73	None	add
496	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	73	1	add
497	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	73	1	add
498	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	144	14	add
499	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	144	14	add
500	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	144	None	add
501	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        IllegalArgumentException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	144	None	add
502	[BUG]  [BUGGY]  Ratio  minRatio  =  rhs;  minRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  rhs;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  rhs;  minRatio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    minRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
503	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)    *    ratio;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
504	[BUG]  [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)    *    ratio;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
505	[BUG]  [BUGGY]  minRatio  =  0;  minRatio  =  0;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  minRatio  =  0;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  minRatio  =  0;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)*  ratio;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)    *    ratio;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
506	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)*  ratio;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)*  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)*  ratio;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)    *    ratio;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
507	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	80	2	replace
508	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	80	2	replace
509	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
510	[BUG]  [BUGGY]  minRatio  =  Math.min(MIN_EPSILON,  ratio  -  1);  [CE]  cannot  find  symbol  MIN_EPSILON  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(MIN_EPSILON,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(MIN_EPSILON,  ratio  -  1);	  minRatio    =    Math.min(MIN_EPSILON,    ratio);    	non-compiled	[CE]  cannot  find  symbol  MIN_EPSILON	188	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.min(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.min(minRatio,    ratio    +    1);    minRatio  =  Math.min(minRatio,  ratio  +  1);	  	compilable	  [FE]  AssertionError  	43	1	add
512	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.min(minRatio,  ratio  +  1);  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.min(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    +    1);    minRatio  =  Math.min(minRatio,  ratio  +  1);	  	compilable	  [FE]  AssertionError  	43	1	add
513	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  maxRatio  =  Math.min(minRatio,  ratio  +  1);  [CE]  cannot  find  symbol  maxRatio  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  maxRatio  =  Math.min(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    +    1);    maxRatio  =  Math.min(minRatio,  ratio  +  1);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	43	None	add
514	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.min(minRatio,  ratio  +  1));  [CE]  ';'  expected  [FE]        UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.min(minRatio,  ratio  +  1));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    +    1);    minRatio  =  Math.min(minRatio,  ratio  +  1));	  	non-compiled	[CE]  ';'  expected	43	None	add
515	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.max(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.min(minRatio,    ratio    +    1);    minRatio  =  Math.max(minRatio,  ratio  +  1);	  	compilable	  [FE]  AssertionError  	43	1	add
516	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.max(minRatio,  ratio  +  1);  [FE]  AssertionError  [FE]          UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  minRatio  =  Math.max(minRatio,  ratio  +  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    +    1);    minRatio  =  Math.max(minRatio,  ratio  +  1);	  	compilable	  [FE]  AssertionError  	43	1	add
517	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	65	None	replace
518	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	65	None	replace
519	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	65	None	replace
520	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	2	replace
521	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	2	replace
522	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	2	replace
523	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	2	replace
524	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	6	replace
525	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  *  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    	compilable	  [FE]  NoFeasibleSolutionException  	76	6	replace
526	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
527	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
528	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
529	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
530	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
531	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	184	4	replace
532	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  incompatible  types  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  incompatible  types	184	None	replace
533	[BUG]  [BUGGY]  minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    =    i)    {    minRatio    =    i;    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
534	[BUG]  [BUGGY]  Ratio  minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  ratio;  if(minRatio  <  =  i)  {  minRatio  =  i;  }	  minRatio    =    i;    if(minRatio    <    =    i)    {    minRatio    =    i;    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
535	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;	  epsilon    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	170	None	replace
536	[BUG]  [BUGGY]  rhs  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  MathUtils.compareTo(rhs,  0,  ratio)>  0;	  epsilon    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	170	None	replace
537	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(rhs,  0,  rhs)>  0;	  epsilon    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	170	None	replace
538	[BUG]  [BUGGY]  int  minRatio  =  i;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  i;	  minRatio    =    i;    int    minRatio    =    i;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	189	None	replace
539	[BUG]  [BUGGY]  int  minRatio  =  ratio;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  ratio;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  ratio;	  minRatio    =    i;    int    minRatio    =    i;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	189	None	replace
540	[BUG]  [BUGGY]  int  minRatio  =  entry.intValue;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  entry.intValue;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  entry.intValue;	  minRatio    =    i;    int    minRatio    =    i;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	189	None	replace
541	[BUG]  [BUGGY]  int  minRatio  =  entry.intValue();  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  entry.intValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  entry.intValue();	  minRatio    =    i;    int    minRatio    =    i;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	189	None	replace
542	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	160	None	replace
543	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	160	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	167	1	add
545	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	167	1	add
546	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	167	1	add
547	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  if(minRatio  <  0)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	167	1	add
548	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    int  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	167	None	add
549	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  minRatio  =  i;  if(miniRatio  <  0)  {  minRatio  =  i;  }  [CE]  cannot  find  symbol  miniRatio  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }  minRatio  =  i;  if(miniRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    0)    {    minRatio    =    i;    }    minRatio  =  i;  if(miniRatio  <  0)  {  minRatio  =  i;  }	  	non-compiled	[CE]  cannot  find  symbol  miniRatio	167	None	add
550	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
551	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  col)  ==  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
552	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
553	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  col)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
554	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
555	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	4	replace
556	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	3	replace
557	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatio)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	15	3	replace
558	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
559	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  ratio)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
560	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
561	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
562	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
563	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	58	4	replace
564	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	38	None	replace
565	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	38	None	replace
566	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  ratio  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  Double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	138	None	replace
567	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;	  Double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	138	None	replace
568	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  1;	  Double    ratio    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	138	None	replace
569	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	86	None	replace
570	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon,  ratio);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	86	None	replace
571	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  ratio,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	86	None	replace
572	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  int    minRatioPos    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	86	None	replace
573	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [CE]  cannot  find  symbol  Entry  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	40	None	replace
574	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	40	None	replace
575	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  cannot  find  symbol  Entry  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	40	None	replace
576	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	114	4	replace
577	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	114	4	replace
578	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	114	4	replace
579	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	float  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	114	4	replace
580	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs.length);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  rhs.length);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	114	None	replace
581	[BUG]  [BUGGY]  minRatio  =  ratio  -  entry.getValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  entry.getValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  entry.getValue();	  minRatio    =    ratio    -    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	137	None	replace
582	[BUG]  [BUGGY]  minRatio  =  ratio  -  entry.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  entry.doubleValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  entry.doubleValue();	  minRatio    =    ratio    -    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	137	None	replace
583	[BUG]  [BUGGY]  int  minRatio  =  epsilon;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  epsilon;	  minRatio    =    epsilon;    int    minRatio    =    epsilon;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	70	None	replace
584	[BUG]  [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  DEFAULT_EPSILON;	  minRatio    =    epsilon;    int    minRatio    =    epsilon;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	70	None	replace
585	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	209	1	add
586	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	209	1	add
587	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    int  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	209	None	add
588	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	209	1	add
589	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	209	1	add
590	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    Integer  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	209	None	add
591	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  =  MathUtils.compareTo(entry,  0,  epsilon)  <  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  =  MathUtils.compareTo(entry,  0,  epsilon)  <  0;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    =  MathUtils.compareTo(entry,  0,  epsilon)  <  0;	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
592	[BUG]  [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  i;  }  [CE]  incompatible  types  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    0;    if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  incompatible  types	127	None	add
593	[BUG]  [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  col;  }  [CE]  incompatible  types  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  col;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    0;    if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  minRatioPos  =  col;  }	  	non-compiled	[CE]  incompatible  types	127	None	add
594	[BUG]  [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  [CE]  incompatible  types  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    0;    if(minRatio  =  0)  {  minRatio  =  0;  }	  	non-compiled	[CE]  incompatible  types	127	None	add
595	[BUG]  [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    0;    if(minRatio  =  0)  {  minRatio  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	127	None	add
596	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(minRatio,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	118	4	replace
597	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  ratio);  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  ratio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(minRatio,  0,  ratio);	  int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	118	4	replace
598	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(minRatio,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	118	4	replace
599	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(minRatio,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(minRatio,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	118	4	replace
600	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  minRatio    =    ratio    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	108	1	replace
601	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  minRatio    =    ratio    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	108	1	replace
602	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    minRatio  =  i;  minRatio  =  i;  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        minRatio    =    i;    minRatio  =  i;  minRatio  =  i;	  	compilable	  [FE]  AssertionError  	96	1	add
603	[BUG]  [BUGGY]  minRatio    =    i;    minRatio  =  i;  minRatio  =  i;  minRatio  =  i;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    minRatio  =  i;  minRatio  =  i;  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        minRatio    =    i;    minRatio  =  i;  minRatio  =  i;	  	compilable	  [FE]  AssertionError  	96	1	add
604	[BUG]  [BUGGY]  minRatio    =    i;    minRatio  =  i;  int  minRatio  =  i;  minRatio  =  i;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    minRatio  =  i;  int  minRatio  =  i;  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        minRatio    =    i;    int  minRatio  =  i;  minRatio  =  i;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	96	None	add
605	[BUG]  [BUGGY]  minRatio    =    i;    minRatio  =  i;  maxRatio  =  i;  minRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    minRatio  =  i;  maxRatio  =  i;  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        minRatio    =    i;    maxRatio  =  i;  minRatio  =  i;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	96	None	add
606	[BUG]  [BUGGY]  minRatio    =    i;    minRatio  =  i;  minRatio  =  i;  maxRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    minRatio  =  i;  minRatio  =  i;  maxRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        minRatio    =    i;    minRatio  =  i;  maxRatio  =  i;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	96	None	add
607	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	139	1	add
608	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	139	1	add
609	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	139	None	add
610	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	139	1	add
611	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	139	1	add
612	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	139	None	add
613	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  }	  	compilable	  [FE]  AssertionError  	139	1	add
614	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    else    {    minRatioPos    =    i;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatioPos  =  i;  }  }	  	compilable	  [FE]  AssertionError  	139	1	add
615	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    2;    minRatio  =  ratio  +  2;	  	compilable	  [FE]  AssertionError  	7	1	add
616	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  2;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    2;    minRatio  =  ratio  +  2;	  	compilable	  [FE]  AssertionError  	7	1	add
617	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
618	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
619	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
620	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  2;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	14	add
622	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	14	add
623	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
624	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  2;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  +  2;  if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    2;    if(  ratio  +  2  <  minRatio)  {  minRatio  =  ratio  +  2;  }  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	7	1	add
625	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	48	1	add
626	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	48	1	add
627	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  maxRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [CE]  cannot  find  symbol  maxRatio  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  maxRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    maxRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	48	None	add
628	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    int  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	48	None	add
629	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    minRatio  =  ratio  +  2;  minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	48	1	add
630	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  2;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    minRatio  =  ratio  +  2;  minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	48	1	add
631	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
632	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
633	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
634	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
635	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
636	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
637	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
638	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatioPos  =  i;  }	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	51	4	replace
639	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
640	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	172	2	replace
641	[BUG]  [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;  if(ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  minRatio    =    ratio    -    1;    if(    ratio    >    0)    {    minRatio    =    ratio    -    1;    }    	compilable	  [FE]  NoFeasibleSolutionException  	172	2	replace
642	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
643	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
644	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
645	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
646	[BUG]  [BUGGY]  final  double  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFA  [CE]  ';'  expected  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  final  double  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFA  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	final  double  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFA	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	197	None	replace
647	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                    NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
648	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]                    NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    final    double    minValue    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	197	5	replace
649	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	113	None	add
650	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    Integer  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	113	None	add
651	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon));  [CE]  ';'  expected  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon));  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon));	  	non-compiled	[CE]  ';'  expected	113	None	add
652	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(rhs,  1,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(rhs,  1,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	113	None	add
653	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
654	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
655	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	75	None	add
656	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
657	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
658	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >>  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	75	None	add
659	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
660	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)!=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	75	1	add
661	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	63	None	replace
662	[BUG]  [BUGGY]  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  ratio  /  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    int    minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	146	None	replace
663	[BUG]  [BUGGY]  int  minRatio  =  ratio  *  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  ratio  *  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    int    minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	146	None	replace
664	[BUG]  [BUGGY]  int  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    int    minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	146	None	replace
665	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -(DEFAULT_EPSILON);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -(DEFAULT_EPSILON);	  minRatio    -=    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	126	1	replace
666	[BUG]  [BUGGY]  minRatio  =  ratio  -(DEFAULT_EPSILON);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -(DEFAULT_EPSILON);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -(DEFAULT_EPSILON);	  minRatio    -=    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	126	1	replace
667	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  +=  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  +=  DEFAULT_EPSILON;	  minRatio    -=    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	126	4	replace
668	[BUG]  [BUGGY]  minRatio  +=  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  +=  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  +=  DEFAULT_EPSILON;	  minRatio    -=    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	126	4	replace
669	[BUG]  [BUGGY]  minRatio  =  ratio  -(DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -(DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -(DEFAULT_EPSILON;	  minRatio    -=    DEFAULT_EPSILON;    	non-compiled	[CE]  ')'  expected	126	None	replace
670	[BUG]  [BUGGY]  double  ratio  =  entry.epsilon  /  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.epsilon  /  rhs.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.epsilon  /  rhs.doubleValue();	  double    ratio    =    entry    rhs    /    rhs.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	112	None	replace
671	[BUG]  [BUGGY]  double  ratio  =  entry.getValue()  /  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.getValue()  /  rhs.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.getValue()  /  rhs.doubleValue();	  double    ratio    =    entry    rhs    /    rhs.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	112	None	replace
672	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
673	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
674	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
675	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
676	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
677	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	5	replace
678	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                    NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	4	replace
679	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  NoFeasibleSolutionException  [FE]                    NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  <  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	179	4	replace
680	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	long  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	180	None	replace
681	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	180	None	replace
682	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	214	None	replace
683	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	214	None	replace
684	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  +  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  +  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs  +  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	214	None	replace
685	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	78	2	replace
686	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	compilable	  [FE]  NoFeasibleSolutionException  	78	2	replace
687	[BUG]  [BUGGY]  Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
688	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	34	None	replace
689	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	  double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	34	None	replace
690	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(rhs,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	104	None	replace
691	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  +  1;  minRatio  =  ratio  +  1;	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	55	1	replace
692	[BUG]  [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  +  1;  minRatio  =  ratio  +  1;	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	55	1	replace
693	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	55	13	replace
694	[BUG]  [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  minRatio    =    ratio    +    1;    minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	55	13	replace
695	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  rhs;	  double    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	37	None	replace
696	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  rhs;	  double    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon)/    entry;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	37	None	replace
697	[BUG]  [BUGGY]  minRatio  -=  entry.intValue;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  -=  entry.intValue;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  -=  entry.intValue;	  minRatio    -=    i;    	non-compiled	[CE]  double  cannot  be  dereferenced	67	None	replace
698	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -(i);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -(i);	  minRatio    -=    i;    	compilable	  [FE]  NoFeasibleSolutionException  	67	3	replace
699	[BUG]  [BUGGY]  minRatio  =  ratio  -(i);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -(i);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -(i);	  minRatio    -=    i;    	compilable	  [FE]  NoFeasibleSolutionException  	67	3	replace
700	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  epsilon    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	122	None	replace
701	[BUG]  [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  rhs  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	rhs  =  MathUtils.compareTo(entry,  0,  epsilon)>  0;	  epsilon    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	122	None	replace
702	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  2  +  1;	  minRatio    =    ratio    /    2;    	compilable	  [FE]  UnboundedSolutionException  	135	2	replace
703	[BUG]  [BUGGY]  minRatio  =  ratio  /  2  +  1;  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  2  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  2  +  1;	  minRatio    =    ratio    /    2;    	compilable	  [FE]  UnboundedSolutionException  	135	2	replace
704	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	79	1	add
705	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	79	1	add
706	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	79	None	add
707	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	79	1	add
708	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	79	1	add
709	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRat	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
710	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
711	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  /  DEFAULT_EPSILON;	  double    ratio    =    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	161	None	replace
712	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  -  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.doubleValue()  -  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  -  1;	  double    ratio    =    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	161	None	replace
713	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  +  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.doubleValue()  +  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  +  1;	  double    ratio    =    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	161	None	replace
714	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	119	None	add
715	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	119	None	add
716	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    int  minValue  =  MathUtils.compareTo(entry,  1,  rhs);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	119	None	add
717	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
718	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
719	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
720	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
721	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
722	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	compilable	  [FE]  NoFeasibleSolutionException  	120	4	replace
723	[BUG]  [BUGGY]  Ratio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Ratio  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol  Ratio	178	None	replace
724	[BUG]  [BUGGY]  Ratio  ratio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  ratio  =  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  ratio  =  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    if(minRatio    =    DEFAULT_EPSILON)    {    minRatio    =    DEFAULT_EPSILON;    }    else    {    minRatio    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
725	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio  -  1);	  int    minRatioPos    =    MathUtils.compareTo(entry,    0,    ratio);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	83	None	replace
726	[BUG]  [BUGGY]  minRatio  =  0;  int  minRatio  =  0;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  0;  int  minRatio  =  0;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;  int  minRatio  =  0;	  minRatio    =    DEFAULT_EPSILON;    int    minRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	89	None	replace
727	[BUG]  [BUGGY]  int  minRatio  =  0;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  0;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  0;	  minRatio    =    DEFAULT_EPSILON;    int    minRatio    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	89	None	replace
728	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON  +  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON  +  1;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON  +  1;	  int    ratio    =    MathUtils.compareTo(entry,    0,    entry.epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	187	None	replace
729	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.value)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.value)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  entry.value)/  DEFAULT_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    entry.epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	187	None	replace
730	[BUG]  [BUGGY]  if(RatioUtils.isEmpty(rhs))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  cannot  find  symbol  RatioUtils  [FE]    NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(RatioUtils.isEmpty(rhs))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(RatioUtils.isEmpty(rhs))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol  RatioUtils	17	None	replace
731	[BUG]  [BUGGY]  if(RatioUtils.isEmpty(entry))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  cannot  find  symbol  RatioUtils  [FE]      NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(RatioUtils.isEmpty(entry))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(RatioUtils.isEmpty(entry))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol  RatioUtils	17	None	replace
732	[BUG]  [BUGGY]  if(RatioUtils.compareTo(rhs,  0,  col))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  cannot  find  symbol  RatioUtils  [FE]        NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(RatioUtils.compareTo(rhs,  0,  col))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(RatioUtils.compareTo(rhs,  0,  col))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol  RatioUtils	17	None	replace
733	[BUG]  [BUGGY]  if(RatioUtils.compareTo(entry,  DEFAULT_EPSILON))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [CE]  cannot  find  symbol  RatioUtils  [FE]          NullPointerException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(RatioUtils.compareTo(entry,  DEFAULT_EPSILON))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(RatioUtils.compareTo(entry,  DEFAULT_EPSILON))  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  minRatio    =    ratio    -    1;    if(    ratio    -    1    <    minRatioPos)    {    minRatio    =    ratio    -    1;    }    else    {    minRatioPos    =    i;    }    	non-compiled	[CE]  cannot  find  symbol  RatioUtils	17	None	replace
734	[BUG]  [BUGGY]  int  minRatio  =  ratio  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    int    minRatio    =    ratio    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	173	None	replace
735	[BUG]  [BUGGY]  int  minRatio  =  rhs  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  minRatio  =  rhs  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatio  =  rhs  -  1;	  minRatio    =    ratio    -    1;    int    minRatio    =    ratio    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	173	None	replace
736	[BUG]  [BUGGY]  Integer  minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Integer  minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;	  minRatio    =    ratio    -    1;    int    minRatio    =    ratio    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	173	None	replace
737	[BUG]  [BUGGY]  Ratio  minRatio  =  ratio  +  1;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Ratio  minRatio  =  ratio  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Ratio  minRatio  =  ratio  +  1;	  minRatio    =    ratio    +    1;    if(    ratio    <    minRatio)    {    minRatio    =    ratio    +    1;    }    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
738	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  minRatio  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i    -    1;    minRatio  =  i  -  1;	  	compilable	  [FE]  AssertionError  	94	1	add
739	[BUG]  [BUGGY]  minRatio  =  i  -  1;  minRatio  =  i  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  minRatio  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i    -    1;    minRatio  =  i  -  1;	  	compilable	  [FE]  AssertionError  	94	1	add
740	[BUG]  [BUGGY]  minRatio  =  i  -  1;  int  minRatio  =  i  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  int  minRatio  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i    -    1;    int  minRatio  =  i  -  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	94	None	add
741	[BUG]  [BUGGY]  minRatio  =  i  -  1;  maxRatio  =  i  -  1;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  maxRatio  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i    -    1;    maxRatio  =  i  -  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	94	None	add
742	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  i  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i    -    1;    i  =  i  -  1;	  	compilable	  [FE]  NoFeasibleSolutionException  	94	12	add
743	[BUG]  [BUGGY]  minRatio  =  i  -  1;  i  =  i  -  1;  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  i  -  1;  i  =  i  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i    -    1;    i  =  i  -  1;	  	compilable	  [FE]  NoFeasibleSolutionException  	94	12	add
744	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minValue);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minValue);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minValue);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
745	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minRatio);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minRatio);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon,  minRatio);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
746	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);	  int    ratio    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
747	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio  =  ratio  +  1;  minRatioPos  =  i;	  	compilable	  [FE]  NoFeasibleSolutionException  	54	13	add
748	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio  =  ratio  +  1;  minRatioPos  =  i;	  	compilable	  [FE]  NoFeasibleSolutionException  	54	13	add
749	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	compilable	  [FE]  UnboundedSolutionException  	54	13	add
750	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [FE]  UnboundedSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	compilable	  [FE]  UnboundedSolutionException  	54	13	add
751	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e  [CE]  ')'  expected  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e	  	non-compiled	[CE]  ')'  expected	54	None	add
752	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
753	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e  [CE]  ')'  expected  [FE]            NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        minRatio    =    ratio    +    1;    }    else    if(MathUtils.compareTo(entry,    0,    epsilon)    >=    0)    {    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  +  1;  minRatioPos  =  i;  }  else  if(MathUtils.compareTo(entry,  0,  e	  	non-compiled	[CE]  ')'  expected	54	None	add
754	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	141	1	add
755	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	141	1	add
756	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    int  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	141	None	add
757	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	141	1	add
758	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	141	1	add
759	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    Integer  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	141	None	add
760	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	141	1	add
761	[BUG]  [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  2;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  2;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        +        1;        if(    ratio    +    1    <    minRatio)    {    minRatio    =    ratio    +    1;    }    minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  2;  }	  	compilable	  [FE]  AssertionError  	141	1	add
762	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	  	compilable	  [FE]  AssertionError  	132	1	add
763	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	  	compilable	  [FE]  AssertionError  	132	1	add
764	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  maxRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  find  symbol  maxRatio  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  maxRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    maxRatio  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	132	None	add
765	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  rhs  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  rhs  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    MathUtils.compareTo(entry,    0,    rhs);    rhs  =  MathUtils.compareTo(entry,  0,  rhs);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	132	None	add
766	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  minRatio  =  ratio  -  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    3;    minRatio  =  ratio  -  3;	  	compilable	  [FE]  AssertionError  	158	1	add
767	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  minRatio  =  ratio  -  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  minRatio  =  ratio  -  3;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    3;    minRatio  =  ratio  -  3;	  	compilable	  [FE]  AssertionError  	158	1	add
768	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	158	1	add
769	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	158	1	add
770	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	158	14	add
771	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	158	14	add
772	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }	  	compilable	  [FE]  NullPointerException  	158	14	add
773	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatioPos)  {  minRatio  =  ratio  -  3;  }	  	compilable	  [FE]  NullPointerException  	158	14	add
774	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }	  	compilable	  [FE]  AssertionError  	158	1	add
775	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  3;  if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    3;    if(  ratio  -  3  <  minRatio)  {  minRatio  =  ratio  -  3;  }	  	compilable	  [FE]  AssertionError  	158	1	add
776	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	203	1	add
777	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	203	1	add
778	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    int  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	203	None	add
779	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	203	1	add
780	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	203	1	add
781	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    Integer  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	203	None	add
782	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        if(    ratio    >    epsilon)    {    minRatio    =    ratio    -    1;    }    =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	203	None	add
783	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  epsilon  +  1;  minRatio  =  epsilon  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    epsilon    +    1;    minRatio  =  epsilon  +  1;	  	compilable	  [FE]  AssertionError  	156	1	add
784	[BUG]  [BUGGY]  minRatio  =  epsilon  +  1;  minRatio  =  epsilon  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  epsilon  +  1;  minRatio  =  epsilon  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon    +    1;    minRatio  =  epsilon  +  1;	  	compilable	  [FE]  AssertionError  	156	1	add
785	[BUG]  [BUGGY]  minRatio  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon    +    1;    epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	156	None	add
786	[BUG]  [BUGGY]  minRatio  =  epsilon  +  1;  int  minRatio  =  epsilon  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  epsilon  +  1;  int  minRatio  =  epsilon  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon    +    1;    int  minRatio  =  epsilon  +  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	156	None	add
787	[BUG]  [BUGGY]  minRatio  =  epsilon  +  1;  maxRatio  =  epsilon  +  1;  [CE]  cannot  find  symbol  maxRatio  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  epsilon  +  1;  maxRatio  =  epsilon  +  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon    +    1;    maxRatio  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	156	None	add
788	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
789	[BUG]  [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	+=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
790	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  }	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
791	[BUG]  [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  minRatio    =    i;    minRatio    =    i;    +=    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
792	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry,  epsilon.getValue();  [CE]  ';'  expected  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry,  epsilon.getValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry,  epsilon.getValue();	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    entry.getValue();    	non-compiled	[CE]  ';'  expected	109	None	replace
793	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  +  entry.getValue();  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON  +  entry.getValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  *  DEFAULT_EPSILON  +  entry.getValue();	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
794	[BUG]  [BUGGY]  minRatio  =  entry  /  DEFAULT_EPSILON  +  ratio.getValue();  [CE]  double  cannot  be  dereferenced  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  entry  /  DEFAULT_EPSILON  +  ratio.getValue();  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  entry  /  DEFAULT_EPSILON  +  ratio.getValue();	  minRatio    =    ratio    /    DEFAULT_EPSILON    +    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
795	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  *  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  entry.doubleValue()  *  rhs.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  *  rhs.doubleValue();	  double    ratio    =    entry.doubleValue()    /    rhs.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	110	None	replace
796	[BUG]  [BUGGY]  double  ratio  =  rhs.doubleValue()  /  entry.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  double  ratio  =  rhs.doubleValue()  /  entry.doubleValue();  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  rhs.doubleValue()  /  entry.doubleValue();	  double    ratio    =    entry.doubleValue()    /    rhs.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	110	None	replace
797	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	60	None	add
798	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	60	None	add
799	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	60	None	add
800	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	60	None	add
801	[BUG]  [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio);  maxRatio  =  Math.min(minimumRatio,  ratio);  [CE]  cannot  find  symbol  minimumRatio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio);  maxRatio  =  Math.min(minimumRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimumRatio,  ratio);  maxRatio  =  Math.min(minimumRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    maxRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimumRatio	25	None	replace
802	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(maxRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(maxRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(maxRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    maxRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  maxRatio	25	None	replace
803	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(miniRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(miniRatio,  ratio);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(miniRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    maxRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  maxRatio	25	None	replace
804	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        ratio        -        1;        minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;	  	compilable	  [FE]  AssertionError  	12	1	add
805	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;	  	compilable	  [FE]  AssertionError  	12	1	add
806	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        minRatio    =    ratio    -    1;    int  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	12	None	add
807	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  maxRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  maxRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        minRatio    =    ratio    -    1;    maxRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	12	None	add
808	[BUG]  [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  -  1;  minRatio  =  ratio  -  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;  minRatio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        -        1;        minRatio    =    ratio    -    1;    minRatio  -  1;  minRatio  =  ratio  -  1;	  	non-compiled	[CE]  not  a  statement	12	None	add
809	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
810	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defult_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defult_EPSILON;  [BUGGY]      minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  defult_EPSILON;	  int    ratio    =    MathUtils.compareTo(entry,    0,    rhs)/    epsilon;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
811	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  minRatio  =  ratio  -  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    DEFAULT_EPSILON;    minRatio  =  ratio  -  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	136	1	add
812	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  minRatio  =  ratio  -  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  minRatio  =  ratio  -  DEFAULT_EPSILON;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    DEFAULT_EPSILON;    minRatio  =  ratio  -  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	136	1	add
813	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    DEFAULT_EPSILON;    if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  incompatible  types	136	None	add
814	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    DEFAULT_EPSILON;    if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	136	None	add
815	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    DEFAULT_EPSILON;    if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col;  }	  	non-compiled	[CE]  incompatible  types	136	None	add
816	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col  +  1;  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    DEFAULT_EPSILON;    if(  ratio  -  DEFAULT_EPSILON)  {  minRatio  =  ratio  -  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  col  +  1;  }	  	non-compiled	[CE]  incompatible  types	136	None	add
817	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  minRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.min(minRatio,    ratio    -    1);    minRatio  =  Math.min(minRatio,  ratio  -  1);	  	compilable	  [FE]  AssertionError  	41	1	add
818	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  minRatio  =  Math.min(minRatio,  ratio  -  1);  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  minRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    -    1);    minRatio  =  Math.min(minRatio,  ratio  -  1);	  	compilable	  [FE]  AssertionError  	41	1	add
819	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  minRatio  =  Math.min(minRatio,  ratio  -  1));  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  minRatio  =  Math.min(minRatio,  ratio  -  1));  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    -    1);    minRatio  =  Math.min(minRatio,  ratio  -  1));	  	non-compiled	[CE]  ';'  expected	41	None	add
820	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  int  minRatio  =  Math.min(minRatio,  ratio  -  1);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  int  minRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    -    1);    int  minRatio  =  Math.min(minRatio,  ratio  -  1);	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	41	None	add
821	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  maxRatio  =  Math.min(minRatio,  ratio  -  1);  [CE]  cannot  find  symbol  maxRatio  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  maxRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio    -    1);    maxRatio  =  Math.min(minRatio,  ratio  -  1);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	41	None	add
822	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  epsilon;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        epsilon;        minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	68	1	add
823	[BUG]  [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  epsilon;  minRatio  =  epsilon;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  epsilon;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        epsilon;        minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	68	1	add
824	[BUG]  [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  epsilon  =  epsilon;  minRatio  =  epsilon;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  epsilon  =  epsilon;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        epsilon;        minRatio    =    epsilon;    epsilon  =  epsilon;  minRatio  =  epsilon;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	68	None	add
825	[BUG]  [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  maxRatio  =  epsilon;  minRatio  =  epsilon;  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  maxRatio  =  epsilon;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        epsilon;        minRatio    =    epsilon;    maxRatio  =  epsilon;  minRatio  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	68	None	add
826	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  rhs;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        epsilon;        minRatio    =    epsilon;    minRatio  =  rhs;  minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	68	1	add
827	[BUG]  [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  rhs;  minRatio  =  epsilon;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    epsilon;    minRatio  =  epsilon;  minRatio  =  rhs;  minRatio  =  epsilon;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        epsilon;        minRatio    =    epsilon;    minRatio  =  rhs;  minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	68	1	add
828	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	163	1	add
829	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	163	1	add
830	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	163	1	add
831	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	163	1	add
832	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  int  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    int  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	163	None	add
833	[BUG]  [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        i;        if(minRatio    <    epsilon)    {    minRatio    =    i;    }    minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
834	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    int  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minR	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
835	[BUG]  [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minR  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minR  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio        =        ratio        /        DEFAULT_EPSILON;        if(MathUtils.compareTo(entry,    0,    epsilon)    ==    0)    {    minRatio    =    ratio    /    DEFAULT_EPSILON;    }    else    {    minRatioPos    =    i;    }    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minR	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
836	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
837	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {      [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }  [BUGGY]      minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON    +    1;    if(MathUtils.compareTo(minRatio,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  }	  	compilable	  [FE]  AssertionError  	105	1	add
