bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
61	[BUG] [BUGGY] minRatio = ratio; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { [BUGGY] minRatio = ratio; [BUGGY] minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { [BUGGY] [BUGGY] minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	
