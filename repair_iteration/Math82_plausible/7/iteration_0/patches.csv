bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth();  i++)  {  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth();  i++)  {	for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  tableau.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  tableau.getWidth();  i++)  {  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  tableau.getWidth();  i++)  {	for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getWidth();  i++)  {  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  table.getWidth();  i++)  {	for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	  	for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  		non-compiled	[CE]  <identifier>  expected	14	None	add
6	[BUG]  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false		non-compiled	[CE]  <identifier>  expected	14	None	add
7	[BUG]  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }		non-compiled	[CE]  <identifier>  expected	14	None	add
8	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getHeight();  i++)  {  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getHeight();  i++)  {	for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  	non-compiled	[CE]  <identifier>  expected	13	None	replace
9	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();		non-compiled	[CE]  <identifier>  expected	14	None	add
10	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();		non-compiled	[CE]  <identifier>  expected	14	None	add
11	[BUG]  [BUGGY]    SimplexTableau  epsilon  =  tableau.getOptimalValue();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =  tableau.getOptimalValue();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =  tableau.getOptimalValue();		non-compiled	[CE]  <identifier>  expected	14	None	add
12	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();		non-compiled	[CE]  <identifier>  expected	14	None	add
13	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();		non-compiled	[CE]  <identifier>  expected	14	None	add
14	[BUG]  [BUGGY]    int  epsilon  =  tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    int  epsilon  =  tableau.getEpsilon();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    int  epsilon  =  tableau.getEpsilon();		non-compiled	[CE]  <identifier>  expected	14	None	add
15	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();		non-compiled	[CE]  <identifier>  expected	14	None	add
16	[BUG]  [BUGGY]    int  epsilon  =  TableUtils.getEpsilonIndex(tableau);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  [BUGGY]    int  epsilon  =  TableUtils.getEpsilonIndex(tableau);  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	    int  epsilon  =  TableUtils.getEpsilonIndex(tableau);		non-compiled	[CE]  <identifier>  expected	14	None	add
