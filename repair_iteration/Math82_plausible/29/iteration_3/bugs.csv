bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;	  long    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	35	None	replace
2	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  /  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  /  1;	  Integer    minValue    =    entry.getValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
3	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  *  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  *  1;	  Integer    minValue    =    entry.getValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
4	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    entry;    static    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
5	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  *  entry.epsilon;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  *  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  *  entry.epsilon;	  final    double    ratio    =    rhs    *    entry;    static    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
6	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  *  entry;  [CE]  illegal  start  of  expression  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  *  entry;	  final    double    ratio    =    rhs    *    entry;    static    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
7	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  *  entry.getValue();  [CE]  illegal  start  of  expression  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  *  entry.getValue();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  *  entry.getValue();	  final    double    ratio    =    rhs    *    entry;    static    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
8	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Entry  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(Entry,  0,  rhs)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  Entry	99	None	replace
9	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Entry  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  Entry	99	None	replace
10	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Entry  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  Entry	99	None	replace
11	[BUG]  [BUGGY]  final  double  ratio  =  epsilon.rhs  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon.rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    entries.rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	124	None	replace
12	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  /  1;	  Integer    minRatioPos    =    entry.getValue()    +    1;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	24	None	replace
13	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	122	None	replace
14	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  col);  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  col);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	122	None	replace
15	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	122	None	replace
16	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  incompatible  types	122	None	replace
17	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs,  epsilon);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	50	None	replace
18	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	50	None	replace
19	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	50	None	replace
20	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue,  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue,  epsilon);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
21	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  +  1;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
22	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  2;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  2;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  2;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
23	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  3;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  3;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  3;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
24	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
25	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  col);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
26	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  0,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
27	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.minValue);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
28	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	87	None	replace
29	[BUG]  [BUGGY]  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	81	None	replace
30	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	81	None	replace
31	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	add
32	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  Final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  Final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    Final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	5	None	add
33	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  /  DEFAULT_EPSilON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  /  DEFAULT_EPSilON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    final  double  ratio  =  entry  /  DEFAULT_EPSilON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	add
34	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    final  double  ratio  =  entry  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	add
35	[BUG]  [BUGGY]  static  final  double  ratio  =  entry  /  rhs;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry  /  rhs;	  final    double    ratio    =    entry    /    rhs;    static    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
36	[BUG]  [BUGGY]  static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    static    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
37	[BUG]  [BUGGY]  static  final  double  ratio  =  entry  *  rhs;  [CE]  illegal  start  of  expression  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry  *  rhs;	  final    double    ratio    =    entry    /    rhs;    static    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
38	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  /  entry;  [CE]  illegal  start  of  expression  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  /  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  /  entry;	  final    double    ratio    =    entry    /    rhs;    static    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
39	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry.getValue();  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  entry.getValue();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  entry.getValue();	  final    double    ratio    =    rhs    *    entry;    final    double    ratio    =    rhs    *    Entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	61	None	replace
40	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  Entry;  [CE]  cannot  find  symbol  Entry  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  Entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  Entry;	  final    double    ratio    =    rhs    *    entry;    final    double    ratio    =    rhs    *    Entry;    	non-compiled	[CE]  cannot  find  symbol  Entry	61	None	replace
41	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	31	None	replace
42	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  *  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  epsilon;	  final    double    ratio    =    entry.rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
43	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  entry.rhs;	  final    double    ratio    =    entry.rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
44	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  MAX_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  *  MAX_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  MAX_EPSILON;	  final    double    ratio    =    entry.rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
45	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  defsilon;  [CE]  cannot  find  symbol  defsilon  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  defsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  defsilon;	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  cannot  find  symbol  defsilon	66	None	replace
46	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	1	None	replace
47	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	1	None	replace
48	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	1	None	replace
49	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	1	None	replace
50	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue  *  rhs;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue  *  rhs;	  final    double    ratio    =    entry    rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	105	None	replace
51	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  *  rhs;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  *  rhs;	  final    double    ratio    =    entry    rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	105	None	replace
52	[BUG]  [BUGGY]  Integer  minRatio  =  rhs.doubleValue();  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  rhs.doubleValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  rhs.doubleValue();	  Integer    minRatio    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	22	None	replace
53	[BUG]  [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  /  DEFAULT_EPSILON;	  Integer    minRatio    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	22	None	replace
54	[BUG]  [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  DEFAULT_EPSILON.doubleValue()  +  1;	  Integer    minRatio    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	22	None	replace
55	[BUG]  [BUGGY]  Integer  rhs  =  entry.getRow();  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getRow();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getRow();	  Integer    rhs    =    entry.getKey();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	94	None	replace
56	[BUG]  [BUGGY]  Integer  rhs  =  entry.getKey()  +  1;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getKey()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getKey()  +  1;	  Integer    rhs    =    entry.getKey();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	94	None	replace
57	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	  float    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	73	None	replace
58	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  float    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  incompatible  types	73	None	replace
59	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON)-  1;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs)-    1;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	71	None	replace
60	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  1;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  1;	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	71	None	replace
61	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  *  1;	  Integer    minRatioPos    =    entry.getValue()    -    1;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	26	None	replace
62	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	95	None	replace
63	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	95	None	replace
64	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  *  epsilon;	  final    double    ratio    =    entry    rhs    *    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	14	8	replace
65	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  epsilon;  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  *  epsilon;	  final    double    ratio    =    entry    rhs    *    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	14	8	replace
66	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  *  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  *  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  *  epsilon;	  final    double    ratio    =    entry    rhs    *    epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
67	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  /  1;	  Integer    minRatio    =    entry.doubleValue()    +    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	21	None	replace
68	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  *  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  *  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  *  1;	  Integer    minRatio    =    entry.doubleValue()    +    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	21	None	replace
69	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  -  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  -  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  -  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  final    double    ratio    =    DEFAULT_EPSILON    /    entry.rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	104	None	replace
70	[BUG]  [BUGGY]  Integer  minValue  =  rhs.getValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  rhs.getValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  rhs.getValue();	  Integer    minValue    =    table.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
71	[BUG]  [BUGGY]  last  double  ratio  =  entry  /  rhs;  [CE]  not  a  statement  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry  /  rhs;	  final    double    ratio    =    entry    /    rhs;    last    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	126	None	replace
72	[BUG]  [BUGGY]  last  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    last    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	126	None	replace
73	[BUG]  [BUGGY]  last  double  ratio  =  entry  *  rhs;  [CE]  not  a  statement  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry  *  rhs;	  final    double    ratio    =    entry    /    rhs;    last    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	126	None	replace
74	[BUG]  [BUGGY]  last  double  ratio  =  entry.rhs  /  rhs;  [CE]  not  a  statement  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry.rhs  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry.rhs  /  rhs;	  final    double    ratio    =    entry    /    rhs;    last    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	126	None	replace
75	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  *  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  *  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.doubleValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	replace
76	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON  +  1;	  Integer    minRatio    =    entry.doubleValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	replace
77	[BUG]  [BUGGY]  Integer  minRatio  =  rhs.doubleValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  rhs.doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  rhs.doubleValue()  /  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.doubleValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	replace
78	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	12	8	replace
79	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	12	8	replace
80	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
81	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
82	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  col;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  /  col;	  Integer    minRatioPos    =    entry.getValue()    -    col;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	27	None	replace
83	[BUG]  [BUGGY]  Integer  minRatioPos  =  col.getValue()  -  entry;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  col.getValue()  -  entry;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  col.getValue()  -  entry;	  Integer    minRatioPos    =    entry.getValue()    -    col;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	27	None	replace
84	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  col  +  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  col  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  -  col  +  1;	  Integer    minRatioPos    =    entry.getValue()    -    col;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	27	None	replace
85	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  *  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	42	None	replace
86	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;	  Integer    minRatio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	42	None	replace
87	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  /  rhs;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getValue()  /  rhs;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  /  rhs;	  Integer    minRatio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	42	None	replace
88	[BUG]  [BUGGY]  final  double  ratio  =  rhs.length  /  entry.length;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.length  /  entry.length;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.length  /  entry.length;	  final    double    ratio    =    entry.length    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
89	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  /  rhs,  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  /  rhs,  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  /  rhs,  epsilon;	  final    double    ratio    =    entry.length    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
90	[BUG]  [BUGGY]  final  double  ratio  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.getValue()  *  DEFAULT_EPSILON;	  final    double    ratio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
91	[BUG]  [BUGGY]  final  double  ratio  =  entry.getValue()  /  rhs;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.getValue()  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.getValue()  /  rhs;	  final    double    ratio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
92	[BUG]  [BUGGY]  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON  +  rhs;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON  +  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON  +  rhs;	  final    double    ratio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
93	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	63	None	replace
94	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	63	None	replace
95	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  /  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getValue()  /  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  /  1;	  Integer    minRatio    =    entry.getValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	43	None	replace
96	[BUG]  [BUGGY]  final  double  ratio  =  entry.epsilon  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.epsilon  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.epsilon  *  DEFAULT_EPSILON;	  final    double    ratio    =    DEFAULT_EPSILON    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
97	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue()  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue()  *  DEFAULT_EPSILON;	  final    double    ratio    =    DEFAULT_EPSILON    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
98	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	112	None	replace
99	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	112	None	replace
100	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	112	None	replace
101	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  incompatible  types	112	None	replace
102	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  long    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	2	None	replace
103	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon));    	non-compiled	[CE]  ';'  expected	65	None	replace
104	[BUG]  [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon));    	non-compiled	[CE]  ';'  expected	65	None	replace
105	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs));	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon));    	non-compiled	[CE]  ';'  expected	65	None	replace
106	[BUG]  [BUGGY]  final  double  ratio  =  entries.rhs  /  rhs;  [CE]  cannot  find  symbol  entries  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entries.rhs  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entries.rhs  /  rhs;	  final    double    ratio    =    rhs.rhs    /    entry.rhs;    	non-compiled	[CE]  cannot  find  symbol  entries	106	None	replace
107	[BUG]  [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.rhs  /  entry.epsilon;	  final    double    ratio    =    rhs.rhs    /    entry.rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	106	None	replace
108	[BUG]  [BUGGY]  Integer  minValue  =  entries[epsilon.getValue();  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entries[epsilon.getValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entries[epsilon.getValue();	  Integer    minValue    =    epsilon.getValue();    	non-compiled	[CE]  ']'  expected	107	None	replace
109	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  epsilon  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.epsilon    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	8	7	replace
110	[BUG]  [BUGGY]  final  double  ratio  =  epsilon  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.epsilon    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	8	7	replace
111	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  /  entry.epsilon;	  final    double    ratio    =    entry.epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
112	[BUG]  [BUGGY]  final  double  ratio  =  entry  rhs  /  epsilon.rhs;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  rhs  /  epsilon.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  rhs  /  epsilon.rhs;	  final    double    ratio    =    rhs    /    entry.rhs;    	non-compiled	[CE]  ';'  expected	57	None	replace
113	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;	  Integer    rhs    =    entry.getValue()    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	116	None	replace
114	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  col;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  col;	  Integer    rhs    =    entry.getValue()    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	116	None	replace
115	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	79	None	replace
116	[BUG]  [BUGGY]  final  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPS  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPS  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPS	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	79	None	replace
117	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON  +  rhs;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON  +  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON  +  rhs;	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
118	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON,  rhs);  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON,  rhs);	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	111	None	replace
119	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.doubleValue;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  /  entry.doubleValue;	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
120	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    final  double  ratio  =  DEFAULT_EPSILON  *  rhs;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	100	None	add
121	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSILON  *  rhs);  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSILON  *  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    final  double  ratio  =  DEFAULT_EPSILON  *  rhs);	  	non-compiled	[CE]  ';'  expected	100	None	add
122	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  Final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [CE]  not  a  statement  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  Final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    Final  double  ratio  =  DEFAULT_EPSILON  *  rhs;	  	non-compiled	[CE]  not  a  statement	100	None	add
123	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSilON  *  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  final  double  ratio  =  DEFAULT_EPSilON  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    final  double  ratio  =  DEFAULT_EPSilON  *  rhs;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	100	None	add
124	[BUG]  [BUGGY]  static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static    final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
125	[BUG]  [BUGGY]  static  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static    final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
126	[BUG]  [BUGGY]  static  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static    final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
127	[BUG]  [BUGGY]  static  final  double  ratio  =  entry.getRowValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry.getRowValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry.getRowValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static    final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
128	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  final  double  ratio  =  entry  *  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs;  final  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    *    rhs;    final  double  ratio  =  entry  *  rhs;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	9	None	add
129	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  Final  double  ratio  =  entry  *  rhs;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs;  Final  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    *    rhs;    Final  double  ratio  =  entry  *  rhs;	  	non-compiled	[CE]  not  a  statement	9	None	add
130	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  final  double  ratio  =  entry  *  rhs);  [CE]  ';'  expected  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs;  final  double  ratio  =  entry  *  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    *    rhs;    final  double  ratio  =  entry  *  rhs);	  	non-compiled	[CE]  ';'  expected	9	None	add
131	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  static  final  double  ratio  =  entry  *  rhs;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs;  static  final  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    *    rhs;    static  final  double  ratio  =  entry  *  rhs;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
132	[BUG]  [BUGGY]  final  double  ratio  =  entry.getValue()  *  rhs;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.getValue()  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.getValue()  *  rhs;	  final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
133	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.minValue);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.minValue);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.minValue);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
134	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
135	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.intValue);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.intValue);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.intValue);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
136	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  1;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  *  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  1;	  Integer    rhs    =    entry.getValue()    +    1;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	38	None	replace
137	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  +  2;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  +  2;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  +  2;	  Integer    rhs    =    entry.getValue()    +    1;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	38	None	replace
138	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
139	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.rhs  *  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.rhs  *  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON.rhs  *  entry.rhs;	  final    double    ratio    =    entry.rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
140	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  *  rhs  +  1;	  final    double    ratio    =    entry    *    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	10	8	replace
141	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs  +  1;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  *  rhs  +  1;	  final    double    ratio    =    entry    *    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	10	8	replace
142	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	98	None	replace
143	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	98	None	replace
144	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  incompatible  types	98	None	replace
145	[BUG]  [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.epsilon  /  entry.epsilon;	  final    double    ratio    =    entry.epsilon    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
146	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  /  entry.epsilon;	  final    double    ratio    =    entry.epsilon    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
147	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  epsilon;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  epsilon;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.length)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
148	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.length)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
149	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  entry.epsilon;	  final    double    ratio    =    rhs    *    entry;    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
150	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  rhs,  0,  epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
151	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  0,  epsilon)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  0,  epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON,  0,  epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
152	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  minValue)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  minValue)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon,  minValue)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
153	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.length)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	54	None	replace
154	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final    Double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	78	6	replace
155	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final    Double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	78	6	replace
156	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final    Double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	78	6	replace
157	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final    Double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	78	6	replace
158	[BUG]  [BUGGY]  final  Double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final    Double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
159	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	114	None	replace
160	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	114	None	replace
161	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  DEFAULT_EPSILON);	  int    minValue    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ratio	121	None	replace
162	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	36	None	replace
163	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	36	None	replace
164	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	36	None	replace
165	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  *  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
166	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
167	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON,  col;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON,  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON,  col;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
168	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
169	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
170	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
171	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
172	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    col)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	55	None	replace
173	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  col);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  col);	  int    minValue    =    MathUtils.compareTo(entry,    0,    col);    	non-compiled	[CE]  cannot  find  symbol  ratio	48	None	replace
174	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(col,  0,  entry);  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(col,  0,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(col,  0,  entry);	  int    minValue    =    MathUtils.compareTo(entry,    0,    col);    	non-compiled	[CE]  cannot  find  symbol  ratio	48	None	replace
175	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col)-  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	70	None	replace
176	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	70	None	replace
177	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)-  1;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)-    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	70	None	replace
178	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  incompatible  types	17	None	replace
179	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  1;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  incompatible  types	17	None	replace
180	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  incompatible  types	17	None	replace
181	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
182	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs,  epsilon);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
183	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
184	[BUG]  [BUGGY]  Final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  not  a  statement	80	None	replace
185	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	64	None	replace
186	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	64	None	replace
187	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	64	None	replace
188	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);  [CE]  cannot  find  symbol  ratio  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  col);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	64	None	replace
189	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  /  col;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  /  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  /  col;	  Integer    rhs    =    entry.getValue()    *    col;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	40	None	replace
190	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  col  +  1;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  *  col  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  col  +  1;	  Integer    rhs    =    entry.getValue()    *    col;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	40	None	replace
191	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  MAX_EPSILON;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  *  MAX_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  MAX_EPSILON;	  Integer    rhs    =    entry.getValue()    *    col;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	40	None	replace
192	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)>  0;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.epsilon)>    0;    	non-compiled	[CE]  double  cannot  be  dereferenced	115	None	replace
193	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.epsilon)>  0;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs.epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.epsilon)>    0;    	non-compiled	[CE]  double  cannot  be  dereferenced	115	None	replace
194	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)>  0;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    col)>    0;    	non-compiled	[CE]  incompatible  types	18	None	replace
195	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	  float    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	89	None	replace
196	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  float    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  incompatible  types	89	None	replace
197	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  rhs  /  epsilon;	  final    double    ratio    =    entry.rhs    /    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	58	6	replace
198	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  epsilon;  [FE]  NoFeasibleSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  /  epsilon;	  final    double    ratio    =    entry.rhs    /    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	58	6	replace
199	[BUG]  [BUGGY]  final  double  ratio  =  epsilon  /  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon  /  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon  /  entry.rhs;	  final    double    ratio    =    entry.rhs    /    epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
200	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON  +  1;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	53	None	replace
201	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	3	None	replace
202	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	3	None	replace
203	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
204	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	34	None	replace
205	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	34	None	replace
206	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	34	None	replace
207	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  cannot  find  symbol  Entry  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	91	None	replace
208	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  col);  [CE]  cannot  find  symbol  Entry  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  col);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	91	None	replace
209	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  rhs;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  rhs;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  rhs;	  Integer    minValue    =    entry.getValue(),    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	125	None	replace
210	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  epsilon;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON,  epsilon;	  Integer    minValue    =    entry.getValue(),    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	125	None	replace
211	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON  +  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON  +  1;	  Integer    minValue    =    entry.getValue(),    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	125	None	replace
212	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	  float    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	86	None	replace
213	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	  float    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  incompatible  types	86	None	replace
214	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON  +  rhs;  [CE]  double  cannot  be  dereferenced  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON  +  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  /  DEFAULT_EPSILON  +  rhs;	  final    double    ratio    =    entry.length    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
215	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON,  rhs);  [CE]  ';'  expected  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  /  DEFAULT_EPSILON,  rhs);	  final    double    ratio    =    entry.length    /    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	7	None	replace
216	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	52	None	replace
217	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	52	None	replace
218	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	52	None	replace
219	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)>  0;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  double  cannot  be  dereferenced	90	None	replace
220	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  epsilon;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    entry)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	88	None	replace
221	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
222	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  e  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  e  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  e	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1);    	non-compiled	[CE]  ')'  expected	113	None	replace
223	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    entry.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	123	None	replace
224	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length);	  int    minValue    =    MathUtils.compareTo(entry,    0,    entry.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	123	None	replace
225	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1,  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length  -  1,  epsilon);	  int    minValue    =    MathUtils.compareTo(entry,    0,    entry.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	123	None	replace
226	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col)-  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  col)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	51	None	replace
227	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(col,  0,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(col,  0,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(col,  0,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    col);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	30	None	replace
228	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  col);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  col);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    col);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	30	None	replace
229	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  find  symbol  ratio	47	None	replace
230	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  find  symbol  ratio	47	None	replace
231	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs  +  1);	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  cannot  find  symbol  ratio	47	None	replace
232	[BUG]  [BUGGY]  Integer  minRatio  =  rhs.doubleValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  rhs.doubleValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  rhs.doubleValue()  -  1;	  Integer    minRatio    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
233	[BUG]  [BUGGY]  Integer  minRatio  =  col.doubleValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  col.doubleValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  col.doubleValue()  -  1;	  Integer    minRatio    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
234	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)-  1;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	72	None	replace
235	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  1;  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    rhs)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	72	None	replace
236	[BUG]  [BUGGY]  final  double  ratio  =  rhs.rhs  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs.rhs    /    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	119	None	replace
237	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  /  rhs);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.rhs  /  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  /  rhs);	  final    double    ratio    =    rhs.rhs    /    entry;    	non-compiled	[CE]  ';'  expected	119	None	replace
238	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;	  Integer    rhs    =    entry.getValue()    +    col;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	39	None	replace
239	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	83	None	replace
240	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	83	None	replace
241	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	83	None	replace
242	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	83	None	replace
243	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	102	None	add
244	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  Final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  Final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    Final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  	non-compiled	[CE]  not  a  statement	102	None	add
245	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSilON  *  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSilON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    final  double  ratio  =  DEFAULT_EPSilON  *  entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	102	None	add
246	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  Entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  Entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    final  double  ratio  =  DEFAULT_EPSILON  *  Entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	102	None	add
247	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  *  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	replace
248	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  1;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	replace
249	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  col;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON  +  col;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	replace
250	[BUG]  [BUGGY]  last  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    last    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  not  a  statement	93	None	replace
251	[BUG]  [BUGGY]  last  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    last    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  not  a  statement	93	None	replace
252	[BUG]  [BUGGY]  last  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    last    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  not  a  statement	93	None	replace
253	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  rhs  *  entry;	  final    double    ratio    =    rhs    *    entry;    final    Double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	62	8	replace
254	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  *  entry;  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  *  entry;	  final    double    ratio    =    rhs    *    entry;    final    Double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	62	8	replace
255	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  *  entry.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  entry.epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  *  entry.epsilon;	  final    double    ratio    =    rhs    *    entry;    final    Double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	62	None	replace
256	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  *  entry.getValue();  [CE]  double  cannot  be  dereferenced  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  entry.getValue();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  *  entry.getValue();	  final    double    ratio    =    rhs    *    entry;    final    Double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	62	None	replace
257	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs);  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  rhs);	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs);    	non-compiled	[CE]  ';'  expected	67	None	replace
258	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	replace
259	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  table.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  table.getValue()  /  DEFAULT_EPSILON;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	replace
260	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue()  -  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  table.getValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  table.getValue()  -  1;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	replace
261	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  entry  /  rhs;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	10	replace
262	[BUG]  [BUGGY]  final  Double  ratio  =  entry  /  rhs;  [FE]  NoFeasibleSolutionException  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry  /  rhs;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	10	replace
263	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	8	replace
264	[BUG]  [BUGGY]  final  Double  ratio  =  entry  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]                NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	8	replace
265	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  Double  ratio  =  entry  *  rhs;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	8	replace
266	[BUG]  [BUGGY]  final  Double  ratio  =  entry  *  rhs;  [FE]  NoFeasibleSolutionException  [FE]                  NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry  *  rhs;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	69	8	replace
267	[BUG]  [BUGGY]  final  Double  ratio  =  entry.doubleValue()  /  rhs;  [CE]  double  cannot  be  dereferenced  [FE]                    NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry.doubleValue()  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry.doubleValue()  /  rhs;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	69	None	replace
268	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	add
269	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	11	None	add
270	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  double  ratio  =  rhs  *  DEFAULT_EPSilON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  double  ratio  =  rhs  *  DEFAULT_EPSilON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    final  double  ratio  =  rhs  *  DEFAULT_EPSilON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	add
271	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    final  Double  ratio  =  rhs  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	add
272	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  cannot  find  symbol  ratio	85	None	replace
273	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	85	None	replace
274	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    static  final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
275	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
276	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	113	None	replace
277	[BUG]  [BUGGY]  Integer  minRatio  =  rhs.getValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  rhs.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  rhs.getValue()  /  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	42	None	replace
278	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    static  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
279	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  last  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  last  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    last  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	11	None	add
280	[BUG]  [BUGGY]  final  Double  ratio  =  entry  /  rhs.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  entry  /  rhs.doubleValue;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  entry  /  rhs.doubleValue;	  final    double    ratio    =    entry    /    rhs;    final    Double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	69	None	replace
281	[BUG]  [BUGGY]  Integer  minValue  =  i.getValue();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  i.getValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  i.getValue();	  Integer    minValue    =    entries.getValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
282	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	114	None	replace
283	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	114	None	replace
284	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
285	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
286	[BUG]  [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
287	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  *  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getValue()  *  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  *  1;	  Integer    minRatio    =    entry.getValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	43	None	replace
288	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	52	None	replace
289	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  entry.epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
290	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)>  0;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  col)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    col)>    0;    	non-compiled	[CE]  incompatible  types	18	None	replace
291	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  *  entry.rhs;	  final    double    ratio    =    entry.rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
292	[BUG]  [BUGGY]  Final  double  ratio  =  entry  /  rhs;  [CE]  not  a  statement  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Final  double  ratio  =  entry  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Final  double  ratio  =  entry  /  rhs;	  final    double    ratio    =    entry    /    rhs;    Final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	68	None	replace
293	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	95	None	replace
294	[BUG]  [BUGGY]  Integer  minValue  =  epsilon.getValue(entry);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  epsilon.getValue(entry);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  epsilon.getValue(entry);	  Integer    minValue    =    epsilon.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	replace
295	[BUG]  [BUGGY]  Integer  minValue  =  epsilon.getValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  epsilon.getValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  epsilon.getValue()  +  1;	  Integer    minValue    =    epsilon.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	replace
296	[BUG]  [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	64	None	replace
297	[BUG]  [BUGGY]  Integer  minValue  =  rhs.getValue()  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  rhs.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  rhs.getValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
298	[BUG]  [BUGGY]  Integer  minValue  =  epsilon.getValue()  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  epsilon.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  epsilon.getValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
299	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue()  +  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  table.getValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  table.getValue()  +  1;	  Integer    minRatioPos    =    table.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	117	None	replace
300	[BUG]  [BUGGY]  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	81	None	replace
301	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs).epsilon)>  0;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs).epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs).epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.epsilon)>    0;    	non-compiled	[CE]  ';'  expected	115	None	replace
302	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  DEFAULT_EPSILON  /  rhs;	  final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	101	8	replace
303	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  rhs;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  /  rhs;	  final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	101	8	replace
304	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	122	None	replace
305	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	51	None	replace
306	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	50	None	replace
307	[BUG]  [BUGGY]  final  double  ratio  =  epsilon.rhs  /  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon.rhs  /  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon.rhs  /  entry.rhs;	  final    double    ratio    =    entry.rhs    /    epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
308	[BUG]  [BUGGY]  Integer  minValue  =  table.getValue(),  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  table  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  table.getValue(),  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  table.getValue(),  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue(),    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  table	125	None	replace
309	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs  -  1);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	28	None	replace
310	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON  +  1;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	54	None	replace
311	[BUG]  [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.epsilon  /  entry;	  final    double    ratio    =    entry.epsilon    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
312	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  epsilon  /  rhs;	  final    double    ratio    =    entry.epsilon    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	33	8	replace
313	[BUG]  [BUGGY]  final  double  ratio  =  epsilon  /  rhs;  [FE]  NoFeasibleSolutionException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon  /  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon  /  rhs;	  final    double    ratio    =    entry.epsilon    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	33	8	replace
314	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry.doubleValue;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue;	  final    double    ratio    =    DEFAULT_EPSILON    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
315	[BUG]  [BUGGY]  Integer  minRatio  =  epsilon.doubleValue();  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  epsilon.doubleValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  epsilon.doubleValue();	  Integer    minRatio    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	22	None	replace
316	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  epsilon,  0,  rhs)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  epsilon,  0,  rhs)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  epsilon,  0,  rhs)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
317	[BUG]  [BUGGY]  Integer  minValue  =  epsilon.getValue()  -  1;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  epsilon.getValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  epsilon.getValue()  -  1;	  Integer    minValue    =    entry.getValue()    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
318	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  rhs  /  DEFAULT_EPSILON  +  1;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  NoFeasibleSolutionException  	16	6	replace
319	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON  +  1;  [FE]  NoFeasibleSolutionException  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  /  DEFAULT_EPSILON  +  1;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  NoFeasibleSolutionException  	16	6	replace
320	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  1;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON  +  1;	  Integer    rhs    =    entry.getValue()    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	116	None	replace
321	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON  +  entry.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON  +  entry.doubleValue();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  DEFAULT_EPSILON  +  entry.doubleValue();	  final    double    ratio    =    rhs    *    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
322	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  rhs  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  /  rhs  +  1;	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	66	10	replace
323	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs  +  1;  [FE]  NoFeasibleSolutionException  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  rhs  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  rhs  +  1;	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs;    	compilable	  [FE]  NoFeasibleSolutionException  	66	10	replace
324	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  rhs)>  0;  [CE]  cannot  find  symbol  erhs  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  rhs)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(erhs,  0,  rhs)>  0;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)>    0;    	non-compiled	[CE]  cannot  find  symbol  erhs	17	None	replace
325	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  erhs  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  erhs	3	None	replace
326	[BUG]  [BUGGY]  final  double  ratio  =  rhs.doubleValue  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.doubleValue  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.doubleValue  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
327	[BUG]  [BUGGY]  final  double  ratio  =  epsilon.doubleValue  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon.doubleValue  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon.doubleValue  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
328	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  /  epsilon;	  final    double    ratio    =    entry    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	6	8	replace
329	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  epsilon;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  epsilon;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  epsilon;	  final    double    ratio    =    entry    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	6	8	replace
330	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	  int    minValue    =    MathUtils.compareTo(entry,    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ratio	121	None	replace
331	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  1;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	90	None	replace
332	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)>  0;  [CE]  cannot  find  symbol  erhs  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(erhs,  0,  epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  find  symbol  erhs	90	None	replace
333	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	31	None	replace
334	[BUG]  [BUGGY]  final  double  ratio  =  epsilon.getValue()  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon.getValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
335	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry)-  1;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	71	None	replace
336	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
337	[BUG]  [BUGGY]  Integer  minRatio  =  epsilon.doubleValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  epsilon.doubleValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  epsilon.doubleValue()  -  1;	  Integer    minRatio    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
338	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [CE]  cannot  find  symbol  Entry  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(Entry,  0,  rhs);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	91	None	replace
339	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  cannot  find  symbol  Entry  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Entry	91	None	replace
340	[BUG]  [BUGGY]  last  double  ratio  =  rhs  /  entry;  [CE]  not  a  statement  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  rhs  /  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  rhs  /  entry;	  final    double    ratio    =    entry    /    rhs;    last    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	126	None	replace
341	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	83	None	replace
342	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  +  2;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entry.getValue()  +  2;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  +  2;	  Integer    minValue    =    entry.getValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
343	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs.length);	  int    minValue    =    MathUtils.compareTo(entry,    0,    entry.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	123	None	replace
344	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  last  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [CE]  not  a  statement  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  last  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    rhs;    last  double  ratio  =  DEFAULT_EPSILON  *  rhs;	  	non-compiled	[CE]  not  a  statement	100	None	add
345	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  rhs;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  rhs;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  /  rhs;	  Integer    minRatio    =    entry.doubleValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	20	None	replace
346	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON.rhs;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  /  DEFAULT_EPSILON.rhs;	  final    double    ratio    =    rhs    /    entry.rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	57	None	replace
347	[BUG]  [BUGGY]  final  double  ratio  =  rhs.length  /  entry;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.length  /  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.length  /  entry;	  final    double    ratio    =    entry.length    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
348	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  EPSILON)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  EPSILON  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  EPSILON)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  EPSILON)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  EPSILON	79	None	replace
349	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);	  int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  cannot  find  symbol  ratio	85	None	replace
350	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon));    	non-compiled	[CE]  ';'  expected	65	None	replace
351	[BUG]  [BUGGY]  Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    entry;    Final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  not  a  statement	60	None	replace
352	[BUG]  [BUGGY]  final  double  ratio  =  rhs.length  /  entry);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.length  /  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.length  /  entry);	  final    double    ratio    =    entry.length    /    rhs;    	non-compiled	[CE]  ';'  expected	32	None	replace
353	[BUG]  [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	boolean  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  incompatible  types	82	None	replace
354	[BUG]  [BUGGY]  final  double  ratio  =  epsilon.length  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  epsilon.length  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  epsilon.length  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.length    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
355	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.length  /  entry.length;  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.length  /  entry.length;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON.length  /  entry.length;	  final    double    ratio    =    entry.length    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
356	[BUG]  [BUGGY]  final  double  ratio  =  rhs.length  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.length  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.length  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.length    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
357	[BUG]  [BUGGY]  static  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static    final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
358	[BUG]  [BUGGY]  char  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  char  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	char  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
359	[BUG]  [BUGGY]  final  double  ratio  =  table.getValue()  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  table  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  table.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  table.getValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  table	74	None	replace
360	[BUG]  [BUGGY]  Integer  minValue  =  DEFAULT_EPSILON.getValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  DEFAULT_EPSILON.getValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  DEFAULT_EPSILON.getValue();	  Integer    minValue    =    epsilon.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	replace
361	[BUG]  [BUGGY]  last  double  ratio  =  entry.hashCode  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  last  double  ratio  =  entry.hashCode  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	last  double  ratio  =  entry.hashCode  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    last    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  not  a  statement	93	None	replace
362	[BUG]  [BUGGY]  Integer  rhs  =  table.getValue()  *  col;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  table.getValue()  *  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  table.getValue()  *  col;	  Integer    rhs    =    entry.getValue()    *    col;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	40	None	replace
363	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry,  0,  epsilon)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry,  0,  epsilon)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  entry,  0,  epsilon)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
364	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(col,  0,  entry)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    col)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	55	None	replace
365	[BUG]  [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.rhs,  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.rhs,  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.rhs  /  entry.rhs,  DEFAULT_EPSILON;	  final    double    ratio    =    rhs.rhs    /    entry.rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	106	None	replace
366	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  2,  epsilon);	          int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    1,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	114	None	replace
367	[BUG]  [BUGGY]  Integer  minValue  =  entries.getValue()  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  entries  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  entries.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entries.getValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  entries	44	None	replace
368	[BUG]  [BUGGY]  Integer  minValue  =  table.getValue()  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  table  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  table.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  table.getValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  table	44	None	replace
369	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
370	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
371	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rh  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rh  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rh	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  ')'  expected	52	None	replace
372	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  ';'  expected	52	None	replace
373	[BUG]  [BUGGY]  Integer  minRatio  =  entries.doubleValue();  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entries.doubleValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entries.doubleValue();	  Integer    minRatio    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	22	None	replace
374	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs  +  1;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs  +  1;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
375	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs);  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs);	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs);    	non-compiled	[CE]  ';'  expected	67	None	replace
376	[BUG]  [BUGGY]  static  final  double  ratio  =  entry  /  DEFULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  entry  /  DEFULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  entry  /  DEFULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    static    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
377	[BUG]  [BUGGY]  Integer  minRatio  =  table.getValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  table.getValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  table.getValue()  -  1;	  Integer    minRatio    =    entry.getValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	43	None	replace
378	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getKey()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  entry.getKey()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getKey()  /  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	42	None	replace
379	[BUG]  [BUGGY]  Integer  rhs  =  entry.getRowValue();  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  rhs  =  entry.getRowValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getRowValue();	  Integer    rhs    =    entry.getKey();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	94	None	replace
380	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	49	None	replace
381	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon);	  int    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	49	None	replace
382	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  last  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  last  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    DEFAULT_EPSILON;    last  double  ratio  =  entry  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	5	None	add
383	[BUG]  [BUGGY]  final  Double  ratio  =  rhs  *  entry.toUpperCase();  [CE]  double  cannot  be  dereferenced  [FE]              NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  Double  ratio  =  rhs  *  entry.toUpperCase();  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  Double  ratio  =  rhs  *  entry.toUpperCase();	  final    double    ratio    =    rhs    *    entry;    final    Double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	62	None	replace
384	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFULT_EPSILON;  [CE]  cannot  find  symbol  DEFULT_EPSILON  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs  *  DEFULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  DEFULT_EPSILON;	  final    double    ratio    =    rhs    *    entry;    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  cannot  find  symbol  DEFULT_EPSILON	59	None	replace
385	[BUG]  [BUGGY]  final  double  rhs  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  rhs  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  rhs  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    rhs)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	53	None	replace
386	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue)/  DEFAULT_EPSILON;	  Double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
387	[BUG]  [BUGGY]  static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	static  final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  final    double    ratio    =    rhs    *    entry;    static    final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
388	[BUG]  [BUGGY]  Final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    /    rhs;    Final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  not  a  statement	68	None	replace
389	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	51	None	replace
390	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon));    	non-compiled	[CE]  ';'  expected	84	None	replace
391	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.rhs  *  rhs;  [CE]  double  cannot  be  dereferenced  [FE]            NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.rhs  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON.rhs  *  rhs;	  final    double    ratio    =    entry.rhs    *    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
392	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  entry.minValue);	  double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	122	None	replace
393	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  last  double  ratio  =  entry  *  rhs;  [CE]  not  a  statement  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  *  rhs;  last  double  ratio  =  entry  *  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    *    rhs;    last  double  ratio  =  entry  *  rhs;	  	non-compiled	[CE]  not  a  statement	9	None	add
394	[BUG]  [BUGGY]  final  double  ratio  =  DFAULT_EPSILON  /  entry.rhs;  [CE]  cannot  find  symbol  DFAULT_EPSILON  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DFAULT_EPSILON  /  entry.rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DFAULT_EPSILON  /  entry.rhs;	  final    double    ratio    =    DEFAULT_EPSILON    /    entry.rhs;    	non-compiled	[CE]  cannot  find  symbol  DFAULT_EPSILON	104	None	replace
395	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  /  DEFAULT_EPSILON  *  DEFAULT_EPSILON;	  final    double    ratio    =    DEFAULT_EPSILON    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	103	8	replace
396	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  DEFAULT_EPSILON  *  DEFAULT_EPSILON;	  final    double    ratio    =    DEFAULT_EPSILON    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	103	8	replace
397	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.doubleValue  /  entry.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON.doubleValue  /  entry.doubleValue;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON.doubleValue  /  entry.doubleValue;	  final    double    ratio    =    entry.doubleValue    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
398	[BUG]  [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  rhs.epsilon  /  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.epsilon  /  entry);	  final    double    ratio    =    entry.epsilon    /    rhs;    	non-compiled	[CE]  ';'  expected	33	None	replace
399	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  entry.length);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	29	None	replace
400	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon.length)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    entry.length)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
401	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  DEFAULT_EPSILON,  rhs;	  final    double    ratio    =    entry    /    rhs;    final    double    ratio    =    entry    /    rhs;    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	66	None	replace
402	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  rhs,  DEFAULT_EPSILON);	  Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    rhs);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	95	None	replace
403	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getKey()  /  DEFAULT_EPSILON;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getKey()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getKey()  /  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	replace
404	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);	  double    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	98	None	replace
405	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  DEFAULT_EPSILON;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  -  DEFAULT_EPSILON;	  Integer    minRatioPos    =    entry.getValue()    -    col;    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	27	None	replace
406	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  entry)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  entry)>  0;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon,  entry)>  0;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	90	None	replace
407	[BUG]  [BUGGY]  char  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  char  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	char  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	          int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1);    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
408	[BUG]  [BUGGY]  Integer  minValue  =  table.getValue()  -  1;  [CE]  cannot  find  symbol  table  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minValue  =  table.getValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  table.getValue()  -  1;	  Integer    minValue    =    entry.getValue()    -    1;    	non-compiled	[CE]  cannot  find  symbol  table	45	None	replace
409	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  last  double  ratio  =  DEFAULT_EPSILON  *  entry;  [CE]  not  a  statement  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  last  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    last  double  ratio  =  DEFAULT_EPSILON  *  entry;	  	non-compiled	[CE]  not  a  statement	102	None	add
410	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  entry);  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  final  double  ratio  =  DEFAULT_EPSILON  *  entry);  [BUGGY]      if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    DEFAULT_EPSILON    *    entry;    final  double  ratio  =  DEFAULT_EPSILON  *  entry);	  	non-compiled	[CE]  ';'  expected	102	None	add
411	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Entry  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(Entry,  0,  entry)/  DEFAULT_EPSILON;	          final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final    double    minValue    =    MathUtils.compareTo(Entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  Entry	99	None	replace
412	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)-  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	70	None	replace
413	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)-  1;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)-  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)-  1;	  int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)-    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	70	None	replace
414	[BUG]  [BUGGY]  Integer  minRatio  =  table.doubleValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  Integer  minRatio  =  table.doubleValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  table.doubleValue()  -  1;	  Integer    minRatio    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
415	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(entry,    0,    col)>    0;    	non-compiled	[CE]  incompatible  types	18	None	replace
416	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  erhs  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {      [BUGGY]  final  double  minValue  =  MathUtils.compareTo(erhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(erhs,  0,  entry)/  DEFAULT_EPSILON;	  final    double    minValue    =    MathUtils.compareTo(rhs,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  erhs	54	None	replace
