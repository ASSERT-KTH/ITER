bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return; [FE] AssertionError [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {  if (tableau.getNumArtificialVariables() == 0) { [BUGGY] return; [BUGGY] } while (!isPhase1Solved(tableau)) { doIteration(tableau); }  if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) { throw new NoFeasibleSolutionException(); } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.5773502691896258	169	169	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {  if (tableau.getNumArtificialVariables() == 0) { [BUGGY] [BUGGY] return; } while (!isPhase1Solved(tableau)) { doIteration(tableau); }  if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) { throw new NoFeasibleSolutionException(); } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.5773502691896258	169	169	1	add	
3	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { [BUGGY] return false; [BUGGY] } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { [BUGGY] [BUGGY] return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	add	
5	[BUG] [BUGGY] doIteration(tableau); [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { [BUGGY] doIteration(tableau); [BUGGY] } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	191	191	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { [BUGGY] [BUGGY] doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	191	191	1	add	
7	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } [BUGGY] return true; [BUGGY] } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } [BUGGY] [BUGGY] return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	add	
9	[BUG] [BUGGY] return tableau.getSolution(); [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } [BUGGY] return tableau.getSolution(); [BUGGY] } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	193	193	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } [BUGGY] [BUGGY] return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	193	193	1	add	
11	[BUG] [BUGGY] if (tableau.getNumArtificialVariables() > 0) { [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { [BUGGY] if (tableau.getNumArtificialVariables() > 0) { [BUGGY] return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	147	147	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { [BUGGY] [BUGGY] if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	147	147	1	add	
13	[BUG] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } [BUGGY] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	add	
15	[BUG] [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { [BUGGY] return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; } } return true; } [CLASS] SimplexSolver [METHOD] isOptimal [RETURN_TYPE] boolean  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	add	
17	[BUG] [BUGGY] tableau.discardArtificialVariables(); [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); [BUGGY] tableau.discardArtificialVariables(); [BUGGY] while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	189	189	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); [BUGGY] [BUGGY] tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	189	189	1	add	
19	[BUG] [BUGGY] while (!isOptimal(tableau)) { [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); [BUGGY] while (!isOptimal(tableau)) { [BUGGY] doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	190	190	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); [BUGGY] [BUGGY] while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] RealPointValuePair  [VARIABLES] SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	190	190	1	add	
21	[BUG] [BUGGY] this(DEFAULT_EPSILON); [FE] AssertionError [CONTEXT] public SimplexSolver() { [BUGGY] this(DEFAULT_EPSILON); [BUGGY] } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver()  [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	42	42	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public SimplexSolver() { [BUGGY] [BUGGY] this(DEFAULT_EPSILON); } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver()  [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	42	42	1	add	
23	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public SimplexSolver() { this(DEFAULT_EPSILON); [BUGGY] } [BUGGY]  [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver()  [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	43	43	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public SimplexSolver() { this(DEFAULT_EPSILON); [BUGGY] [BUGGY] } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver()  [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	43	43	1	add	
25	[BUG] [BUGGY] public SimplexSolver(final double epsilon) { [FE] AssertionError [CONTEXT] [BUGGY] public SimplexSolver(final double epsilon) { [BUGGY] this.epsilon = epsilon; } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	49	49	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public SimplexSolver(final double epsilon) { this.epsilon = epsilon; } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	49	49	1	add	
27	[BUG] [BUGGY] this.epsilon = epsilon; [FE] AssertionError [CONTEXT] public SimplexSolver(final double epsilon) { [BUGGY] this.epsilon = epsilon; [BUGGY] } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	50	50	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public SimplexSolver(final double epsilon) { [BUGGY] [BUGGY] this.epsilon = epsilon; } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	50	50	1	add	
29	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public SimplexSolver(final double epsilon) { this.epsilon = epsilon; [BUGGY] } [BUGGY]  [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	51	51	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public SimplexSolver(final double epsilon) { this.epsilon = epsilon; [BUGGY] [BUGGY] } [CLASS] SimplexSolver [METHOD] <init> [RETURN_TYPE] SimplexSolver(double)  final double epsilon [VARIABLES] double DEFAULT_EPSILON epsilon boolean  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	51	51	1	add	
31	[BUG] [BUGGY] double minValue = 0; [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { [BUGGY] double minValue = 0; [BUGGY] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { [BUGGY] [BUGGY] double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	add	
33	[BUG] [BUGGY] Integer minPos = null; [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; [BUGGY] Integer minPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; [BUGGY] [BUGGY] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	add	
35	[BUG] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	61	61	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; [BUGGY] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	61	61	1	add	
37	[BUG] [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { [BUGGY] minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	62	62	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] [BUGGY] if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	62	62	1	add	
39	[BUG] [BUGGY] minValue = tableau.getEntry(0, i); [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { [BUGGY] minValue = tableau.getEntry(0, i); [BUGGY] minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	63	63	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { [BUGGY] [BUGGY] minValue = tableau.getEntry(0, i); minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	63	63	1	add	
41	[BUG] [BUGGY] minPos = i; [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); [BUGGY] minPos = i; [BUGGY] } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	64	64	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); [BUGGY] [BUGGY] minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	64	64	1	add	
43	[BUG] [BUGGY] return minPos; [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } [BUGGY] return minPos; [BUGGY] } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	67	67	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } [BUGGY] [BUGGY] return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON epsilon minValue int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	67	67	1	add	
45	[BUG] [BUGGY] double minRatio = Double.MAX_VALUE; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { [BUGGY] double minRatio = Double.MAX_VALUE; [BUGGY] Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	77	77	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { [BUGGY] [BUGGY] double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	77	77	1	add	
47	[BUG] [BUGGY] Integer minRatioPos = null; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; [BUGGY] Integer minRatioPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	78	78	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; [BUGGY] [BUGGY] Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	78	78	1	add	
49	[BUG] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	79	79	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; [BUGGY] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	79	79	1	add	
51	[BUG] [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	80	80	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	80	80	1	add	
53	[BUG] [BUGGY] final double entry = tableau.getEntry(i, col); [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] final double entry = tableau.getEntry(i, col); [BUGGY] if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	81	81	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] [BUGGY] final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	81	81	1	add	
55	[BUG] [BUGGY] if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); [BUGGY] if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { [BUGGY] final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); [BUGGY] [BUGGY] if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	
57	[BUG] [BUGGY] final double ratio = rhs / entry; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { [BUGGY] final double ratio = rhs / entry; [BUGGY] if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { [BUGGY] [BUGGY] final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	
59	[BUG] [BUGGY] if (ratio < minRatio) { [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; [BUGGY] if (ratio < minRatio) { [BUGGY] minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; [BUGGY] [BUGGY] if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	84	84	1	add	
61	[BUG] [BUGGY] minRatio = ratio; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { [BUGGY] minRatio = ratio; [BUGGY] minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { [BUGGY] [BUGGY] minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	
63	[BUG] [BUGGY] minRatioPos = i; [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; [BUGGY] minRatioPos = i; [BUGGY] } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	86	86	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; [BUGGY] [BUGGY] minRatioPos = i; } } } return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	86	86	1	add	
65	[BUG] [BUGGY] return minRatioPos; [FE] AssertionError [CONTEXT] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } [BUGGY] return minRatioPos; [BUGGY] } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	90	90	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } [BUGGY] [BUGGY] return minRatioPos; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  final int col SimplexTableau tableau [VARIABLES] Integer minRatioPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int col i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	90	90	1	add	
67	[BUG] [BUGGY] incrementIterationsCounter(); [FE] AssertionError [CONTEXT] protected void doIteration(final SimplexTableau tableau) throws OptimizationException { [BUGGY] incrementIterationsCounter(); [BUGGY]  Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau); if (pivotRow == null) { throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal); [CLASS] SimplexSolver [METHOD] doIteration [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] Integer pivotCol pivotRow boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	103	103	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void doIteration(final SimplexTableau tableau) throws OptimizationException { [BUGGY] [BUGGY] incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau); if (pivotRow == null) { throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal); [CLASS] SimplexSolver [METHOD] doIteration [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] Integer pivotCol pivotRow boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	103	103	1	add	
69	[BUG] [BUGGY] Integer pivotCol = getPivotColumn(tableau); [FE] AssertionError [CONTEXT] protected void doIteration(final SimplexTableau tableau) throws OptimizationException { incrementIterationsCounter(); [BUGGY] Integer pivotCol = getPivotColumn(tableau); [BUGGY] Integer pivotRow = getPivotRow(pivotCol, tableau); if (pivotRow == null) { throw new UnboundedSolutionException(); }  [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	105	105	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void doIteration(final SimplexTableau tableau) throws OptimizationException { incrementIterationsCounter(); [BUGGY] [BUGGY] Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau); if (pivotRow == null) { throw new UnboundedSolutionException(); }  [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	105	105	1	add	
71	[BUG] [BUGGY] Integer pivotRow = getPivotRow(pivotCol, tableau); [FE] AssertionError [CONTEXT] throws OptimizationException { incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); [BUGGY] Integer pivotRow = getPivotRow(pivotCol, tableau); [BUGGY] if (pivotRow == null) { throw new UnboundedSolutionException(); }   [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	106	106	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws OptimizationException { incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); [BUGGY] [BUGGY] Integer pivotRow = getPivotRow(pivotCol, tableau); if (pivotRow == null) { throw new UnboundedSolutionException(); }   [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	106	106	1	add	
73	[BUG] [BUGGY] if (pivotRow == null) { [FE] AssertionError [CONTEXT] incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau); [BUGGY] if (pivotRow == null) { [BUGGY] throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	107	107	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau); [BUGGY] [BUGGY] if (pivotRow == null) { throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	107	107	1	add	
75	[BUG] [BUGGY] double pivotVal = tableau.getEntry(pivotRow, pivotCol); [FE] AssertionError [CONTEXT] if (pivotRow == null) { throw new UnboundedSolutionException(); }  [BUGGY] double pivotVal = tableau.getEntry(pivotRow, pivotCol); [BUGGY] tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	112	112	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (pivotRow == null) { throw new UnboundedSolutionException(); }  [BUGGY] [BUGGY] double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	112	112	1	add	
77	[BUG] [BUGGY] tableau.divideRow(pivotRow, pivotVal); [FE] AssertionError [CONTEXT] throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); [BUGGY] tableau.divideRow(pivotRow, pivotVal); [BUGGY]   for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	113	113	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new UnboundedSolutionException(); }  double pivotVal = tableau.getEntry(pivotRow, pivotCol); [BUGGY] [BUGGY] tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	113	113	1	add	
79	[BUG] [BUGGY] for (int i = 0; i < tableau.getHeight(); i++) { [FE] AssertionError [CONTEXT]  double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal);  [BUGGY] for (int i = 0; i < tableau.getHeight(); i++) { [BUGGY] if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	116	116	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal);  [BUGGY] [BUGGY] for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	116	116	1	add	
81	[BUG] [BUGGY] if (i != pivotRow) { [FE] AssertionError [CONTEXT] double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { [BUGGY] if (i != pivotRow) { [BUGGY] double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } } [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	117	117	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { [BUGGY] [BUGGY] if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } } [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	117	117	1	add	
83	[BUG] [BUGGY] double multiplier = tableau.getEntry(i, pivotCol); [FE] AssertionError [CONTEXT] tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { [BUGGY] double multiplier = tableau.getEntry(i, pivotCol); [BUGGY] tableau.subtractRow(i, pivotRow, multiplier); } } }  [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	118	118	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] tableau.divideRow(pivotRow, pivotVal);  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { [BUGGY] [BUGGY] double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } }  [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	118	118	1	add	
85	[BUG] [BUGGY] tableau.subtractRow(i, pivotRow, multiplier); [FE] AssertionError [CONTEXT]  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); [BUGGY] tableau.subtractRow(i, pivotRow, multiplier); [BUGGY] } } }   [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	119	119	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); [BUGGY] [BUGGY] tableau.subtractRow(i, pivotRow, multiplier); } } }   [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	119	119	1	add	
87	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } [BUGGY] } [BUGGY]      [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	122	122	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); } } [BUGGY] [BUGGY] }      [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	122	122	1	add	
89	[BUG] [BUGGY] if (tableau.getNumArtificialVariables() == 0) { [FE] AssertionError [CONTEXT]   protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {  [BUGGY] if (tableau.getNumArtificialVariables() == 0) { [BUGGY] return; } while (!isPhase1Solved(tableau)) { doIteration(tableau); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	168	168	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {  [BUGGY] [BUGGY] if (tableau.getNumArtificialVariables() == 0) { return; } while (!isPhase1Solved(tableau)) { doIteration(tableau); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	168	168	1	add	
91	[BUG] [BUGGY] final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); [FE] AssertionError [CONTEXT]  @Override public RealPointValuePair doOptimize() throws OptimizationException { [BUGGY] final SimplexTableau tableau =   new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); [BUGGY] new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	186	187	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  @Override public RealPointValuePair doOptimize() throws OptimizationException { [BUGGY] [BUGGY] final SimplexTableau tableau =   new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	186	187	1	add	
93	[BUG] [BUGGY] solvePhase1(tableau); [FE] AssertionError [CONTEXT] @Override public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); [BUGGY] solvePhase1(tableau); [BUGGY] tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	188	188	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] @Override public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau = new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); [BUGGY] [BUGGY] solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); [CLASS] 	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	188	188	1	add	
