bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }		non-compiled	[CE]  <identifier>  expected	4	None	add
2	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
3	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;		non-compiled	[CE]  <identifier>  expected	4	None	add
4	[BUG]  [BUGGY]    int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
5	[BUG]  [BUGGY]    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }		non-compiled	[CE]  <identifier>  expected	4	None	add
6	[BUG]  [BUGGY]  return  true;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  return  true;  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return  true;	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  return  false;  }	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;		non-compiled	[CE]  <identifier>  expected	4	None	add
10	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
11	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i),  0,  epsilon)  <  0;  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i),  0,  epsilon)  <  0;		non-compiled	[CE]  <identifier>  expected	4	None	add
12	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));		non-compiled	[CE]  <identifier>  expected	4	None	add
13	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  0,  epsilon)  <  0;  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  0,  epsilon)  <  0;		non-compiled	[CE]  <identifier>  expected	4	None	add
14	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON);  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON);	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  tableau.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  tableau.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  tableau.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	return  false;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  true;  }		non-compiled	[CE]  <identifier>  expected	4	None	add
18	[BUG]  [BUGGY]    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }		non-compiled	[CE]  <identifier>  expected	4	None	add
19	[BUG]  [BUGGY]    epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
20	[BUG]  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);  [BUGGY]  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	    double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);		non-compiled	[CE]  <identifier>  expected	4	None	add
