bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	throw  new  IllegalArgumentException( " ");	  return    null;    	compilable	  [FE]  IllegalArgumentException  	2	13	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw  new  IllegalArgumentException( " ");	  return    null;    	compilable	  [FE]  IllegalArgumentException  	2	13	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(false);  return  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(false);  return  null;	      	compilable	  [FE]  AssertionFailedError  	8	13	replace
4	[BUG]  [BUGGY]  this.setEquals(false);  return  null;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(false);  return  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);  return  null;	      	compilable	  [FE]  AssertionFailedError  	8	13	replace
5	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  isEquals);	      AppendsBuilder.append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	16	None	replace
6	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  this);	      AppendsBuilder.append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	16	None	replace
7	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  false);	      AppendsBuilder.append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	16	None	replace
8	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	3	None	replace
9	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	3	None	replace
10	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	3	None	replace
11	[BUG]  [BUGGY]  return  null;  return  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  return  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    return  null;	  	non-compiled	[CE]  unreachable  statement	1	None	add
12	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  null;  }  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  null;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs  ==  null)  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
13	[BUG]  [BUGGY]  return  null;  this.setEquals(false);  return  null;  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  this.setEquals(false);  return  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    this.setEquals(false);  return  null;	  	non-compiled	[CE]  unreachable  statement	1	None	add
14	[BUG]  [BUGGY]  return  null;  if(lhs  ==  rhs)  {  return  null;  }  [CE]  unreachable  statement  [FE]          NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  rhs)  {  return  null;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  rhs)  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
15	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs!=  null)  {  return  null;  }  [CE]  unreachable  statement  [FE]            NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs!=  null)  {  return  null;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs!=  null)  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(false);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        this.setEquals(false);    this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	9	13	add
17	[BUG]  [BUGGY]      this.setEquals(false);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(false);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(false);    this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	9	13	add
18	[BUG]  [BUGGY]      this.setEquals(false);  This.setEquals(false);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(false);  This.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(false);    This.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol  This	9	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(false);  this.setEquals(true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        this.setEquals(false);    this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
20	[BUG]  [BUGGY]      this.setEquals(false);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(false);  this.setEquals(true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(false);    this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
21	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	6	None	replace
22	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	6	None	replace
23	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs!=  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	6	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true);  return  this;  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(true);  return  this;	      this.setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
25	[BUG]  [BUGGY]  this.setEquals(true);  return  this;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true);  return  this;  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);  return  this;	      this.setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
26	[BUG]  [BUGGY]  this.setEquals(lhs);  return  this;  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs);  return  this;  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs);  return  this;	      this.setEquals(false);    return    this;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	11	None	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true);  return  null;  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(true);  return  null;	      this.setEquals(false);    return    this;    	compilable	  [FE]  NullPointerException  	11	12	replace
28	[BUG]  [BUGGY]  this.setEquals(true);  return  null;  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true);  return  null;  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);  return  null;	      this.setEquals(false);    return    this;    	compilable	  [FE]  NullPointerException  	11	12	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  this.setEquals(true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        this.setEquals(true);    this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
30	[BUG]  [BUGGY]      this.setEquals(true);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  this.setEquals(true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(true);    this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        this.setEquals(true);    this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	14	13	add
32	[BUG]  [BUGGY]      this.setEquals(true);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(true);    this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	14	13	add
33	[BUG]  [BUGGY]      this.setEquals(true);  This.setEquals(true);  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  This.setEquals(true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(true);    This.setEquals(true);	  	non-compiled	[CE]  cannot  find  symbol  This	14	None	add
34	[BUG]  [BUGGY]      this.setEquals(true);  this.setEquals(True);  [CE]  cannot  find  symbol  True  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      this.setEquals(true);  this.setEquals(True);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        this.setEquals(true);    this.setEquals(True);	  	non-compiled	[CE]  cannot  find  symbol  True	14	None	add
35	[BUG]  [BUGGY]  this.setEquals(false,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(false,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  rhs);	      this.setEquals(true);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	15	None	replace
36	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
37	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
38	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
39	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
40	[BUG]  [BUGGY]  append(lhs,  rhs,  false);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean)  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  append(lhs,  rhs,  false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false);	      append(lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean)	13	None	replace
41	[BUG]  [BUGGY]  append(lhs,  rhs,  true);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean)  [FE]      StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  append(lhs,  rhs,  true);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  true);	      append(lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean)	13	None	replace
42	[BUG]  [BUGGY]  append(lhs,  rhs,  null);  [CE]  no  suitable  method  found  for  append(Object,Object,<null>)  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  append(lhs,  rhs,  null);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  null);	      append(lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,<null>)	13	None	replace
43	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean)  [FE]          StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  append(lhs,  rhs,  isEquals);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals);	      append(lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean)	13	None	replace
44	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs);	  return(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	20	None	replace
45	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  null)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	20	12	replace
46	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	20	12	replace
47	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	12	13	add
48	[BUG]  [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	12	13	add
49	[BUG]  [BUGGY]      append(lhs,  rhs);  Append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  Append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    Append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
50	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
51	[BUG]  [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
52	[BUG]  [BUGGY]      append(lhs,  rhs);  setEquals(lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  setEquals(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    setEquals(lhs,  rhs);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	12	None	add
53	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
54	[BUG]  [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs!=  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs!=  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	18	12	replace
56	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs!=  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	18	12	replace
57	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  lhs;	  return(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  incompatible  types	5	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
59	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
60	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.append(lhs,  rhs);	      this.setEquals(false);    	compilable	  [FE]  StackOverflowError  	10	13	replace
61	[BUG]  [BUGGY]  this.append(lhs,  rhs);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,  rhs);	      this.setEquals(false);    	compilable	  [FE]  StackOverflowError  	10	13	replace
62	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  return(this  ==  lhs)?  this  :  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  return(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    return(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	19	None	add
63	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    if(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
64	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  this.setEquals(this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  this.setEquals(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    this.setEquals(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	19	None	add
65	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  (this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  (this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    (this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	19	None	add
66	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this!=  lhs)?  this  :  null;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this!=  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    return(this!=  lhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	17	None	add
67	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  ==  lhs)?  this  :  null;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    return(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	17	None	add
68	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  >=  lhs)?  this  :  null;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  >=  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    return(this  >=  lhs)?  this  :  null;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	add
69	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    if(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
70	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  >>  lhs)?  this  :  null;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  return(this  >>  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    return(this  >>  lhs)?  this  :  null;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
71	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  return(lhs  ==  rhs)?  this  :  null;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  return(lhs  ==  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    return(lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	4	None	add
72	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    if(lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
73	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  Return(lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  Return(lhs  ==  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    Return(lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	4	None	add
74	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  return(lhs!=  rhs)?  this  :  null;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  return(lhs!=  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    return(lhs!=  rhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	4	None	add
75	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (lhs  ==  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    (lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	4	None	add
76	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
77	[BUG]  [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
78	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
79	[BUG]  [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
80	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
81	[BUG]  [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
82	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
83	[BUG]  [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	12	13	add
84	[BUG]  [BUGGY]      setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      setEquals(false);  return  this;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	7	None	add
85	[BUG]  [BUGGY]  this.setEquals(lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs);	      this.setEquals(false);    return    this;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	11	None	replace
86	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    if(this!=  lhs)?  this  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
87	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  Return(this!=  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  Return(this!=  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    Return(this!=  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	17	None	add
88	[BUG]  [BUGGY]  return(this!=  lhs)?  this  :  null;  this  =(this!=  lhs)?  this  :  null;  [CE]  cannot  assign  a  value  to  final  variable  this  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this!=  lhs)?  this  :  null;  this  =(this!=  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this!=    lhs)?    this    :    null;    this  =(this!=  lhs)?  this  :  null;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  this	17	None	add
89	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
90	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
91	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  lhs  ==  rhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	4	None	add
92	[BUG]  [BUGGY]  this.setEquals(true,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true,  lhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true,  lhs);	      this.setEquals(true);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	15	None	replace
93	[BUG]  [BUGGY]  this.setEquals(true,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(true,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true,  rhs);	      this.setEquals(true);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	15	None	replace
94	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	6	None	replace
95	[BUG]  [BUGGY]  return  null;  return  new  EqualsBuilder(lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  return  new  EqualsBuilder(lhs,  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    return  new  EqualsBuilder(lhs,  rhs);	  	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	1	None	add
96	[BUG]  [BUGGY]  return  null;  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  this.setEquals(false);  return  this;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	1	None	add
97	[BUG]  [BUGGY]  return  null;  return  new  EqualsBuilder(this,  lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  return  new  EqualsBuilder(this,  lhs,  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    return  new  EqualsBuilder(this,  lhs,  rhs);	  	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	1	None	add
98	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  Return(this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  Return(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    Return(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	19	None	add
99	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  this  {  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  this  {  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    this  {  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	19	None	add
100	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	19	None	add
101	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  this.setEquals(false);  return  this;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    null;    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	4	None	add
102	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	        append(lhs,    rhs);    this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
103	[BUG]  [BUGGY]      append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  this.setEquals(false);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	12	13	add
104	[BUG]  [BUGGY]      append(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]      StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    AppendsBuilder.append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	12	None	add
105	[BUG]  [BUGGY]      append(lhs,  rhs);  testTransients(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]      append(lhs,  rhs);  testTransients(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	        append(lhs,    rhs);    testTransients(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
106	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs,  rhs);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs);	      this.setEquals(false);    return    this;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	11	None	replace
107	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass());  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	6	None	replace
108	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  this.setEquals(false);  return(this  ==  lhs)?  this  :  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(this  ==  lhs)?  this  :  null;  this.setEquals(false);  return(this  ==  lhs)?  this  :  null;  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this    ==    lhs)?    this    :    null;    this.setEquals(false);  return(this  ==  lhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	19	None	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  null  ||  rhs  ==  null);	      this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	10	12	replace
110	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null  ||  rhs  ==  null);	      this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	10	12	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs  ==  null);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  null);	      this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	10	12	replace
112	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  this.setEquals(lhs  ==  null);  [BUGGY]    return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null);	      this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	10	12	replace
113	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	3	None	replace
114	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	3	None	replace
115	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
116	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
117	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  this.setEquals(false);  return  this;  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  this.setEquals(false);  return  this;  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
118	[BUG]  [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          NullPointerException    [CONTEXT]    public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {    [BUGGY]  return  null;  if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return    null;    if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
