bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs,  isEquals);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs,  isEquals);	  this.setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	106	None	replace
2	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs,  false);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs,  false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs,  false);	  this.setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	106	None	replace
3	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs,  true);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs,  true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs,  true);	  this.setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	106	None	replace
4	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs,  null);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs,  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs,  null);	  this.setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	106	None	replace
5	[BUG]  [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(true);  return  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(true);  return  null;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    null;    this.setEquals(true);  return  null;	  	non-compiled	[CE]  unreachable  statement	27	None	add
6	[BUG]  [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(false);  return  null;  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(false);  return  null;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    null;    this.setEquals(false);  return  null;	  	non-compiled	[CE]  unreachable  statement	27	None	add
7	[BUG]  [BUGGY]  this.setEquals(true);  return  null;  This.setEquals(true);  return  null;  [CE]  cannot  find  symbol  This  [FE]        NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  null;  This.setEquals(true);  return  null;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    null;    This.setEquals(true);  return  null;	  	non-compiled	[CE]  cannot  find  symbol  This	27	None	add
8	[BUG]  [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(True);  return  null;  [CE]  cannot  find  symbol  True  [FE]          NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  null;  this.setEquals(True);  return  null;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    null;    this.setEquals(True);  return  null;	  	non-compiled	[CE]  cannot  find  symbol  True	27	None	add
9	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]      IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs));  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw  new  IllegalArgumentException( " ".equals(lhs));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	2	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	2	13	replace
12	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	2	13	replace
13	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	89	None	replace
14	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	89	None	replace
15	[BUG]  [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	89	None	replace
16	[BUG]  [BUGGY]  this  =(this  ==  lhs)?  this  :  null;  [CE]  cannot  assign  a  value  to  final  variable  this  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this  =(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this  =(this  ==  lhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    this    =(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  this	88	None	replace
17	[BUG]  [BUGGY]  this  =(lhs  ==  rhs)?  this  :  null;  [CE]  cannot  assign  a  value  to  final  variable  this  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this  =(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this  =(lhs  ==  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    this    =(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  this	88	None	replace
18	[BUG]  [BUGGY]  this  =(this!=  lhs)?  this  :  null;  [CE]  cannot  assign  a  value  to  final  variable  this  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this  =(this!=  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this  =(this!=  lhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    this    =(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  this	88	None	replace
19	[BUG]  [BUGGY]  this.setEquals(this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	64	None	replace
20	[BUG]  [BUGGY]  this.setEquals(lhs  {  rhs)?  this  :  null;  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  {  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  {  rhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  ')'  expected	64	None	replace
21	[BUG]  [BUGGY]  this.setEquals(this  {  lhs)?  this  :  null;  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(this  {  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(this  {  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  ')'  expected	64	None	replace
22	[BUG]  [BUGGY]  this.setEquals(lhs  {  null)?  null  :  null;  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  {  null)?  null  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  {  null)?  null  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  ')'  expected	64	None	replace
23	[BUG]  [BUGGY]  (lhs  ==  rhs)?  this  :  null;  this.setEquals(false);  return  this;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  (lhs  ==  rhs)?  this  :  null;  this.setEquals(false);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	(lhs  ==  rhs)?  this  :  null;  this.setEquals(false);  return  this;	  return(lhs    ==    rhs)?    this    :    null;    this.setEquals(false);    return    this;    	non-compiled	[CE]  not  a  statement	101	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  ==  null  ||  rhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	109	12	add
25	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  ==  null  ||  rhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	109	12	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  ==  null  ||  rhs!=  null);	  	compilable	  [FE]  AssertionFailedError  	109	1	add
27	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  ==  null  ||  rhs!=  null);	  	compilable	  [FE]  AssertionFailedError  	109	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs!=  null  ||  rhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	109	1	add
29	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs!=  null  ||  rhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	109	1	add
30	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  {  null  ||  rhs  ==  null);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  {  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  {  null  ||  rhs  ==  null);	  	non-compiled	[CE]  ')'  expected	109	None	add
31	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs  ==  null);  this.setEquals(lhs  ==  null  ||  rhs  >=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null    ||    rhs    ==    null);    this.setEquals(lhs  ==  null  ||  rhs  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	add
32	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
33	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
34	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
35	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    this.setEquals(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	78	None	add
36	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
37	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
38	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
39	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	78	13	add
40	[BUG]  [BUGGY]  (this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  (this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	(this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	100	None	replace
41	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	38	None	replace
42	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	38	None	replace
43	[BUG]  [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	38	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs    ==    null);    this.setEquals(lhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	111	12	add
45	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null);    this.setEquals(lhs  ==  null);	  	compilable	  [FE]  AssertionFailedError  	111	12	add
46	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  {  null);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  {  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null);    this.setEquals(lhs  {  null);	  	non-compiled	[CE]  ')'  expected	111	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs    ==    null);    this.setEquals(lhs!=  null);	  	compilable	  [FE]  AssertionFailedError  	111	3	add
48	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs!=  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null);    this.setEquals(lhs!=  null);	  	compilable	  [FE]  AssertionFailedError  	111	3	add
49	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  >=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null);    this.setEquals(lhs  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	111	None	add
50	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(lhs  >>  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs    ==    null);    this.setEquals(lhs  >>  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	111	None	add
51	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass(),    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	22	None	replace
52	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass(),    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	22	None	replace
53	[BUG]  [BUGGY]  testTransients(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  testTransients(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	testTransients(lhs,  rhs);	          append(lhs,    rhs);    testTransients(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
54	[BUG]  [BUGGY]  append(lhs,  rhs);  this.testTransients(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  this.testTransients(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  this.testTransients(lhs,  rhs);	          append(lhs,    rhs);    testTransients(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  null  :  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(this  ==  lhs)?  null  :  this;	  return(this    ==    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
56	[BUG]  [BUGGY]  return(this  ==  lhs)?  null  :  this;  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  null  :  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  null  :  this;	  return(this    ==    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
57	[BUG]  [BUGGY]  return(lhs  ==  null)?  null  :  lhs;  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  null  :  lhs;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  null  :  lhs;	  return(this    ==    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  incompatible  types	62	None	replace
58	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  isEquals);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    this);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	37	None	replace
59	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  false);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    this);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	37	None	replace
60	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  true);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    this);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	37	None	replace
61	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  lhsClass);  [CE]  cannot  find  symbol  lhsClass  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  lhsClass);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  lhsClass);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    this);    	non-compiled	[CE]  cannot  find  symbol  lhsClass	37	None	replace
62	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs.getClass());	  return(lhs!=    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	23	None	replace
63	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());	  return(lhs!=    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	23	None	replace
64	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  	non-compiled	[CE]  unreachable  statement	58	None	add
65	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    if(lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
66	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
67	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  (lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  (lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    (lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  	non-compiled	[CE]  not  a  statement	58	None	add
68	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  lhs  ==  rhs)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    lhs  ==  rhs)?  this  :  new  EqualsBuilder();	  	non-compiled	[CE]  not  a  statement	58	None	add
69	[BUG]  [BUGGY]  parent.setEquals(lhs,  rhs);  [CE]  cannot  find  symbol  parent  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  parent.setEquals(lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	parent.setEquals(lhs,  rhs);	  return    null;    if(lhs    ==    rhs)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  parent	14	None	replace
70	[BUG]  [BUGGY]  validate(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  validate(lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	validate(lhs,  rhs);	  return    null;    if(lhs    ==    rhs)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
71	[BUG]  [BUGGY]  append(lhs,  rhs,  this);  [CE]  no  suitable  method  found  for  append(Object,Object,EqualsBuilder)  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  this);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  this);	  append(lhs,    rhs,    null);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,EqualsBuilder)	42	None	replace
72	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  null);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,<null>)  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  null);	  append(lhs,    rhs,    null);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,<null>)	42	None	replace
73	[BUG]  [BUGGY]  append(lhs,  rhs,  null,  isEquals);  [CE]  no  suitable  method  found  for  append(Object,Object,<null>,boolean)  [FE]                StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  null,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  null,  isEquals);	  append(lhs,    rhs,    null);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,<null>,boolean)	42	None	replace
74	[BUG]  [BUGGY]  append(lhs,  rhs,  this.setEquals(false);  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  this.setEquals(false);	  append(lhs,    rhs,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(false);        this.setEquals(true);    this.setEquals(false);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
76	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(true);    this.setEquals(false);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(false);        this.setEquals(true);    this.setEquals(true);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
78	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(true);    this.setEquals(true);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
79	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(true);  This.setEquals(false);  this.setEquals(true);  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(true);  This.setEquals(false);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(true);    This.setEquals(false);  this.setEquals(true);	  	non-compiled	[CE]  cannot  find  symbol  This	19	None	add
80	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	94	None	replace
81	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass());	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	94	None	replace
82	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.getClass();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.getClass();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  lhs.getClass();	  return(lhs    ==    rhs)?    null    :    lhs;    	non-compiled	[CE]  incompatible  types	57	None	replace
83	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.getName();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.getName();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  lhs.getName();	  return(lhs    ==    rhs)?    null    :    lhs;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
84	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.toString();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.toString();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  lhs.toString();	  return(lhs    ==    rhs)?    null    :    lhs;    	non-compiled	[CE]  incompatible  types	57	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(true);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	setEquals(true);  return  this;	          setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	84	1	replace
86	[BUG]  [BUGGY]  setEquals(true);  return  this;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(true);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	setEquals(true);  return  this;	          setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	84	1	replace
87	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  this.setEquals(true);	          append(lhs,    rhs);    append(lhs,    rhs);    this.setEquals(false);    	compilable	  [FE]  StackOverflowError  	51	13	replace
88	[BUG]  [BUGGY]  append(lhs,  rhs);  this.setEquals(true);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  this.setEquals(true);	          append(lhs,    rhs);    append(lhs,    rhs);    this.setEquals(false);    	compilable	  [FE]  StackOverflowError  	51	13	replace
89	[BUG]  [BUGGY]  this.setEquals(false,  lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  lhs,  rhs);	  this.setEquals(false,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	35	None	replace
90	[BUG]  [BUGGY]  this.setEquals(lhs,  false,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  false,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  false,  rhs);	  this.setEquals(false,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	35	None	replace
91	[BUG]  [BUGGY]  this.setEquals(true,  lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true,  lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true,  lhs,  rhs);	  this.setEquals(false,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	35	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(false);  return(this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	13	replace
93	[BUG]  [BUGGY]  this.setEquals(false);  return(this  ==  lhs)?  this  :  null;  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);  return(this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	13	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(false);  return(lhs  ==  rhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	13	replace
95	[BUG]  [BUGGY]  this.setEquals(false);  return(lhs  ==  rhs)?  this  :  null;  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);  return(lhs  ==  rhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	13	replace
96	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	50	13	add
97	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	50	13	add
98	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  Append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  Append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    Append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
99	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(true);	  	compilable	  [FE]  StackOverflowError  	50	13	add
100	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(true);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(true);	  	compilable	  [FE]  StackOverflowError  	50	13	add
101	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  Append(lhs,  rhs);  this.setEquals(false);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  Append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  Append(lhs,  rhs);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
102	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	50	13	add
103	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	50	13	add
104	[BUG]  [BUGGY]  Append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  Append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	Append(lhs,  rhs);	          append(lhs,    rhs);    Append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
105	[BUG]  [BUGGY]  append0(lhs,  rhs);  Append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  Append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);  Append(lhs,  rhs);	          append(lhs,    rhs);    Append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
106	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
107	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
108	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  }	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
109	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)return  this;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(this  ==  lhs)return  this;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  unreachable  statement	69	None	replace
110	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	90	None	replace
111	[BUG]  [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	90	None	replace
112	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  isEquals);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	90	None	replace
113	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
114	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
115	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
116	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
117	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
118	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
119	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
120	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
121	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	76	13	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return    null;    return    null;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
123	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return    null;    return    null;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
124	[BUG]  [BUGGY]  append(l,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [CE]  cannot  find  symbol  l  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(l,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(l,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    	non-compiled	[CE]  cannot  find  symbol  l	81	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  null  ||  rhs!=  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
126	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  ||  rhs!=  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null  ||  rhs!=  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  &&  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  null  &&  rhs  ==  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	12	replace
128	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null  &&  rhs  ==  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null  &&  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null  &&  rhs  ==  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	12	replace
129	[BUG]  [BUGGY]  approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
130	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(true);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  StackOverflowError  	79	13	replace
131	[BUG]  [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(true);  return  this;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(true);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  StackOverflowError  	79	13	replace
132	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  return(lhs  ==  null)?  this  :  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  return(lhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    return(lhs  ==  null)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	45	None	add
133	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(lhs  ==  null)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(lhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    if(lhs  ==  null)?  this  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
134	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  ==  null)?  this  :  null;  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    lhs  ==  null)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	45	None	add
135	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  {  null)?  this  :  null;  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  {  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    lhs  {  null)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	45	None	add
136	[BUG]  [BUGGY]  this.setEquals(lhsClass,  rhs);  [CE]  cannot  find  symbol  lhsClass  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhsClass,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhsClass,  rhs);	  this.setEquals(lhs);    	non-compiled	[CE]  cannot  find  symbol  lhsClass	85	None	replace
137	[BUG]  [BUGGY]  this.setEquals(rhs,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(rhs,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(rhs,  lhs);	  this.setEquals(lhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	85	None	replace
138	[BUG]  [BUGGY]  this.setEquals(false,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  lhs);	  this.setEquals(lhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	85	None	replace
139	[BUG]  [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(true);  return  this;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(true);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    this;    this.setEquals(true);  return  this;	  	non-compiled	[CE]  unreachable  statement	24	None	add
140	[BUG]  [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(false);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    this;    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	24	None	add
141	[BUG]  [BUGGY]  this.setEquals(true);  return  this;  This.setEquals(true);  return  this;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  this;  This.setEquals(true);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    this;    This.setEquals(true);  return  this;	  	non-compiled	[CE]  cannot  find  symbol  This	24	None	add
142	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	113	None	replace
143	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  lhs,  false);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	113	None	replace
144	[BUG]  [BUGGY]  (lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  (lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	(lhs  ==  rhs)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	91	None	replace
145	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  lhs  =  lhs.getClass();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	lhs  =  lhs.getClass();	  return(lhs    ==    rhs)?    this    :    null;    lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	91	13	replace
146	[BUG]  [BUGGY]  lhs  =  lhs.getClass();  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  lhs  =  lhs.getClass();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	lhs  =  lhs.getClass();	  return(lhs    ==    rhs)?    this    :    null;    lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	91	13	replace
147	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	53	13	add
148	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	53	13	add
149	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  Append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  Append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    Append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
150	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  setEquals(true);	  	compilable	  [FE]  StackOverflowError  	53	13	add
151	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(true);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);  setEquals(true);	  	compilable	  [FE]  StackOverflowError  	53	13	add
152	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	53	13	add
153	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	53	13	add
154	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  add(lhs,  rhs);  setEquals(false);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  add(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  add(lhs,  rhs);  setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(false);        this.setEquals(false);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	16	13	add
156	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(false);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	16	13	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(false);        this.setEquals(false);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	16	13	add
158	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(false);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	16	13	add
159	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  true);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  true);	  AppendsBuilder.append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	7	None	replace
160	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  null);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  null);	  AppendsBuilder.append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	7	None	replace
161	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals);  [CE]  cannot  find  symbol  isEquals  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals);	  AppendsBuilder.append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  isEquals	7	None	replace
162	[BUG]  [BUGGY]  this.setEquals(false,  rhs,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  rhs,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  rhs,  lhs);	  this.setEquals(true,    lhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	92	None	replace
163	[BUG]  [BUGGY]  this.setEquals(true,  rhs,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true,  rhs,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true,  rhs,  lhs);	  this.setEquals(true,    lhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	92	None	replace
164	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  return(lhs!=  rhs)?  this  :  null;  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  return(lhs!=  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    return(lhs!=  rhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	55	None	add
165	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  return(lhs  ==  rhs)?  this  :  null;  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  return(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    return(lhs  ==  rhs)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	55	None	add
166	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs  ==  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs  ==  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    if(lhs  ==  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }	  	non-compiled	[CE]  unreachable  statement	55	None	add
167	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs  ==  rhs)?  this  :  null;  }  [CE]  unreachable  statement  [FE]          NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs  ==  rhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    if(lhs!=  rhs)  {  return(lhs  ==  rhs)?  this  :  null;  }	  	non-compiled	[CE]  unreachable  statement	55	None	add
168	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }  [CE]  unreachable  statement  [FE]            NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    if(lhs!=  rhs)  {  return(lhs!=  rhs)?  this  :  null;  }	  	non-compiled	[CE]  unreachable  statement	55	None	add
169	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
170	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
171	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
172	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
173	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
174	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
175	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
176	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
177	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    append(lhs,    rhs);    }    if(lhs  ==  null  ||  rhs  ==  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	80	13	add
178	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs);  return  this;  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs);  return  this;	  this.setEquals(false);    return    null;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	4	None	replace
179	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=  rhs)?  this  :  null;  if(this!=  lhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
180	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)return  this;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(this!=  lhs)return  this;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  unreachable  statement	86	None	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs!=  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)return  this;  if(lhs!=  null)return  this;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
182	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs!=  null)return  this;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs!=  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;  if(lhs!=  null)return  this;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
183	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals);  setEquals(lhs,  rhs,  isEquals);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean)  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals);  setEquals(lhs,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals);  setEquals(lhs,  rhs,  isEquals);	          append(lhs,    rhs);    setEquals(lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean)	52	None	replace
184	[BUG]  [BUGGY]  setEquals(lhs,  rhs,  isEquals);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(lhs,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	setEquals(lhs,  rhs,  isEquals);	          append(lhs,    rhs);    setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	52	None	replace
185	[BUG]  [BUGGY]  append(lhs,  rhs);  setEquals(lhs,  rhs,  isEquals);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(lhs,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  setEquals(lhs,  rhs,  isEquals);	          append(lhs,    rhs);    setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	52	None	replace
186	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);	  return(this    ==    lhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	44	None	replace
187	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  this);	  return(this    ==    lhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	44	None	replace
188	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  false);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	8	None	replace
189	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  true);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	8	None	replace
190	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);  [CE]  cannot  find  symbol  superEquals  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  superEquals	8	None	replace
191	[BUG]  [BUGGY]  this.setEquals(true);  This.setEquals(false);  [CE]  cannot  find  symbol  This  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  This.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);  This.setEquals(false);	          this.setEquals(false);    This.setEquals(false);    	non-compiled	[CE]  cannot  find  symbol  This	18	None	replace
192	[BUG]  [BUGGY]  this.setEquals(lhs);  This.setEquals(false);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs);  This.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs);  This.setEquals(false);	          this.setEquals(false);    This.setEquals(false);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	18	None	replace
193	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  true);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  true);	  append(lhs,    rhs,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)	41	None	replace
194	[BUG]  [BUGGY]  append(lhs,  rhs,  true,  isEquals);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  true,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  true,  isEquals);	  append(lhs,    rhs,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)	41	None	replace
195	[BUG]  [BUGGY]  append(lhs,  rhs,  true,  lhs.isEquals);  [CE]  cannot  find  symbol  isEquals  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  true,  lhs.isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  true,  lhs.isEquals);	  append(lhs,    rhs,    true);    	non-compiled	[CE]  cannot  find  symbol  isEquals	41	None	replace
196	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	36	None	replace
197	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);  [CE]  cannot  find  symbol  superEquals  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  superEquals);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  superEquals	36	None	replace
198	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)  {  return(this  ==  lhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)  {  return(this  ==  lhs)?  this  :  null;  }	  return(this!=    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	67	12	replace
199	[BUG]  [BUGGY]  if(lhs  ==  rhs)  {  return(this  ==  lhs)?  this  :  null;  }  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)  {  return(this  ==  lhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)  {  return(this  ==  lhs)?  this  :  null;  }	  return(this!=    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	67	12	replace
200	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  null  ||  rhs  ==  null)?  this  :  null;	  return(lhs    ==    null)?    this    :    null;    	compilable	  [FE]  NullPointerException  	46	12	replace
201	[BUG]  [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  null;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null  ||  rhs  ==  null)?  this  :  null;	  return(lhs    ==    null)?    this    :    null;    	compilable	  [FE]  NullPointerException  	46	12	replace
202	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  isEquals);	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	95	None	replace
203	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  this);	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	95	None	replace
204	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false));  [CE]  'void'  type  not  allowed  here  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false));  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false));	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  'void'  type  not  allowed  here	95	None	replace
205	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false);  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  this.setEquals(false);	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  ')'  expected	95	None	replace
206	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  true);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	9	None	replace
207	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	9	None	replace
208	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)return  this;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)return  this;	  return(lhs    ==    rhs)?    this    :    null;    if(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  unreachable  statement	72	None	replace
209	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)  {  this.setEquals(false);  }  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)  {  this.setEquals(false);  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)  {  this.setEquals(false);  }	  return(lhs    ==    rhs)?    this    :    null;    if(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  unreachable  statement	72	None	replace
210	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)this.setEquals(false);  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)this.setEquals(false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  if(lhs  ==  rhs)this.setEquals(false);	  return(lhs    ==    rhs)?    this    :    null;    if(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  unreachable  statement	72	None	replace
211	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
212	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
213	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    Append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
214	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
215	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    append(lhs,  rhs);  if(lhs!=  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
216	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
217	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	  	compilable	  [FE]  StackOverflowError  	82	13	add
218	[BUG]  [BUGGY]  this.setEquals(false,  rhs,  isEquals);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  rhs,  isEquals);	  this.setEquals(true,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	93	None	replace
219	[BUG]  [BUGGY]  Return(lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  Return(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	Return(lhs  ==  rhs)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    Return(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	73	None	replace
220	[BUG]  [BUGGY]  this.setEquals(lhs,  rhs);  return  null;  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs,  rhs);  return  null;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs,  rhs);  return  null;	  this.setEquals(lhs);    return    this;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	26	None	replace
221	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (lhs!=  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (lhs!=  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  (lhs!=  rhs)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	75	None	replace
222	[BUG]  [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null)return  null;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null)return  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)return  this;  if(lhs  ==  null)return  null;  }	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	63	1	replace
224	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  [FE]  AssertionFailedError  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;  if(lhs  ==  null)return  this;	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	63	1	replace
225	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals);  [CE]  cannot  find  symbol  setEquals  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  this.setEquals);	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  setEquals	5	None	replace
226	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals,  this);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals,  this);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  isEquals,  this);	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	5	None	replace
227	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals,  superEquals);  [CE]  cannot  find  symbol  superEquals  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  isEquals,  superEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  isEquals,  superEquals);	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  superEquals	5	None	replace
228	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	102	13	add
229	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	102	13	add
230	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  Append(lhs,  rhs);  this.setEquals(false);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  Append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    Append(lhs,  rhs);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
231	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
232	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
233	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    append(lhs,  rhs);  this.setEquals(true);	  	compilable	  [FE]  StackOverflowError  	102	13	add
234	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(true);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    append(lhs,  rhs);  this.setEquals(true);	  	compilable	  [FE]  StackOverflowError  	102	13	add
235	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  else  {  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  else  {  return  this;  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
236	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  else  {  return  this;  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  else  {  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  rhs)  {  append(lhs,  rhs);  this.setEquals(false);  }  else  {  return  this;  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
237	[BUG]  [BUGGY]  append(l,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [CE]  cannot  find  symbol  l  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(l,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(l,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  append(lhs,  rhs);  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    	non-compiled	[CE]  cannot  find  symbol  l	83	None	replace
238	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    	compilable	  [FE]  StackOverflowError  	83	13	replace
239	[BUG]  [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    append(lhs,    rhs);    }    	compilable	  [FE]  StackOverflowError  	83	13	replace
240	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
241	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	1	None	add
242	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	1	None	add
243	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( ",   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  rhs);	  this.setEquals(lhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	112	3	replace
245	[BUG]  [BUGGY]  this.setEquals(lhs  ==  rhs);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  rhs);	  this.setEquals(lhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	112	3	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs!=  null  ||  rhs  ==  null);	  this.setEquals(lhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	112	3	replace
247	[BUG]  [BUGGY]  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs!=  null  ||  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs!=  null  ||  rhs  ==  null);	  this.setEquals(lhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	112	3	replace
248	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  rhs)?  null  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	compilable	  [FE]  NullPointerException  	59	12	replace
249	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  new  EqualsBuilder();  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	compilable	  [FE]  NullPointerException  	59	12	replace
250	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder  <  Object>();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder  <  Object>();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder  <  Object>();	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  null)?  this  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
252	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder();	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
253	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	39	None	replace
254	[BUG]  [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	39	None	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs!=  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null  ||  rhs!=  null)  {  return  this;  }	  return    null;    if(lhs    ==    null    ||    rhs    ==    null)    {    return    this;    }    	compilable	  [FE]  AssertionFailedError  	115	1	replace
256	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs!=  null)  {  return  this;  }  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs!=  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs!=  null)  {  return  this;  }	  return    null;    if(lhs    ==    null    ||    rhs    ==    null)    {    return    this;    }    	compilable	  [FE]  AssertionFailedError  	115	1	replace
257	[BUG]  [BUGGY]  validate(lhs,  rhs);  validate(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  validate(lhs,  rhs);  validate(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	validate(lhs,  rhs);  validate(lhs,  rhs);	          append(lhs,    rhs);    append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
258	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs);  appends(lhs,  rhs);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs);  appends(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs);  appends(lhs,  rhs);	          append(lhs,    rhs);    append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	48	None	replace
259	[BUG]  [BUGGY]  this.setEquals(false);  return  null;  this.setEquals(false);  return  null;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return  null;  this.setEquals(false);  return  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);    return    null;    this.setEquals(false);  return  null;	  	non-compiled	[CE]  unreachable  statement	3	None	add
260	[BUG]  [BUGGY]  this.setEquals(false);  return  null;  This.setEquals(false);  return  null;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return  null;  This.setEquals(false);  return  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);    return    null;    This.setEquals(false);  return  null;	  	non-compiled	[CE]  cannot  find  symbol  This	3	None	add
261	[BUG]  [BUGGY]  this.setEquals(false);  return  null;  this.setEquals(true);  return  null;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  return  null;  this.setEquals(true);  return  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);    return    null;    this.setEquals(true);  return  null;	  	non-compiled	[CE]  unreachable  statement	3	None	add
262	[BUG]  [BUGGY]  Return(this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  Return(this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	Return(this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    Return(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	98	None	replace
263	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	114	None	replace
264	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	114	None	replace
265	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	47	13	add
266	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  append(lhs,  rhs);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	47	13	add
267	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  Append(lhs,  rhs);  append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  Append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    Append(lhs,  rhs);  append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
268	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(lhs,  rhs);  append(lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(lhs,  rhs);  append(lhs,  rhs);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	47	None	add
269	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  Append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  Append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  rhs);  Append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
270	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  testTransients(lhs,  rhs);  append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  testTransients(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    testTransients(lhs,  rhs);  append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  return  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  return  null;  }	  return    null;    this.setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	96	3	replace
272	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  return  null;  }  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  return  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  return  null;  }	  return    null;    this.setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	96	3	replace
273	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  superEquals);  [CE]  cannot  find  symbol  superEquals  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  superEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  superEquals);	  append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  superEquals	43	None	replace
274	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  this);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,EqualsBuilder)  [FE]                StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  this);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  this);	  append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,EqualsBuilder)	43	None	replace
275	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  false);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)  [FE]                  StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  false);	  append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)	43	None	replace
276	[BUG]  [BUGGY]  append(lhs,  rhs,  isEquals,  this.setEquals(false);  [CE]  ')'  expected  [FE]                    StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  isEquals,  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  isEquals,  this.setEquals(false);	  append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  ')'  expected	43	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(false);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	31	13	add
278	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(false);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	31	13	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(false);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	31	13	add
280	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(false);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	31	13	add
281	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(false);  This.setEquals(true);  this.setEquals(false);  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  This.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(false);    This.setEquals(true);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol  This	31	None	add
282	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(true;  this.setEquals(false);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(true;  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(false);    this.setEquals(true;  this.setEquals(false);	  	non-compiled	[CE]  ')'  expected	31	None	add
283	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	107	None	replace
284	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs.getClass());	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	107	None	replace
285	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.append(lhs,    rhs);    this.append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	60	13	add
286	[BUG]  [BUGGY]  this.append(lhs,  rhs);  this.append(lhs,  rhs);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    this.append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	60	13	add
287	[BUG]  [BUGGY]  this.append(lhs,  rhs);  this.setEquals(lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.setEquals(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    this.setEquals(lhs,  rhs);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	60	None	add
288	[BUG]  [BUGGY]  this.append(lhs,  rhs);  This.append(lhs,  rhs);  [CE]  cannot  find  symbol  This  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  This.append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    This.append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol  This	60	None	add
289	[BUG]  [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(this,  lhs,  rhs,  isEquals);	  return    null;    return    new    EqualsBuilder(this,    lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	97	None	replace
290	[BUG]  [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  this);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  this);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(this,  lhs,  rhs,  this);	  return    null;    return    new    EqualsBuilder(this,    lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	97	None	replace
291	[BUG]  [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(this,  lhs,  rhs,  false);	  return    null;    return    new    EqualsBuilder(this,    lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	97	None	replace
292	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs);  this.setEquals(true);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs);  this.setEquals(true);	          append(lhs,    rhs);    this.setEquals(false);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	103	None	replace
293	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  lhs.isEquals);  [CE]  cannot  find  symbol  isEquals  [FE]        StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  lhs.isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  lhs.isEquals);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  isEquals	40	None	replace
294	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  rhs.isEquals);  [CE]  cannot  find  symbol  isEquals  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  rhs.isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  rhs.isEquals);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  isEquals	40	None	replace
295	[BUG]  [BUGGY]  append0(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);	          append(lhs,    rhs);    AppendsBuilder.append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
296	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhsClass);  [CE]  cannot  find  symbol  lhsClass  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhsClass);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhsClass);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol  lhsClass	10	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(true);    this.setEquals(true);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
298	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(true);    this.setEquals(true);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(true);    this.setEquals(false);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
300	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(true);    this.setEquals(false);  this.setEquals(true);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(true);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	29	13	add
302	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(true);    this.setEquals(true);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	29	13	add
303	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true;  this.setEquals(true);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(true;  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(true);    this.setEquals(true;  this.setEquals(true);	  	non-compiled	[CE]  ')'  expected	29	None	add
304	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  setEquals(true);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  StackOverflowError  	54	13	replace
305	[BUG]  [BUGGY]  append(lhs,  rhs);  setEquals(true);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  setEquals(true);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  StackOverflowError  	54	13	replace
306	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  setEquals(false);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  StackOverflowError  	54	13	replace
307	[BUG]  [BUGGY]  append(lhs,  rhs);  setEquals(false);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  setEquals(false);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  StackOverflowError  	54	13	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	setEquals(false);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  AssertionFailedError  	54	12	replace
309	[BUG]  [BUGGY]  setEquals(false);  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	setEquals(false);	          append(lhs,    rhs);    append(lhs,    rhs);    setEquals(false);    	compilable	  [FE]  AssertionFailedError  	54	12	replace
310	[BUG]  [BUGGY]  approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	approve(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
311	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(true);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  StackOverflowError  	77	13	replace
312	[BUG]  [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(true);  return  this;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(true);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  StackOverflowError  	77	13	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  null);  this.setEquals(false);	          this.setEquals(true);    this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	32	12	replace
314	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null);  this.setEquals(false);	          this.setEquals(true);    this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	32	12	replace
315	[BUG]  [BUGGY]  this.setEquals(lhs);  this.setEquals(rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs);  this.setEquals(rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs);  this.setEquals(rhs);	          this.setEquals(true);    this.setEquals(false);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	32	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(rhs  ==  lhs)?  this  :  null;	  return(lhs!=    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
317	[BUG]  [BUGGY]  return(rhs  ==  lhs)?  this  :  null;  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs  ==  lhs)?  this  :  null;	  return(lhs!=    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
318	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this  ==  rhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  null;  if(this  ==  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
319	[BUG]  [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null)return  this;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null)return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)return  this;  if(lhs  ==  null)return  this;  }	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
320	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  false);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	10	None	replace
321	[BUG]  [BUGGY]  this.setEquals(false,  lhs  ==  null);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  lhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  lhs  ==  null);	  this.setEquals(lhs    ==    null);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	112	None	replace
322	[BUG]  [BUGGY]  this.setEquals(false,  rhs  ==  null);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  rhs  ==  null);	  this.setEquals(lhs    ==    null);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	112	None	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  setEquals(false);  return  this;  }	          setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	84	3	replace
324	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  setEquals(false);  return  this;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  setEquals(false);  return  this;  }	          setEquals(false);    return    this;    	compilable	  [FE]  AssertionFailedError  	84	3	replace
325	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	append(lhs,  rhs);  return  this;	          setEquals(false);    return    this;    	compilable	  [FE]  StackOverflowError  	84	13	replace
326	[BUG]  [BUGGY]  append(lhs,  rhs);  return  this;  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  return  this;	          setEquals(false);    return    this;    	compilable	  [FE]  StackOverflowError  	84	13	replace
327	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);	          append(lhs,    rhs);    append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	48	None	replace
328	[BUG]  [BUGGY]  append0(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);	          append(lhs,    rhs);    append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
329	[BUG]  [BUGGY]  append(lhs,  rhs,  this.setEquals(false));  [CE]  'void'  type  not  allowed  here  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  this.setEquals(false));  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  this.setEquals(false));	  append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  'void'  type  not  allowed  here	43	None	replace
330	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	47	13	add
331	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  rhs);	  	compilable	  [FE]  StackOverflowError  	47	13	add
332	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  0,  rhs);  append(lhs,  0);  [CE]  no  suitable  method  found  for  append(Object,int,Object)  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  append(lhs,  0,  rhs);  append(lhs,  0);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    append(lhs,  0,  rhs);  append(lhs,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,Object)	47	None	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  AssertionFailedError  	30	3	replace
334	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  AssertionFailedError  	30	3	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(false);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  this.setEquals(false);  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  AssertionFailedError  	30	3	replace
336	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(false);  this.setEquals(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(false);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  this.setEquals(false);  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  AssertionFailedError  	30	3	replace
337	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  else  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  else  {  append(lhs,  rhs);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  StackOverflowError  	30	13	replace
338	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  else  {  append(lhs,  rhs);  }  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  else  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  this.setEquals(true);  this.setEquals(false);  }  else  {  append(lhs,  rhs);  }	          this.setEquals(true);    this.setEquals(true);    	compilable	  [FE]  StackOverflowError  	30	13	replace
339	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  this.setEquals(false);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	58	None	add
340	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  false);	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	95	None	replace
341	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs,  true);	  return    null;    return    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	95	None	replace
342	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (this  ==  lhs)?  this  :  null;  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  (this  ==  lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  (this  ==  lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    (this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	65	None	replace
343	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs.getClass());	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	107	None	replace
344	[BUG]  [BUGGY]  this.setEquals(false,  lhs);  return  this;  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false,  lhs);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false,  lhs);  return  this;	  this.setEquals(lhs);    return    this;    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	26	None	replace
345	[BUG]  [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(this,  lhs,  rhs,  true);	  return    null;    return    new    EqualsBuilder(this,    lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	97	None	replace
346	[BUG]  [BUGGY]  this.setEquals(true,  rhs,  isEquals);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true,  rhs,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true,  rhs,  isEquals);	  this.setEquals(false,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	35	None	replace
347	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(false);  This.setEquals(false);  this.setEquals(false);  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  This.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(false);    This.setEquals(false);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol  This	16	None	add
348	[BUG]  [BUGGY]  append0(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
349	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true,  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	9	None	replace
350	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this!=  rhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  null;  if(this!=  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  null;  if(this!=  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
351	[BUG]  [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(True);  return  this;  [CE]  cannot  find  symbol  True  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(true);  return  this;  this.setEquals(True);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(true);    return    this;    this.setEquals(True);  return  this;	  	non-compiled	[CE]  cannot  find  symbol  True	24	None	add
352	[BUG]  [BUGGY]  append0(lhs,  rhs);  this.setEquals(false);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);  this.setEquals(false);	          append(lhs,    rhs);    this.setEquals(false);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
353	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	53	13	add
354	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  setEquals(false);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  append(lhs,  rhs);  setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    append(lhs,  rhs);  setEquals(false);	  	compilable	  [FE]  StackOverflowError  	53	13	add
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  return  this;  }	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	3	replace
356	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  return  this;  }  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  return  this;  }	  return(this    ==    lhs)?    this    :    null;    this.setEquals(false);    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	108	3	replace
357	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(this  ==  rhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(this  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;  if(this  ==  rhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
358	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
359	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
360	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
361	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	  	compilable	  [FE]  StackOverflowError  	102	13	add
362	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  return  null;  this.setEquals(false);  return  this;  }  [CE]  unreachable  statement  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  return  null;  this.setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  return  null;  this.setEquals(false);  return  this;  }	  return    null;    this.setEquals(false);    return    this;    	non-compiled	[CE]  unreachable  statement	96	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                this.setEquals(true);        this.setEquals(true);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	29	13	add
364	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(true);  this.setEquals(false);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(true);    this.setEquals(false);  this.setEquals(false);	  	compilable	  [FE]  AssertionFailedError  	29	13	add
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  rhs  ||  lhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.setEquals(lhs  ==  rhs  ||  lhs  ==  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
366	[BUG]  [BUGGY]  this.setEquals(lhs  ==  rhs  ||  lhs  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  rhs  ||  lhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  rhs  ||  lhs  ==  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
367	[BUG]  [BUGGY]  append(lhs,  rhs);  setEquals(lhs,  rhs,  false);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs);  setEquals(lhs,  rhs,  false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs);  setEquals(lhs,  rhs,  false);	          append(lhs,    rhs);    setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	52	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  this.setEquals(true);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
369	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  return  this;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  this.setEquals(true);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null)  {  return  this;  }	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	75	1	replace
371	[BUG]  [BUGGY]  if(lhs  ==  null)  {  return  this;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  return  this;  }	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	75	1	replace
372	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;  lhs  ==  rhs)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	91	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs,  rhs));  [CE]  no  suitable  method  found  for  equals(Object,Object)  [FE]    IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs,  rhs));  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	throw  new  IllegalArgumentException( " ".equals(lhs,  rhs));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(Object,Object)	2	None	replace
374	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  this.setEquals(true);  return  this;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  null;  this.setEquals(true);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  null;  this.setEquals(true);  return  this;	  return(lhs    ==    rhs)?    this    :    null;    this.setEquals(false);    return    this;    	non-compiled	[CE]  unreachable  statement	101	None	replace
375	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  this.setEquals(false);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;  this.setEquals(false);  return  this;	  return(lhs    ==    rhs)?    this    :    null;    this.setEquals(false);    return    this;    	non-compiled	[CE]  unreachable  statement	101	None	replace
376	[BUG]  [BUGGY]  this.setEquals(this  ==  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(this  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(this  ==  rhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	64	None	replace
377	[BUG]  [BUGGY]  this.setEquals(lhs)?  this  :  null;  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs)?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  not  a  statement	64	None	replace
378	[BUG]  [BUGGY]  append(lhs,  rhs,  true,  rhs);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  true,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  true,  rhs);	  append(lhs,    rhs,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)	41	None	replace
379	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  rhs);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)  [FE]        StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  rhs);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)	40	None	replace
380	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  false);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  false);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)	40	None	replace
381	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  isEquals);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  isEquals);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,boolean)	40	None	replace
382	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  Return(lhs  ==  null)?  this  :  null;  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  Return(lhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    Return(lhs  ==  null)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	45	None	add
383	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  return(lhs!=  null)?  this  :  null;  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  return(lhs!=  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    null)?    this    :    null;    return(lhs!=  null)?  this  :  null;	  	non-compiled	[CE]  unreachable  statement	45	None	add
384	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  true);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    true);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	89	None	replace
385	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(rhs,  lhs,  false);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	38	None	replace
386	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(lhs  ==  rhs)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(lhs  ==  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;  if(lhs  ==  rhs)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    if(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
387	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(rhs  ==  null)?  this  :  null;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  null;  if(rhs  ==  null)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  null;  if(rhs  ==  null)?  this  :  null;	  return(lhs    ==    rhs)?    this    :    null;    if(lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
388	[BUG]  [BUGGY]  return(rhs!=  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(rhs!=  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(rhs!=  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs.getClass());	  return(lhs!=    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	23	None	replace
389	[BUG]  [BUGGY]  return(isEquals  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(isEquals  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(isEquals  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	8	None	replace
390	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	8	None	replace
391	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  lhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  lhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass(),    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	22	None	replace
392	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs,  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    lhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	113	None	replace
393	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return  this  :  null;  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    if(lhs!=  rhs)  {  return  this  :  null;  }	  	non-compiled	[CE]  ';'  expected	55	None	add
394	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs  >>  rhs)?  this  :  null;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  if(lhs!=  rhs)  {  return(lhs  >>  rhs)?  this  :  null;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    if(lhs!=  rhs)  {  return(lhs  >>  rhs)?  this  :  null;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	55	None	add
395	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false);	  return(this    ==    lhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	44	None	replace
396	[BUG]  [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  true);	  return(this    ==    lhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	44	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(isEquals  ==  false)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	51	3	replace
398	[BUG]  [BUGGY]  if(isEquals  ==  false)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(isEquals  ==  false)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(isEquals  ==  false)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    this.setEquals(false);    	compilable	  [FE]  AssertionFailedError  	51	3	replace
399	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.toArray();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  null  :  lhs.toArray();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  null  :  lhs.toArray();	  return(lhs    ==    rhs)?    null    :    lhs;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
400	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals(false));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals(false));  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  this.setEquals(false));	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  'void'  type  not  allowed  here	5	None	replace
401	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.isEquals);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.isEquals);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  this.isEquals);	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	5	None	replace
402	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals(false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  this.setEquals(false);	  AppendsBuilder.append(lhs,    rhs,    isEquals);    	non-compiled	[CE]  ')'  expected	5	None	replace
403	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  null);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  null);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  null);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	21	None	replace
404	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	59	None	replace
405	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals(false);  return  this;  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals(false);  return  this;  }	  return    null;    return    null;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
406	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  this.setEquals(false);  return  this;  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  this.setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  this.setEquals(false);  return  this;  }	  return    null;    return    null;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
407	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  false,  lhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    false);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	10	None	replace
408	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  lhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  lhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs.getClass(),  rhs,  lhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs.getClass(),    rhs);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	22	None	replace
409	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass(),  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass(),  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  lhs.getClass(),  rhs);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    lhs.getClass());    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	94	None	replace
410	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  this)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  this)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	67	12	replace
411	[BUG]  [BUGGY]  return(lhs  ==  this)?  this  :  null;  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  this)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  this)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  NullPointerException  	67	12	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return(this    ==    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
413	[BUG]  [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [FE]  AssertionFailedError  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return(this    ==    lhs)?    this    :    null;    return(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
414	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(false);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	76	None	add
415	[BUG]  [BUGGY]  return  new  EqualsBuilder(lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(lhs,  rhs);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	2	None	replace
416	[BUG]  [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return  new  EqualsBuilder(this,  lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return  new  EqualsBuilder(this,  lhs,  rhs);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	2	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	75	1	replace
418	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	75	1	replace
419	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)return  this;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;  if(lhs  ==  null  ||  rhs  ==  null)return  this;  }	  return(lhs    ==    rhs)?    this    :    null;    (lhs    ==    rhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
420	[BUG]  [BUGGY]  return(lhs!=  rhs)?  this  :  null;  (lhs!=  rhs)?  this  :  null;  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs!=  rhs)?  this  :  null;  (lhs!=  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs!=    rhs)?    this    :    null;    (lhs!=  rhs)?  this  :  null;	  	non-compiled	[CE]  not  a  statement	55	None	add
421	[BUG]  [BUGGY]  this.setEquals(lhs  ==  null,  rhs  ==  null);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  null,  rhs  ==  null);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  null,  rhs  ==  null);	  this.setEquals(lhs    ==    null    ||    rhs    ==    null);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	110	None	replace
422	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	53	13	add
423	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    setEquals(false);    if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	53	13	add
424	[BUG]  [BUGGY]  return(this  ==  lhs,  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(this  ==  lhs,  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(this  ==  lhs,  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs);	  return(this    ==    lhs)?    this    :    new    EqualsBuilder(lhs,    rhs);    	non-compiled	[CE]  ')'  expected	44	None	replace
425	[BUG]  [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs!=  null)  {  this.setEquals(false);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs!=  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs!=  null)  {  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
426	[BUG]  [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs  ==  null)  {  this.setEquals(false);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs  ==  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(rhs  ==  null)  {  this.setEquals(false);  }	          this.setEquals(true);    this.setEquals(true);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
427	[BUG]  [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  this.setEquals(false);  this.setEquals(false);  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!lhsClass.isArray())  {  this.setEquals	          this.setEquals(true);    this.setEquals(true);    	non-compiled	[CE]  not  a  statement	30	None	replace
428	[BUG]  [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    this.setEquals(false,  rhs);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	60	None	add
429	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	this.append(lhs,    rhs);    this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	60	13	add
430	[BUG]  [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	60	13	add
431	[BUG]  [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false,  lhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.append(lhs,  rhs);  this.setEquals(false,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.append(lhs,    rhs);    this.setEquals(false,  lhs);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	60	None	add
432	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  isEquals  =  lhs.equals(rhs);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  isEquals  =  lhs.equals(rhs);  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  return  this;  }  else  {  Class  lhsClass  =  lhs.getClass();  if(!isEquals)  {  isEquals  =  lhs.equals(rhs);  }	  return    null;    this.setEquals(false);    return    null;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
433	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }  else  {  this.setEquals(false);  return  this;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }  else  {  this.setEquals(false);  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs    ==    rhs)?    this    :    new    EqualsBuilder();    if(lhs  ==  rhs)  {  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder();  }  else  {  this.setEquals(false);  return  this;  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
434	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isEquals);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isEquals);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isEquals);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	8	None	replace
435	[BUG]  [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isTransients);  [CE]  cannot  find  symbol  isTransients  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isTransients);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  rhs)?  this  :  new  EqualsBuilder(lhs,  rhs,  isEquals,  isTransients);	  return(lhs    ==    rhs)?    this    :    new    EqualsBuilder(lhs,    rhs,    isEquals);    	non-compiled	[CE]  cannot  find  symbol  isTransients	8	None	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null)  {  this.setEquals(true);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
437	[BUG]  [BUGGY]  if(lhs  ==  null)  {  this.setEquals(true);  return  this;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(true);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  this.setEquals(true);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null)  {  this.setEquals(false);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
439	[BUG]  [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)  {  this.setEquals(false);  return  this;  }	  this.setEquals(true);    return    this;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)return  this;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	69	1	replace
441	[BUG]  [BUGGY]  if(lhs  ==  rhs)return  this;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)return  this;	  return(this!=    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	69	1	replace
442	[BUG]  [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(True);  this.setEquals(false);  [CE]  cannot  find  symbol  True  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(true);    this.setEquals(false);  this.setEquals(True);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(true);        this.setEquals(false);    this.setEquals(True);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol  True	31	None	add
443	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    if(lhs    ==    null    ||    rhs    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	118	3	replace
444	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]              NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    if(lhs    ==    null    ||    rhs    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	118	3	replace
445	[BUG]  [BUGGY]  this.setEquals(lhs?  this  :  null;  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs?  this  :  null;	  return(this    ==    lhs)?    this    :    null;    this.setEquals(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  ')'  expected	64	None	replace
446	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);  [CE]  cannot  find  symbol  AppendsBuilder  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    AppendsBuilder.append(lhs,  rhs);  append(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol  AppendsBuilder	47	None	add
447	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  testTransients(lhs,  rhs);  this.setEquals(false);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  testTransients(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    testTransients(lhs,  rhs);  this.setEquals(false);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
448	[BUG]  [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          this.setEquals(false);    this.setEquals(false);  this.setEquals(false);  this.setEquals(false;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                this.setEquals(false);        this.setEquals(false);    this.setEquals(false);  this.setEquals(false;	  	non-compiled	[CE]  ')'  expected	16	None	add
449	[BUG]  [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  setEquals(lhs,  rhs);  this.setEquals(false);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    this.setEquals(false);  setEquals(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        this.setEquals(false);    setEquals(lhs,  rhs);  this.setEquals(false);	  	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	102	None	add
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  AssertionFailedError  	79	3	replace
451	[BUG]  [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }	          append(lhs,    rhs);    if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    	compilable	  [FE]  AssertionFailedError  	79	3	replace
452	[BUG]  [BUGGY]  this.setEquals(lhs  ==  false);  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs  ==  false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs  ==  false);	  this.setEquals(lhs    ==    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	112	None	replace
453	[BUG]  [BUGGY]  if(this  ==  lhs)return  this;  if(lhs  ==  null)return  this;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(this  ==  lhs)return  this;  if(lhs  ==  null)return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(this  ==  lhs)return  this;  if(lhs  ==  null)return  this;  }	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
454	[BUG]  [BUGGY]  if(lhs  ==  null)return  this;  if(rhs  ==  null)return  this;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  null)return  this;  if(rhs  ==  null)return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  null)return  this;  if(rhs  ==  null)return  this;  }	  return(this    ==    lhs)?    this    :    null;    if(this    ==    lhs)?    this    :    null;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
455	[BUG]  [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  rhs);  [CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  rhs);  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null)?  this  :  new  EqualsBuilder(lhs,  rhs,  this,  rhs);	  return(lhs    ==    null)?    this    :    new    EqualsBuilder(lhs,    rhs,    this);    	non-compiled	[CE]  constructor  EqualsBuilder  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	37	None	replace
456	[BUG]  [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals());  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	AppendsBuilder.append(lhs,  rhs,  false,  lhs.isEquals());	  AppendsBuilder.append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
457	[BUG]  [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(false);  return  this;  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    if(lhs  ==  null  ||  rhs!=  null)  {  this.setEquals(false);  return  this;  }  this.setEquals(false);  return  this;  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        if(lhs    ==    null    ||    rhs!=    null)    {    this.setEquals(false);    return    this;    }    this.setEquals(false);  return  this;	  	non-compiled	[CE]  unreachable  statement	78	None	add
458	[BUG]  [BUGGY]  append0(lhs,  rhs);  Append1(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append0(lhs,  rhs);  Append1(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append0(lhs,  rhs);  Append1(lhs,  rhs);	          append(lhs,    rhs);    Append(lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
459	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  append(lhs,  rhs);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	13	replace
460	[BUG]  [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  append(lhs,  rhs);  }  [FE]  NullPointerException  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  append(lhs,  rhs);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  append(lhs,  rhs);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	13	replace
461	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	12	replace
462	[BUG]  [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	12	replace
463	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	12	replace
464	[BUG]  [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [FE]  NullPointerException  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs.getClass()!=  rhs.getClass())  {  append(lhs,  rhs);  }  else  {  Class  lhsClass  =  lhs.getClass();  this.setEquals(false);  }	          append(lhs,    rhs);    append(lhs,    rhs);    	compilable	  [FE]  NullPointerException  	48	12	replace
465	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	50	13	add
466	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    if(lhs  ==  null)  {  append(lhs,  rhs);  append(lhs,  rhs);  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	50	13	add
467	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	50	13	add
468	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  append(lhs,  rhs);  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    append(lhs,  rhs);  this.setEquals(false);	  	compilable	  [FE]  StackOverflowError  	50	13	add
469	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	50	13	add
470	[BUG]  [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]          append(lhs,    rhs);    append(lhs,  rhs);  this.setEquals(false);  if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	                append(lhs,        rhs);        append(lhs,    rhs);    this.setEquals(false);    if(lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  }	  	compilable	  [FE]  StackOverflowError  	50	13	add
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(lhs  ==  rhs)  {  return  this;  }	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
472	[BUG]  [BUGGY]  if(lhs  ==  rhs)  {  return  this;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(lhs  ==  rhs)  {  return  this;  }  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(lhs  ==  rhs)  {  return  this;  }	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
473	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(this!=  lhs)return  this;  if(lhs  ==  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	if(this!=  lhs)return  this;  if(lhs  ==  null)return  this;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
474	[BUG]  [BUGGY]  if(this!=  lhs)return  this;  if(lhs  ==  null)return  this;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  if(this!=  lhs)return  this;  if(lhs  ==  null)return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	if(this!=  lhs)return  this;  if(lhs  ==  null)return  this;	  return(this!=    lhs)?    this    :    null;    if(this!=    lhs)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
475	[BUG]  [BUGGY]  this.setEquals(lhs, " ");  this.setEquals(false);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(lhs, " ");  this.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(lhs, " ");  this.setEquals(false);	          this.setEquals(true);    this.setEquals(false);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	32	None	replace
476	[BUG]  [BUGGY]  this.setEquals(false);  Iterator.setEquals(false);  [CE]  cannot  find  symbol  Iterator  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this.setEquals(false);  Iterator.setEquals(false);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this.setEquals(false);  Iterator.setEquals(false);	          this.setEquals(true);    This.setEquals(true);    	non-compiled	[CE]  cannot  find  symbol  Iterator	33	None	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	add	return(lhs  ==  null  ||  rhs  ==  null)?  this  :  new  EqualsBuilder();	  return(lhs    ==    null)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
478	[BUG]  [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  new  EqualsBuilder();  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  return(lhs  ==  null  ||  rhs  ==  null)?  this  :  new  EqualsBuilder();  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	return(lhs  ==  null  ||  rhs  ==  null)?  this  :  new  EqualsBuilder();	  return(lhs    ==    null)?    this    :    null;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
479	[BUG]  [BUGGY]  append(lhs,  rhs,  this.setEquals(true);  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  this.setEquals(true);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  this.setEquals(true);	  append(lhs,    rhs,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
480	[BUG]  [BUGGY]  This.setEquals(false);  return  this;  [CE]  cannot  find  symbol  This  [FE]          NullPointerException      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  This.setEquals(false);  return  this;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	This.setEquals(false);  return  this;	  return    null;    if(lhs    ==    null    ||    rhs    ==    null)    {    this.setEquals(false);    return    this;    }    	non-compiled	[CE]  cannot  find  symbol  This	116	None	replace
481	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  lhs.isEquals());  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  lhs.isEquals());  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  lhs.isEquals());	  append(lhs,    rhs,    false);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
482	[BUG]  [BUGGY]  append(lhs,  rhs,  false,  lhs);  [CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)  [FE]          StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  append(lhs,  rhs,  false,  lhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	append(lhs,  rhs,  false,  lhs);	  append(lhs,    rhs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Object,boolean,Object)	40	None	replace
483	[BUG]  [BUGGY]  this  =(lhs!=  rhs)?  this  :  null;  [CE]  cannot  assign  a  value  to  final  variable  this  [FE]            AssertionFailedError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  this  =(lhs!=  rhs)?  this  :  null;  [BUGGY]      }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	this  =(lhs!=  rhs)?  this  :  null;	  return(this!=    lhs)?    this    :    null;    this    =(this!=    lhs)?    this    :    null;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  this	88	None	replace
484	[BUG]  [BUGGY]  setEquals(lhs,  rhs);  [CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      public  EqualsBuilder  append(Object  lhs,  Object  rhs)  {  if  (isEquals  ==  false)  {  return  this;  }  if  (lhs  ==  rhs)  {      [BUGGY]  setEquals(lhs,  rhs);  [BUGGY]      return  this;  }  if  (lhs  ==  null  ||  rhs  ==  null)  {  this.setEquals(false);  return  this;  }  Class  lhsClass  =  lhs.getClass();  if  (!lhsClass.isArray())  {  isEquals  =  lhs.equals(rhs);  }  else  if  (lhs.getClass()  !=  rhs.getClass())  {  [CLASS]  EqualsBuilder  [METHOD]  append  [RETURN_TYPE]  EqualsBuilder  Object  lhs  Object  rhs  [VARIABLES]  Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  	projects/Lang48/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	0.2773500981126146	372	372	1	replace	setEquals(lhs,  rhs);	          append(lhs,    rhs);    setEquals(lhs,    rhs);    	non-compiled	[CE]  method  setEquals  in  class  EqualsBuilder  cannot  be  applied  to  given  types;	52	None	replace
