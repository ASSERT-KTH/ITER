bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  <  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  <  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    <    a)    {    }  else  if(x  <  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	75	None	add
2	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  else  if(x  <  a)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  a)  {  else  if(x  <  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    <    a)    {    else  if(x  <  a)  {	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
3	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  <  }  else  if(x  <  a)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  a)  {  <  }  else  if(x  <  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    <    a)    {    <  }  else  if(x  <  a)  {	  	non-compiled	[CE]  illegal  start  of  type	75	None	add
4	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  >=  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  >=  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    <    a)    {    }  else  if(x  >=  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	75	None	add
5	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  a)  {  }  else  if(x  >  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    <    a)    {    }  else  if(x  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	75	None	add
6	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,int,double)  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon);	  ret    =    1.0    -    regularizedGammaQ(a,    x,    0,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,int,double)	66	None	replace
7	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  DEFAULT_EPSILON)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >=  1.0  &&  a  <  =  DEFAULT_EPSILON)  {	  }    else    if    (x    >=    1.0    &&    a    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]  }  else  if  (x  >  1.0  &&  a  <  =  a)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if  (x  >  1.0  &&  a  <  =  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >  1.0  &&  a  <  =  a)  {	  }    else    if    (x    >=    1.0    &&    a    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  }  else  if  (x  ==  1.0  &&  a  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if  (x  ==  1.0  &&  a  <  =  DEFAULT_EPSILON)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  ==  1.0  &&  a  <  =  DEFAULT_EPSILON)  {	  }    else    if    (x    >=    1.0    &&    a    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  ==  0.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  ==  0.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
11	[BUG]  [BUGGY]  }  else  if(x  ==  0.0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  ==  0.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  ==  0.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  1.0  &&  a  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  >  1.0  &&  a  <  1.0)  {	  }    else    if(x    >    1.0    &&    a    <    =    1.0)    {    	compilable	  [FE]  AssertionFailedError  	100	1	replace
13	[BUG]  [BUGGY]  }  else  if(x  >  1.0  &&  a  <  1.0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  1.0  &&  a  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >  1.0  &&  a  <  1.0)  {	  }    else    if(x    >    1.0    &&    a    <    =    1.0)    {    	compilable	  [FE]  AssertionFailedError  	100	1	replace
14	[BUG]  [BUGGY]  }  else  if(x  <  1.0  &&  a  <  =  1.0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  <  1.0  &&  a  <  =  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  1.0  &&  a  <  =  1.0)  {	  }    else    if(x    >    1.0    &&    a    <    =    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
15	[BUG]  [BUGGY]  }  else  if(a  >  1.0  &&  x  <  =  1.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(a  >  1.0  &&  x  <  =  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  >  1.0  &&  x  <  =  1.0)  {	  }    else    if(x    >    1.0    &&    a    <    =    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
16	[BUG]  [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  =  1.0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  =  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0  &&  a  <  =  1.0)  {	  }    else    if(x    >    1.0    &&    a    <    =    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
17	[BUG]  [BUGGY]  }  else  if(x  >  a)  {  }  else  if(x  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  a)  {  }  else  if(x  >  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    >    a)    {    }  else  if(x  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	98	None	add
18	[BUG]  [BUGGY]  }  else  if(x  >  a)  {  else  if(x  >  a)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  a)  {  else  if(x  >  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    >    a)    {    else  if(x  >  a)  {	  	non-compiled	[CE]  'else'  without  'if'	98	None	add
19	[BUG]  [BUGGY]  }  else  if(x  >  a)  {  <  }  else  if(x  >  a)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  a)  {  <  }  else  if(x  >  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    >    a)    {    <  }  else  if(x  >  a)  {	  	non-compiled	[CE]  illegal  start  of  type	98	None	add
20	[BUG]  [BUGGY]  }  else  if(x  >  a)  {  }  else  if(y  >  a)  {  [CE]  cannot  find  symbol  y  [FE]          AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  >  a)  {  }  else  if(y  >  a)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(x    >    a)    {    }  else  if(y  >  a)  {	  	non-compiled	[CE]  cannot  find  symbol  y	98	None	add
21	[BUG]  [BUGGY]  ret  =  epsilon  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  epsilon  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  epsilon  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);	          ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret    =    periodicizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  Double.POSITIVE_INFINITY;	  ret    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	94	1	replace
23	[BUG]  [BUGGY]  ret  =  Double.POSITIVE_INFINITY;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  Double.POSITIVE_INFINITY;	  ret    =    Double.NaN;    	compilable	  [FE]  AssertionFailedError  	94	1	replace
24	[BUG]  [BUGGY]  double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]        AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	          ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    double    ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	97	None	replace
25	[BUG]  [BUGGY]  n  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  n  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	n  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	          ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    double    ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	97	None	replace
26	[BUG]  [BUGGY]  ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);	          ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    double    ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
27	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  an  [FE]                      AssertionFailedError      [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon,  maxIterations);  [BUGGY]      }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon,  maxIterations);	  ret    =    1.0    -    regularizedGammaQ(a,    x,    an,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  an	48	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(a  >=  1.0  &&  x  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  >=  1.0  &&  x  <  1.0)  {	  }    else    if(x    >=    1.0    &&    a    <    1.0)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
29	[BUG]  [BUGGY]  }  else  if(a  >=  1.0  &&  x  <  1.0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(a  >=  1.0  &&  x  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  >=  1.0  &&  x  <  1.0)  {	  }    else    if(x    >=    1.0    &&    a    <    1.0)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  ==  1.0  &&  a  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  ==  1.0  &&  a  <  1.0)  {	  }    else    if(x    >=    1.0    &&    a    <    1.0)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
31	[BUG]  [BUGGY]  }  else  if(x  ==  1.0  &&  a  <  1.0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;      [BUGGY]  }  else  if(x  ==  1.0  &&  a  <  1.0)  {  [BUGGY]        ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  ==  1.0  &&  a  <  1.0)  {	  }    else    if(x    >=    1.0    &&    a    <    1.0)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
