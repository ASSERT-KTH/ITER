bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _longest  =  0L;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  0L;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  0L;	  _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
3	[BUG]  [BUGGY]  _lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _length    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
4	[BUG]  [BUGGY]  int  _length  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _length  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _length  =  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _length    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
5	[BUG]  [BUGGY]  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_shortest  =  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
7	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
8	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
9	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
10	[BUG]  [BUGGY]  int  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
11	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
12	[BUG]  [BUGGY]  _longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
13	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest  -  _shortest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
14	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
15	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _shortest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _shortest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
16	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  _longest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  /  _longest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
17	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  int  _longest  =  0;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
18	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
19	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  *  _longest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  *  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  *  _longest);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
20	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  _longest);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  _longest);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
21	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  _longest)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	if(_longest  ==  _longest)  {	  if(lookup    ==    null)    {    if(lookup!=    null)    {    	compilable	  [FE]  AssertionError  	13	1	replace
23	[BUG]  [BUGGY]  if(_longest  ==  _longest)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  _longest)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  _longest)  {	  if(lookup    ==    null)    {    if(lookup!=    null)    {    	compilable	  [FE]  AssertionError  	13	1	replace
24	[BUG]  [BUGGY]  int  sz  =  lookupMap.size()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  sz  =  lookupMap.size()  -  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  lookupMap.size()  -  1;	  int    sz    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  int  sz  =  lookupMap.size()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  sz  =  lookupMap.size()  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  lookupMap.size()  +  1;	  int    sz    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  int  sz  =  lookupMap.size()  -  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  sz  =  lookupMap.size()  -  2;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  lookupMap.size()  -  2;	  int    sz    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);	  this.lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
29	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
30	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	7	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
32	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
34	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	7	1	add
35	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
36	[BUG]  [BUGGY]  if(lookup!=  null)  {  If(lookup  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup!=  null)  {  If(lookup  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup!=  null)  {  If(lookup  ==  null)  {	  if(lookup    ==    null)    {    If(lookup    ==    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
37	[BUG]  [BUGGY]  final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
38	[BUG]  [BUGGY]  final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	final  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
39	[BUG]  [BUGGY]  int  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _shortest  =  Integer.MIN_VALUE;	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
40	[BUG]  [BUGGY]  _lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
41	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
42	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest,  _shortest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest,  _shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest,  _shortest);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
43	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
44	[BUG]  [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
45	[BUG]  [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  1;	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
46	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  Object>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  Object>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  Object>();  _shortest  =  Integer.MIN_VALUE;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE;  int  _longest  =  0;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
48	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
49	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);	  LookupMap    lookupMap    =    new    LinkedHashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
50	[BUG]  [BUGGY]  if(lookup!=  null)  {  If(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup!=  null)  {  If(this.lookupMap!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup!=  null)  {  If(this.lookupMap!=  null)  {	  if(this.lookupMap!=    null)    {    If(this.lookupMap!=    null)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
51	[BUG]  [BUGGY]  if(lookup!=  null)  {  If(this.lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup!=  null)  {  If(this.lookupMap  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup!=  null)  {  If(this.lookupMap  ==  null)  {	  if(this.lookupMap!=    null)    {    If(this.lookupMap!=    null)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
52	[BUG]  [BUGGY]  if(lookup  ==  null)  {  If(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  If(this.lookupMap!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  If(this.lookupMap!=  null)  {	  if(this.lookupMap!=    null)    {    If(this.lookupMap!=    null)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
53	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  0;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
54	[BUG]  [BUGGY]  int  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _longest  =  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MIN_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	10	1	add
57	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MIN_VALUE;    _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	10	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MIN_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	10	1	add
59	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MIN_VALUE;    _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	10	1	add
60	[BUG]  [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]          _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;  int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	                _longest        =        Integer.MAX_VALUE;        _longest    =    Integer.MIN_VALUE;    int  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;	  	non-compiled	[CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	10	None	add
61	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);	  LookupMap    lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
62	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  =  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  =  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(),    _shortest;    	non-compiled	[CE]  ';'  expected	40	None	replace
63	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _longest;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _longest;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _longest;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(),    _shortest;    	non-compiled	[CE]  ';'  expected	40	None	replace
64	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest  +  1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(),    _shortest;    	non-compiled	[CE]  ';'  expected	40	None	replace
65	[BUG]  [BUGGY]  _longest  =  Long.MAX_VALUE;  _longest  =  Long.MIN_VALUE;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Long.MAX_VALUE;  _longest  =  Long.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Long.MAX_VALUE;  _longest  =  Long.MIN_VALUE;	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
67	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MIN_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
68	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
69	[BUG]  [BUGGY]  _longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Long.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
70	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  2);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  2);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
71	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  +  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
72	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest  -  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
73	[BUG]  [BUGGY]  if(this.lookup  ==  null)  {  [CE]  cannot  find  symbol  lookup  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(this.lookup  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookup  ==  null)  {	  if(this.lookup!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  lookup	56	None	replace
74	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _shortest  =  Integer.MAX_VALUE  +  1;	  int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
75	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MIN_VALUE  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MIN_VALUE  +  1;	  _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  _longest  =  Long.MIN_VALUE;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Long.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Long.MIN_VALUE;	  _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
77	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE  +  2;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE  +  2;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE  +  2;	  _longest    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
78	[BUG]  [BUGGY]  Integer  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  Integer  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	Integer  _longest  =  Integer.MAX_VALUE;	          _longest    =    Integer.MAX_VALUE;    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  _shortest  =  Integer.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _shortest  =  Integer.MAX_VALUE  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_shortest  =  Integer.MAX_VALUE  +  1;	  _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
80	[BUG]  [BUGGY]  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;	  _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
81	[BUG]  [BUGGY]  if(lookup  ==  null)  {  If(this.lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  If(this.lookupMap  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  If(this.lookupMap  ==  null)  {	  if(this.lookupMap    ==    null)    {    If(this.lookupMap    ==    null)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
82	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _length);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _length);	  this.lookupMap    =    lookupMap.get(_shortest,    _length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
83	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_length,  _shortest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_length,  _shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_length,  _shortest);	  this.lookupMap    =    lookupMap.get(_shortest,    _length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
84	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _length  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _length  -  1);	  this.lookupMap    =    lookupMap.get(_shortest,    _length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
85	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
86	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
87	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  +  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  +  1);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
88	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MIN_VALUE;  _longest  =  Integer.MAX_VALUE;	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
89	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest);	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
90	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
91	[BUG]  [BUGGY]  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;	  int    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
92	[BUG]  [BUGGY]  Integer  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  Integer  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	Integer  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	  int    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
93	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
94	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
95	[BUG]  [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
96	[BUG]  [BUGGY]  if(lookup!=  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup!=  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup!=  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  Null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  Null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	Null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	  null    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
98	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
99	[BUG]  [BUGGY]  If(lookup  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  If(lookup  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	If(lookup  ==  null)  {	  if(this.lookupMap    ==    null)    {    If(this.lookupMap    ==    null)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
100	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _length    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
101	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE  +  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE  +  1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _length    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
102	[BUG]  [BUGGY]  if(LookupTranslator.isStatic(lookup))  {  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(LookupTranslator.isStatic(lookup))  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(LookupTranslator.isStatic(lookup))  {	  if(this.lookupMap!=    null)    {    if(this.lookupMap!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
103	[BUG]  [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;  }	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
104	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
106	[BUG]  [BUGGY]  if(LookupMap.class!=  getClass())  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(LookupMap.class!=  getClass())  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(LookupMap.class!=  getClass())  {	  if(lookup    ==    null)    {    If(lookup    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
107	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
108	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
109	[BUG]  [BUGGY]  _shortest  =  Long.MAX_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _shortest  =  Long.MAX_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_shortest  =  Long.MAX_VALUE;	  _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
110	[BUG]  [BUGGY]  if(LookupMap.lookup!=  null)  {  [CE]  cannot  find  symbol  LookupMap  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(LookupMap.lookup!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(LookupMap.lookup!=  null)  {	  if(this.lookup!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  LookupMap	56	None	replace
111	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();	  LookupMap    lookupMap    =    new    LinkedHashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
112	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
113	[BUG]  [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
114	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap!=  null)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  long  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  long  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	long  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	if(lookupMap!=  null)  {	  if(this.lookupMap    ==    null)    {    if(lookupMap    ==    null)    {    	compilable	  [FE]  AssertionError  	50	1	replace
117	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap!=  null)  {	  if(this.lookupMap    ==    null)    {    if(lookupMap    ==    null)    {    	compilable	  [FE]  AssertionError  	50	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	if(lookupMap  ==  null)  {	  if(this.lookupMap    ==    null)    {    if(lookupMap    ==    null)    {    	compilable	  [FE]  AssertionError  	50	2	replace
119	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap  ==  null)  {	  if(this.lookupMap    ==    null)    {    if(lookupMap    ==    null)    {    	compilable	  [FE]  AssertionError  	50	2	replace
120	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
121	[BUG]  [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;  }	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
122	[BUG]  [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  }	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
123	[BUG]  [BUGGY]  if(lookup!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
124	[BUG]  [BUGGY]  if(lookup  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
125	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  0,  Integer.MIN_VALUE;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  0,  Integer.MIN_VALUE;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  0,  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  ';'  expected	16	None	replace
126	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
127	[BUG]  [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  null)  {  _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    int    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
128	[BUG]  [BUGGY]  this.lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  ArrayHashMap  <  CharSequence,  CharSequence>();	  this.lookupMap    =    new    LinkedHashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
129	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE  /  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE  /  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE  /  1;	  _longest    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
130	[BUG]  [BUGGY]  if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
131	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap  ==  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
132	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap!=  null)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
133	[BUG]  [BUGGY]  if(lookup  ==  null)  {  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }	  int    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
134	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
135	[BUG]  [BUGGY]  _longest  =  1;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  1;	  _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
136	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  1L);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  1L);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  1L);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
137	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  0);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  0);	  this.lookupMap    =    lookupMap.get(_shortest,    _length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
138	[BUG]  [BUGGY]  Integer  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  Integer  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	Integer  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
139	[BUG]  [BUGGY]  if(_longest  <  0)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  <  0)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  <  0)  {  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  }	  int    _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
140	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
141	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);	  LookupMap    lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
142	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
143	[BUG]  [BUGGY]  if(LookupMap.class.isAssignableFrom(lookup))  {  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(LookupMap.class.isAssignableFrom(lookup))  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(LookupMap.class.isAssignableFrom(lookup))  {	  if(this.lookupMap!=    null)    {    if(this.lookupMap!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  <  _longest)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	if(_longest  <  _longest)  {	  if(lookup    ==    null)    {    if(lookup!=    null)    {    	compilable	  [FE]  AssertionError  	13	2	replace
145	[BUG]  [BUGGY]  if(_longest  <  _longest)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  <  _longest)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  <  _longest)  {	  if(lookup    ==    null)    {    if(lookup!=    null)    {    	compilable	  [FE]  AssertionError  	13	2	replace
146	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
147	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.remove(_longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.remove(_longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.remove(_longest);	  this.lookupMap    =    lookupMap.get(_longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
148	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
149	[BUG]  [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>(_shortest);	  this.lookupMap    =    new    LinkedHashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
150	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
151	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MIN_VALUE;  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MIN_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  else  {  _longest  =  Integer.MIN_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
152	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
153	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);	  this.lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
154	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
155	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  /  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
156	[BUG]  [BUGGY]  int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  0;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  0;	  int    sz    =    this.lookupMap.size()    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
157	[BUG]  [BUGGY]  int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =(this.lookupMap!=  null)?  this.lookupMap.size()  :  1;	  int    sz    =    this.lookupMap.size()    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
158	[BUG]  [BUGGY]  If(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  If(this.lookupMap!=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	If(this.lookupMap!=  null)  {	  if(this.lookupMap!=    null)    {    If(this.lookupMap!=    null)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
159	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest  -  1);	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
160	[BUG]  [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  <  Integer.MIN_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
161	[BUG]  [BUGGY]  if(_longest  <  Integer.MIN_VALUE  ||  _longest  >  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  <  Integer.MIN_VALUE  ||  _longest  >  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  <  Integer.MIN_VALUE  ||  _longest  >  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
162	[BUG]  [BUGGY]  if(this.lookup  >=  null)  {  [CE]  cannot  find  symbol  lookup  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(this.lookup  >=  null)  {  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookup  >=  null)  {	  if(this.lookup!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  lookup	56	None	replace
163	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  -  1;  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _shortest  =  Integer.MAX_VALUE  -  1;	  int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
164	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  }	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
165	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(this);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(this);  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(this);	          _longest    =    Integer.MAX_VALUE;    _longest    =    Integer.MAX_VALUE;    this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(    lookup);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
166	[BUG]  [BUGGY]  if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;      [BUGGY]  if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup  ==  null)  {  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
