bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  _shortest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_shortest  =  Integer.MAX_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  -  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  sz  =  this.lookupMap.size()  -  1;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  this.lookupMap.size()  -  1;	      int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  sz  =  this.lookupMap.size()  +  1;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  this.lookupMap.size()  +  1;	      int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  int  sz  =  lookupMap.size();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  sz  =  lookupMap.size();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  lookupMap.size();	      int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	5	1	add
8	[BUG]  [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;	  	compilable	  [FE]  AssertionError  	5	1	add
9	[BUG]  [BUGGY]      _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  [CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  int  _longest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	        _longest    =    Integer.MAX_VALUE;    int  _longest  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	5	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	5	1	add
11	[BUG]  [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionError  	5	1	add
12	[BUG]  [BUGGY]  if(lookup  ==  null)  {  if(lookup  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(lookup  ==  null)  {  if(lookup  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup    ==    null)    {    if(lookup  ==  null)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
13	[BUG]  [BUGGY]  if(lookup  ==  null)  {  if(lookup!=  null)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(lookup  ==  null)  {  if(lookup!=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup    ==    null)    {    if(lookup!=  null)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
14	[BUG]  [BUGGY]  if(lookup  ==  null)  {  If(lookup  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(lookup  ==  null)  {  If(lookup  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup    ==    null)    {    If(lookup  ==  null)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
15	[BUG]  [BUGGY]  if(lookup  ==  null)  {  if(lookup  >=  null)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(lookup  ==  null)  {  if(lookup  >=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(lookup    ==    null)    {    if(lookup  >=  null)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
16	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  _longest  =  0;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  _longest  =  0;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  0;	      _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  _longest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MIN_VALUE;	      _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  _longest  =  Integer.MAX_VALUE  +  1;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	_longest  =  Integer.MAX_VALUE  +  1;	      _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap    ==    null)    {    if(this.lookupMap  ==  null)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
21	[BUG]  [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap!=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap    ==    null)    {    if(this.lookupMap!=  null)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
22	[BUG]  [BUGGY]  if(this.lookupMap  ==  null)  {  If(this.lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap  ==  null)  {  If(this.lookupMap  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap    ==    null)    {    If(this.lookupMap  ==  null)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
23	[BUG]  [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap  >=  null)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap  ==  null)  {  if(this.lookupMap  >=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap    ==    null)    {    if(this.lookupMap  >=  null)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
24	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _shortest  =  Integer.MAX_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _longest  =  Integer.MAX_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _length  =  Integer.MAX_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap!=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap!=    null)    {    if(this.lookupMap!=  null)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
30	[BUG]  [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap!=    null)    {    if(this.lookupMap  ==  null)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
31	[BUG]  [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap  >=  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap!=  null)  {  if(this.lookupMap  >=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap!=    null)    {    if(this.lookupMap  >=  null)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
32	[BUG]  [BUGGY]  if(this.lookupMap!=  null)  {  If(this.lookupMap!=  null)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap!=  null)  {  If(this.lookupMap!=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap!=    null)    {    If(this.lookupMap!=  null)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
33	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  int  _longest  =  0;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
36	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _length);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _length);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _length);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
39	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(),  _shortest;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_longest);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_longest);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
44	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  1);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  1);	      this.lookupMap    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	null  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MAX_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	12	None	replace
47	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  int  _longest  =  0;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    int    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
48	[BUG]  [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  int  _shortest  =  Integer.MIN_VALUE;	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    int    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  if(this.lookupMap  ==  null)  {  if(lookupMap  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookupMap  ==  null)  {  if(lookupMap  ==  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookupMap    ==    null)    {    if(lookupMap  ==  null)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
51	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  variable  lookupMap  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();	  	non-compiled	[CE]  variable  lookupMap  might  already  have  been  assigned	5	None	add
53	[BUG]  [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(  lookup);  [CE]  no  suitable  constructor  found  for  HashMap(CharSequence[][])  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]      _longest  =  Integer.MAX_VALUE;  _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(  lookup);  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	        _longest    =    Integer.MAX_VALUE;    _longest  =  Integer.MAX_VALUE;  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(  lookup);	  	non-compiled	[CE]  no  suitable  constructor  found  for  HashMap(CharSequence[][])	5	None	add
54	[BUG]  [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(_longest  ==  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(_longest  ==  Integer.MAX_VALUE)  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
55	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();	      this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  if(this.lookup!=  null)  {  [CE]  cannot  find  symbol  lookup  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  if(this.lookup!=  null)  {  [BUGGY]    for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	if(this.lookup!=  null)  {	  if(this.lookupMap    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  lookup	15	None	replace
57	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  -  2;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  int  sz  =  this.lookupMap.size()  -  2;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	int  sz  =  this.lookupMap.size()  -  2;	      int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
59	[BUG]  [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;    [BUGGY]  LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;  [BUGGY]    if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	LookupMap  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _shortest  =  Integer.MIN_VALUE;	      LookupMap    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _shortest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
