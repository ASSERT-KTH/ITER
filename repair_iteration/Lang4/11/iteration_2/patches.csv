bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  char)sz).setLength(0);  [CE]  char  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  char)sz).setLength(0);  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  char)sz).setLength(0);	  ((    int)sz).setLength(0);    	non-compiled	[CE]  char  cannot  be  dereferenced	90	None	replace
2	[BUG]  [BUGGY]  ((  int)sz).add(_longest,  _longest);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  int)sz).add(_longest,  _longest);  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).add(_longest,  _longest);	  ((    int)sz).setLength(0);    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
3	[BUG]  [BUGGY]  ((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;  }	  _shortest    =    sz    +    1;    ((    _longest    +    sz)>    seq[1])    {    _shortest    =    sz    +    1;    	non-compiled	[CE]  not  a  statement	197	None	replace
4	[BUG]  [BUGGY]  ((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  _longest  +  sz)>  seq[0])  {  _shortest  =  sz  +  1;	  _shortest    =    sz    +    1;    ((    _longest    +    sz)>    seq[1])    {    _shortest    =    sz    +    1;    	non-compiled	[CE]  not  a  statement	197	None	replace
5	[BUG]  [BUGGY]  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }	  _shortest    =    sz    +    1;    ((    _longest    +    sz)>    seq[1])    {    _shortest    =    sz    +    1;    	non-compiled	[CE]  not  a  statement	197	None	replace
6	[BUG]  [BUGGY]  ((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;	  _shortest    =    -1;    ((    longest    <    <    _longest)&&(sz    >    0)||(sz    <    =    0)))    {    _shortest    =    -1;    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
7	[BUG]  [BUGGY]  ((  longest  <  <  6)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  longest  <  <  6)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  longest  <  <  6)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;	  _shortest    =    -1;    ((    longest    <    <    _longest)&&(sz    >    0)||(sz    <    =    0)))    {    _shortest    =    -1;    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
8	[BUG]  [BUGGY]  ((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  }  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  longest  <  <  3)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  }	  _shortest    =    -1;    ((    longest    <    <    _longest)&&(sz    >    0)||(sz    <    =    0)))    {    _shortest    =    -1;    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
9	[BUG]  [BUGGY]  int  _shortest  =  sz  -  1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  int  _shortest  =  sz  -  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  _shortest  =  sz  -  1;	  _shortest    =    sz    -    1;    int    _shortest    =    sz    -    1;    	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	38	None	replace
10	[BUG]  [BUGGY]  Integer  _shortest  =  sz  -  1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  Integer  _shortest  =  sz  -  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	Integer  _shortest  =  sz  -  1;	  _shortest    =    sz    -    1;    int    _shortest    =    sz    -    1;    	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	38	None	replace
11	[BUG]  [BUGGY]  int  _shortest  =  0;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  int  _shortest  =  0;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  _shortest  =  0;	  _shortest    =    0;    int    _shortest    =    0;    	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	65	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  Integer.MAX_VALUE;	  _shortest    =    0;    int    _shortest    =    0;    	compilable	  [FE]  AssertionError  	65	2	replace
13	[BUG]  [BUGGY]  _shortest  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  Integer.MAX_VALUE;	  _shortest    =    0;    int    _shortest    =    0;    	compilable	  [FE]  AssertionError  	65	2	replace
14	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  _shortest  =  Integer.MAX_VALUE;	  _shortest    =    0;    int    _shortest    =    0;    	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	65	None	replace
15	[BUG]  [BUGGY]  ||  _longest  >  _longest)  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ||  _longest  >  _longest)  {  _longest  =  sz;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||  _longest  >  _longest)  {  _longest  =  sz;  }	          if(sz    >    _longest)    {    _longest    =    sz;    }    if(Sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
16	[BUG]  [BUGGY]  ||  _longest  <  _longest)  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ||  _longest  <  _longest)  {  _longest  =  sz;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||  _longest  <  _longest)  {  _longest  =  sz;  }	          if(sz    >    _longest)    {    _longest    =    sz;    }    if(Sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
17	[BUG]  [BUGGY]  (_shortest  =  sz  -  1);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  (_shortest  =  sz  -  1);  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	(_shortest  =  sz  -  1);	  _shortest    =    sz    -    1;    (_shortest    =    sz    -    1);    	non-compiled	[CE]  not  a  statement	141	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        sz        -        1;        _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;	  	compilable	  [FE]  AssertionError  	32	1	add
19	[BUG]  [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        sz        -        1;        _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;	  	compilable	  [FE]  AssertionError  	32	1	add
20	[BUG]  [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  int  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  int  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        sz        -        1;        _shortest    =    sz    -    1;    int  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	32	None	add
21	[BUG]  [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1);  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        sz        -        1;        _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1);	  	non-compiled	[CE]  ';'  expected	32	None	add
22	[BUG]  [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        sz        -        1;        _shortest    =    sz    -    1;    _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  }	  	non-compiled	[CE]  <identifier>  expected	32	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	178	1	add
24	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	178	1	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _longest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	178	1	add
26	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _longest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	178	1	add
27	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	non-compiled	[CE]  not  a  statement	178	None	add
28	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _  longest  =  _longest;  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _  longest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  <  sz)  {  _  longest  =  _longest;  }	  	non-compiled	[CE]  cannot  find  symbol	178	None	add
29	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _langest  =  _longest;  }  [CE]  cannot  find  symbol  _langest  [FE]            AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  <  sz)  {  _langest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    <    sz)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  <  sz)  {  _langest  =  _longest;  }	  	non-compiled	[CE]  cannot  find  symbol  _langest	178	None	add
30	[BUG]  [BUGGY]  ||(sz  <  _longest))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ||(sz  <  _longest))  {  _longest  =  sz;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  <  _longest))  {  _longest  =  sz;  }	          if(sz    >    _longest)    {    _longest    =    sz;    }    If(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
31	[BUG]  [BUGGY]  ((  int)sz).longest  =  _longest  +  1;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  int)sz).longest  =  _longest  +  1;  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).longest  =  _longest  +  1;	  ((    long)sz).longest    =    _longest    +    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
32	[BUG]  [BUGGY]  ((  long)sz).longest  =  _longest  *  _longest  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  long)sz).longest  =  _longest  *  _longest  +  1;  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).longest  =  _longest  *  _longest  +  1;	  ((    long)sz).longest    =    _longest    +    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	60	None	replace
33	[BUG]  [BUGGY]  ((  long)sz).longest  =  _longest  +  2;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  long)sz).longest  =  _longest  +  2;  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).longest  =  _longest  +  2;	  ((    long)sz).longest    =    _longest    +    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	60	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	180	1	add
35	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	180	1	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _longest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	180	1	add
37	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _longest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _longest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	180	1	add
38	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	non-compiled	[CE]  not  a  statement	180	None	add
39	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _hort  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [CE]  cannot  find  symbol  _hort  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _hort  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _hort  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	non-compiled	[CE]  cannot  find  symbol  _hort	180	None	add
40	[BUG]  [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  >  0)  {  _  longest  =  _longest;  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }  _shortest  =  _longest;  if(  _longest  >  0)  {  _  longest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        if(    _longest    >    0)    {    _shortest    =    _longest;    }    _shortest  =  _longest;  if(  _longest  >  0)  {  _  longest  =  _longest;  }	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
41	[BUG]  [BUGGY]  ((  int)sz).longest  =  _shortest;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  ((  int)sz).longest  =  _shortest;  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).longest  =  _shortest;	  ((    long)sz).longest    =    _shortest;    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  int  _sz  =  seq[1].length();  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	int  _sz  =  seq[1].length();	  int    sz    =    seq[1].length()    -    1;    	compilable	  [FE]  AssertionError  	100	2	replace
43	[BUG]  [BUGGY]  int  _sz  =  seq[1].length();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  int  _sz  =  seq[1].length();  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  _sz  =  seq[1].length();	  int    sz    =    seq[1].length()    -    1;    	compilable	  [FE]  AssertionError  	100	2	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _longest  =  seq[0].length();  _longest  =  seq[1].length();  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  seq[0].length();  _longest  =  seq[1].length();	          _longest    =    seq[1].length();    _longest    =    seq[3].length();    	compilable	  [FE]  AssertionError  	80	2	replace
45	[BUG]  [BUGGY]  _longest  =  seq[0].length();  _longest  =  seq[1].length();  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _longest  =  seq[0].length();  _longest  =  seq[1].length();  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[0].length();  _longest  =  seq[1].length();	          _longest    =    seq[1].length();    _longest    =    seq[3].length();    	compilable	  [FE]  AssertionError  	80	2	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _shortest  =  _longest;  _longest  =  _longest;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        _longest    =    _longest;    _shortest  =  _longest;  _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	128	1	add
47	[BUG]  [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _shortest  =  _longest;  _longest  =  _longest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _shortest  =  _longest;  _longest  =  _longest;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        _longest    =    _longest;    _shortest  =  _longest;  _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	128	1	add
48	[BUG]  [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  int  _shortest  =  _longest;  _longest  =  _longest;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  int  _shortest  =  _longest;  _longest  =  _longest;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        _longest    =    _longest;    int  _shortest  =  _longest;  _longest  =  _longest;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	128	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _longest  =  _longest;  _longest  =  _longest;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest        =        _longest;        _longest    =    _longest;    _longest  =  _longest;  _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	128	1	add
50	[BUG]  [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _longest  =  _longest;  _longest  =  _longest;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _longest  =  _longest;  _longest  =  _longest;  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        _longest    =    _longest;    _longest  =  _longest;  _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	128	1	add
51	[BUG]  [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _shortest  =  _longest;  _longest  =  _longest;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {      [BUGGY]  _shortest    =    _longest;    _longest  =  _longest;  _shortest  =  _longest;  _longest  =  _longest;  }  [BUGGY]      }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest        =        _longest;        _longest    =    _longest;    _shortest  =  _longest;  _longest  =  _longest;  }	  	non-compiled	[CE]  <identifier>  expected	128	None	add
