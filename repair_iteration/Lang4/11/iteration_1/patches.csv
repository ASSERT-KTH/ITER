bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  +  2;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	2	replace
2	[BUG]  [BUGGY]  _shortest  =  sz  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  +  2;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	2	replace
3	[BUG]  [BUGGY]  _shortest  =  sz  +  1L;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1L;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  +  1L;	  _shortest    =    sz    +    1;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  3;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  +  3;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	2	replace
5	[BUG]  [BUGGY]  _shortest  =  sz  +  3;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  3;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  +  3;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	2	replace
6	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >=  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(sz  >=  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
7	[BUG]  [BUGGY]  _shortest  =(sz  >=  0)?  -1  :  -1;  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >=  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(sz  >=  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
8	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  <  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(sz  <  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
9	[BUG]  [BUGGY]  _shortest  =(sz  <  0)?  -1  :  -1;  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  <  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(sz  <  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
10	[BUG]  [BUGGY]  _sz  =  seq[1].length();  [CE]  cannot  find  symbol  _sz  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _sz  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_sz  =  seq[1].length();	      sz    =    seq[1].length();    	non-compiled	[CE]  cannot  find  symbol  _sz	16	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  seq[1].length();	      sz    =    seq[1].length();    	compilable	  [FE]  AssertionError  	16	1	replace
12	[BUG]  [BUGGY]  _shortest  =  seq[1].length();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  seq[1].length();	      sz    =    seq[1].length();    	compilable	  [FE]  AssertionError  	16	1	replace
13	[BUG]  [BUGGY]  _z  =  seq[1].length();  [CE]  cannot  find  symbol  _z  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _z  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_z  =  seq[1].length();	      sz    =    seq[1].length();    	non-compiled	[CE]  cannot  find  symbol  _z	16	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest  *  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  _longest  *  sz;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	1	replace
15	[BUG]  [BUGGY]  _shortest  =  _longest  *  sz;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest  *  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  _longest  *  sz;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	1	replace
16	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  /  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  /  _longest;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  ArithmeticException  	26	2	replace
17	[BUG]  [BUGGY]  _shortest  =  sz  /  _longest;  [FE]  ArithmeticException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  /  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  /  _longest;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  ArithmeticException  	26	2	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  *  _longest  +  1;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	1	replace
19	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  *  _longest  +  1;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  *  2;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	2	replace
21	[BUG]  [BUGGY]  _shortest  =  sz  *  2;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  *  2;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	2	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    sz    *    _longest;    _shortest  =  sz  *  _longest;	  	compilable	  [FE]  AssertionError  	25	1	add
23	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  _longest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    *    _longest;    _shortest  =  sz  *  _longest;	  	compilable	  [FE]  AssertionError  	25	1	add
24	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest;  int  _shortest  =  sz  *  _longest;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  int  _shortest  =  sz  *  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    *    _longest;    int  _shortest  =  sz  *  _longest;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	25	None	add
25	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest;  (_shortest  =  sz  *  _longest);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  (_shortest  =  sz  *  _longest);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    *    _longest;    (_shortest  =  sz  *  _longest);	  	non-compiled	[CE]  not  a  statement	25	None	add
26	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest;  (_shortest  =  sz  *  _longest;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  (_shortest  =  sz  *  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    *    _longest;    (_shortest  =  sz  *  _longest;	  	non-compiled	[CE]  ')'  expected	25	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  _shortest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    _shortest  =  _longest;	  	compilable	  [FE]  AssertionError  	5	1	add
28	[BUG]  [BUGGY]  _shortest  =  _longest;  _shortest  =  _longest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  _shortest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    _shortest  =  _longest;	  	compilable	  [FE]  AssertionError  	5	1	add
29	[BUG]  [BUGGY]  _shortest  =  _longest;  int  _shortest  =  _longest;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  int  _shortest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    int  _shortest  =  _longest;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	5	None	add
30	[BUG]  [BUGGY]  _shortest  =  _longest;  (_shortest  =  _longest;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  (_shortest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    (_shortest  =  _longest;	  	non-compiled	[CE]  ')'  expected	5	None	add
31	[BUG]  [BUGGY]  _shortest  =  _longest;  (_shortest  =  _longest);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  (_shortest  =  _longest);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    (_shortest  =  _longest);	  	non-compiled	[CE]  not  a  statement	5	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    sz    -    1;    _shortest  =  sz  -  1;	  	compilable	  [FE]  AssertionError  	23	1	add
33	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    _shortest  =  sz  -  1;	  	compilable	  [FE]  AssertionError  	23	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    sz    -    1;    _shortest  =  sz  -  1;  this.lookupMap.put(seq[0],  seq[1]);	  	compilable	  [FE]  AssertionError  	23	1	add
35	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  this.lookupMap.put(seq[0],  seq[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  _shortest  =  sz  -  1;  this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    _shortest  =  sz  -  1;  this.lookupMap.put(seq[0],  seq[1]);	  	compilable	  [FE]  AssertionError  	23	1	add
36	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ||  sz  >  _longest)  {  _shortest  =  sz  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ||  sz  >  _longest)  {  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ||  sz  >  _longest)  {  _shortest  =  sz  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
37	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ||  sz  >  _longest)  {  _shortest  =  sz  -  1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ||  sz  >  _longest)  {  _shortest  =  sz  -  1;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ||  sz  >  _longest)  {  _shortest  =  sz  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
38	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  int  _shortest  =  sz  -  1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  int  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    int  _shortest  =  sz  -  1;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	23	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        this.lookupMap.put(seq[0],  seq[1]);	  	compilable	  [FE]  AssertionError  	9	1	add
40	[BUG]  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(seq[0],  seq[1]);	  	compilable	  [FE]  AssertionError  	9	1	add
41	[BUG]  [BUGGY]      this.lookupMap.put(sz[0],  sz[1]);  [CE]  array  required,  but  int  found  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(sz[0],  sz[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(sz[0],  sz[1]);	  	non-compiled	[CE]  array  required,  but  int  found	9	None	add
42	[BUG]  [BUGGY]      this.lookupMap.put(sz[0],  seq[1]);  [CE]  array  required,  but  int  found  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(sz[0],  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(sz[0],  seq[1]);	  	non-compiled	[CE]  array  required,  but  int  found	9	None	add
43	[BUG]  [BUGGY]      this.lookupMap.put(seq[0],  sz);  [CE]  no  suitable  method  found  for  put(CharSequence,int)  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(seq[0],  sz);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(seq[0],  sz);	  	non-compiled	[CE]  no  suitable  method  found  for  put(CharSequence,int)	9	None	add
44	[BUG]  [BUGGY]      this.lookupMap.put(sz,  seq[0].length());  [CE]  no  suitable  method  found  for  put(int,int)  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(sz,  seq[0].length());  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(sz,  seq[0].length());	  	non-compiled	[CE]  no  suitable  method  found  for  put(int,int)	9	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >  0)?  _longest  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  >  0)?  _longest  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	2	replace
46	[BUG]  [BUGGY]  _shortest  =(_longest  >  0)?  _longest  :  _shortest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >  0)?  _longest  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  >  0)?  _longest  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	2	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >=  0)?  0  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  >=  0)?  0  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	1	replace
48	[BUG]  [BUGGY]  _shortest  =(_longest  >=  0)?  0  :  _shortest;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >=  0)?  0  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  >=  0)?  0  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  sz;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  sz;	      if(sz    >    _longest)    {    _longest    =    sz;    }    	compilable	  [FE]  AssertionError  	28	2	replace
50	[BUG]  [BUGGY]  _longest  =  sz;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  sz;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  sz;	      if(sz    >    _longest)    {    _longest    =    sz;    }    	compilable	  [FE]  AssertionError  	28	2	replace
51	[BUG]  [BUGGY]  ||(sz  >  _longest  &&  sz  <  =  Long.MAX_VALUE))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  _longest  &&  sz  <  =  Long.MAX_VALUE))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  _longest  &&  sz  <  =  Long.MAX_VALUE))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
52	[BUG]  [BUGGY]  ||(sz  >  _longest  &&  sz  <  =  _longest))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  _longest  &&  sz  <  =  _longest))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  _longest  &&  sz  <  =  _longest))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
53	[BUG]  [BUGGY]  _longest  =  seq[1][sz],  lookupMap.length();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1][sz],  lookupMap.length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1][sz],  lookupMap.length();	      _longest    =    seq[1][sz].length();    	non-compiled	[CE]  ';'  expected	20	None	replace
54	[BUG]  [BUGGY]  _longest  =  seq[1][sz].length()  +  1;  [CE]  array  required,  but  CharSequence  found  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1][sz].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1][sz].length()  +  1;	      _longest    =    seq[1][sz].length();    	non-compiled	[CE]  array  required,  but  CharSequence  found	20	None	replace
55	[BUG]  [BUGGY]  _longest  =  seq[0][sz].length();  [CE]  array  required,  but  CharSequence  found  [FE]                  AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[0][sz].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[0][sz].length();	      _longest    =    seq[1][sz].length();    	non-compiled	[CE]  array  required,  but  CharSequence  found	20	None	replace
56	[BUG]  [BUGGY]  int  sz  =  seq[2].length()  +  1;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[2].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[2].length()  +  1;	      int    sz    =    seq[2].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	29	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  1;	  _shortest    =    0;    	compilable	  [FE]  AssertionError  	2	1	replace
58	[BUG]  [BUGGY]  _shortest  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  1;	  _shortest    =    0;    	compilable	  [FE]  AssertionError  	2	1	replace
59	[BUG]  [BUGGY]  _shortest  =  0L;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0L;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  0L;	  _shortest    =    0;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
60	[BUG]  [BUGGY]  ((  long)sz).longest  =  _longest  +  1;  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).longest  =  _longest  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).longest  =  _longest  +  1;	      ((    long)sz).longest    =    _longest;    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
61	[BUG]  [BUGGY]  ((  int)sz).longest  =  _longest;  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  int)sz).longest  =  _longest;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).longest  =  _longest;	      ((    long)sz).longest    =    _longest;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
62	[BUG]  [BUGGY]  ((  long)sz).longest  =  _shortest;  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).longest  =  _shortest;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).longest  =  _shortest;	      ((    long)sz).longest    =    _longest;    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    0;    _shortest  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
64	[BUG]  [BUGGY]  _shortest  =  0;  _shortest  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    _shortest  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
65	[BUG]  [BUGGY]  _shortest  =  0;  int  _shortest  =  0;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  int  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    int  _shortest  =  0;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	1	None	add
66	[BUG]  [BUGGY]  _shortest  =  0;  ||  _shortest  =  0;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  ||  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    ||  _shortest  =  0;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
67	[BUG]  [BUGGY]  _shortest  =  0;  (_shortest  =  0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  (_shortest  =  0);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    (_shortest  =  0);	  	non-compiled	[CE]  not  a  statement	1	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _shortest;    _shortest  =  _shortest;	  	compilable	  [FE]  AssertionError  	7	1	add
69	[BUG]  [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    _shortest  =  _shortest;	  	compilable	  [FE]  AssertionError  	7	1	add
70	[BUG]  [BUGGY]  _shortest  =  _shortest;  int  _shortest  =  _shortest;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  int  _shortest  =  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    int  _shortest  =  _shortest;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	7	None	add
71	[BUG]  [BUGGY]  _shortest  =  _shortest;  ||  _shortest  <  =  _shortest;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  ||  _shortest  <  =  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    ||  _shortest  <  =  _shortest;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
72	[BUG]  [BUGGY]  _shortest  =  _shortest;  (_shortest  =  _shortest;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  (_shortest  =  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    (_shortest  =  _shortest;	  	non-compiled	[CE]  ')'  expected	7	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        _longest    =    seq[1].length();    _longest  =  seq[1].length();	  	compilable	  [FE]  AssertionError  	18	1	add
74	[BUG]  [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[1].length();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    _longest  =  seq[1].length();	  	compilable	  [FE]  AssertionError  	18	1	add
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[2].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        _longest    =    seq[1].length();    _longest  =  seq[2].length();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	add
76	[BUG]  [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[2].length();  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[2].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    _longest  =  seq[2].length();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        _longest    =    seq[1].length();    _longest  =  seq[0].length();	  	compilable	  [FE]  AssertionError  	18	1	add
78	[BUG]  [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[0].length();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    _longest  =  seq[0].length();	  	compilable	  [FE]  AssertionError  	18	1	add
79	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[3].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        _longest    =    seq[1].length();    _longest  =  seq[3].length();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	add
80	[BUG]  [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[3].length();  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[3].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    _longest  =  seq[3].length();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	add
81	[BUG]  [BUGGY]  _sz  =  seq[0].length();  [CE]  cannot  find  symbol  _sz  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _sz  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_sz  =  seq[0].length();	      sz    =    seq[0].length();    	non-compiled	[CE]  cannot  find  symbol  _sz	13	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  seq[0].length();	      sz    =    seq[0].length();    	compilable	  [FE]  AssertionError  	13	1	replace
83	[BUG]  [BUGGY]  _shortest  =  seq[0].length();  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  seq[0].length();	      sz    =    seq[0].length();    	compilable	  [FE]  AssertionError  	13	1	replace
84	[BUG]  [BUGGY]  _z  =  seq[0].length();  [CE]  cannot  find  symbol  _z  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _z  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_z  =  seq[0].length();	      sz    =    seq[0].length();    	non-compiled	[CE]  cannot  find  symbol  _z	13	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    -1;    _shortest  =  -1;	  	compilable	  [FE]  AssertionError  	21	1	add
86	[BUG]  [BUGGY]  _shortest  =  -1;  _shortest  =  -1;  [FE]  AssertionError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    _shortest  =  -1;	  	compilable	  [FE]  AssertionError  	21	1	add
87	[BUG]  [BUGGY]  _shortest  =  -1;  int  _shortest  =  -1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  int  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    int  _shortest  =  -1;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	21	None	add
88	[BUG]  [BUGGY]  _shortest  =  -1;  (_shortest  =  -1);  [CE]  not  a  statement  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  (_shortest  =  -1);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    (_shortest  =  -1);	  	non-compiled	[CE]  not  a  statement	21	None	add
89	[BUG]  [BUGGY]  _shortest  =  -1;  _shortest  =  -;  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  _shortest  =  -;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    _shortest  =  -;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
90	[BUG]  [BUGGY]  ((  int)sz).setLength(0);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  int)sz).setLength(0);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).setLength(0);	      ((    long)sz).setLength(0);    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
91	[BUG]  [BUGGY]  ((  long)sz).setLength(1);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLength(1);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLength(1);	      ((    long)sz).setLength(0);    	non-compiled	[CE]  long  cannot  be  dereferenced	15	None	replace
92	[BUG]  [BUGGY]  ((  short)sz).setLength(0);  [CE]  short  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  short)sz).setLength(0);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  short)sz).setLength(0);	      ((    long)sz).setLength(0);    	non-compiled	[CE]  short  cannot  be  dereferenced	15	None	replace
93	[BUG]  [BUGGY]  ((  long)sz).setLongest(_longest,  _shortest);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLongest(_longest,  _shortest);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLongest(_longest,  _shortest);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
94	[BUG]  [BUGGY]  ((  long)sz).setLongest(_shortest);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLongest(_shortest);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLongest(_shortest);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
95	[BUG]  [BUGGY]  ((  long)sz).setLongest(least,  _longest);  [CE]  cannot  find  symbol  least  [FE]                  AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLongest(least,  _longest);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLongest(least,  _longest);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  cannot  find  symbol  least	14	None	replace
96	[BUG]  [BUGGY]  ((  int)sz).setLongest(_longest);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  int)sz).setLongest(_longest);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  int)sz).setLongest(_longest);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
97	[BUG]  [BUGGY]  int  sz  =  seq[0].length()  +  1;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[0].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[0].length()  +  1;	      int    sz    =    seq[0].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	12	None	replace
98	[BUG]  [BUGGY]  int  sz  =  seq[0].length()  -  1;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]            AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[0].length()  -  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[0].length()  -  1;	      int    sz    =    seq[0].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	12	None	replace
99	[BUG]  [BUGGY]  int  sz  =  seq[1].length()  +  1;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[1].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[1].length()  +  1;	      int    sz    =    seq[1].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	11	None	replace
100	[BUG]  [BUGGY]  int  sz  =  seq[1].length()  -  1;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[1].length()  -  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[1].length()  -  1;	      int    sz    =    seq[1].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	11	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  if(sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        if(sz    >    _longest)    {    _longest    =    sz;    }    if(sz  >  _longest)  {  _longest  =  sz;  }	  	compilable	  [FE]  AssertionError  	27	1	add
102	[BUG]  [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  if(sz  >  _longest)  {  _longest  =  sz;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  if(sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        if(sz    >    _longest)    {    _longest    =    sz;    }    if(sz  >  _longest)  {  _longest  =  sz;  }	  	compilable	  [FE]  AssertionError  	27	1	add
103	[BUG]  [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  If(sz  >  _longest)  {  _longest  =  sz;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  If(sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        if(sz    >    _longest)    {    _longest    =    sz;    }    If(sz  >  _longest)  {  _longest  =  sz;  }	  	non-compiled	[CE]  ';'  expected	27	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  while(sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        if(sz    >    _longest)    {    _longest    =    sz;    }    while(sz  >  _longest)  {  _longest  =  sz;  }	  	compilable	  [FE]  AssertionError  	27	1	add
105	[BUG]  [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  while(sz  >  _longest)  {  _longest  =  sz;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  while(sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        if(sz    >    _longest)    {    _longest    =    sz;    }    while(sz  >  _longest)  {  _longest  =  sz;  }	  	compilable	  [FE]  AssertionError  	27	1	add
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  _shortest  =  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    sz    +    1;    _shortest  =  sz  +  1;	  	compilable	  [FE]  AssertionError  	3	1	add
107	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  _shortest  =  sz  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  _shortest  =  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    _shortest  =  sz  +  1;	  	compilable	  [FE]  AssertionError  	3	1	add
108	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  int  _shortest  =  sz  +  1;  [CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  int  _shortest  =  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    int  _shortest  =  sz  +  1;	  	non-compiled	[CE]  variable  _shortest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	3	None	add
109	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  (_shortest  =  sz  +  1);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  (_shortest  =  sz  +  1);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    (_shortest  =  sz  +  1);	  	non-compiled	[CE]  not  a  statement	3	None	add
110	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  _shortest  =  sz  +  1;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  _shortest  =  sz  +  1;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    _shortest  =  sz  +  1;  }	  	non-compiled	[CE]  <identifier>  expected	3	None	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  seq[1].length()  +  1;	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
112	[BUG]  [BUGGY]  _longest  =  seq[1].length()  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1].length()  +  1;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1].length()  +  1;	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  seq[0].length();	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
114	[BUG]  [BUGGY]  _longest  =  seq[0].length();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[0].length();	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1].length()  +  2;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  seq[1].length()  +  2;	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
116	[BUG]  [BUGGY]  _longest  =  seq[1].length()  +  2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1].length()  +  2;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1].length()  +  2;	      _longest    =    seq[1].length();    	compilable	  [FE]  AssertionError  	19	2	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  -  2;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
118	[BUG]  [BUGGY]  _shortest  =  sz  -  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  2;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  -  2;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
119	[BUG]  [BUGGY]  _shortest  =  sz  -  1L;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1L;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  -  1L;	  _shortest    =    sz    -    1;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  /  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  /  1;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
121	[BUG]  [BUGGY]  _shortest  =  sz  /  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  /  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  /  1;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
122	[BUG]  [BUGGY]      _longest  =  seq[1].length();  int  _longest  =  seq[1].length();  [CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  int  _longest  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    int  _longest  =  seq[1].length();	  	non-compiled	[CE]  variable  _longest  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	18	None	add
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >  0)?  -1  :  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(sz  >  0)?  -1  :  _longest;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
124	[BUG]  [BUGGY]  _shortest  =(sz  >  0)?  -1  :  _longest;  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >  0)?  -1  :  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(sz  >  0)?  -1  :  _longest;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >=  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  >=  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
126	[BUG]  [BUGGY]  _shortest  =(_longest  >=  0)?  -1  :  -1;  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >=  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  >=  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
127	[BUG]  [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  if(Sz  >  _longest)  {  _longest  =  sz;  }  [CE]  cannot  find  symbol  Sz  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      if(sz  >  _longest)  {  _longest  =  sz;  }  if(Sz  >  _longest)  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        if(sz    >    _longest)    {    _longest    =    sz;    }    if(Sz  >  _longest)  {  _longest  =  sz;  }	  	non-compiled	[CE]  cannot  find  symbol  Sz	27	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  _longest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	5	1	add
129	[BUG]  [BUGGY]  _shortest  =  _longest;  _longest  =  _longest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  _longest  =  _longest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    _longest  =  _longest;	  	compilable	  [FE]  AssertionError  	5	1	add
130	[BUG]  [BUGGY]  int  sz  =  seq[1].length()  +  2;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[1].length()  +  2;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[1].length()  +  2;	      int    sz    =    seq[1].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	11	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >  0)?  _longest  :  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(sz  >  0)?  _longest  :  sz;	  _shortest    =    _longest;    	compilable	  [FE]  AssertionError  	6	1	replace
132	[BUG]  [BUGGY]  _shortest  =(sz  >  0)?  _longest  :  sz;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  >  0)?  _longest  :  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(sz  >  0)?  _longest  :  sz;	  _shortest    =    _longest;    	compilable	  [FE]  AssertionError  	6	1	replace
133	[BUG]  [BUGGY]  _longest  =  seq[1][0].length();  [CE]  array  required,  but  CharSequence  found  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1][0].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1][0].length();	      _longest    =    seq[1][sz].length();    	non-compiled	[CE]  array  required,  but  CharSequence  found	20	None	replace
134	[BUG]  [BUGGY]  _shortest  =  _shortest;  _shortest  =  _hort;  [CE]  cannot  find  symbol  _hort  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  _shortest  =  _hort;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    _shortest  =  _hort;	  	non-compiled	[CE]  cannot  find  symbol  _hort	7	None	add
135	[BUG]  [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest.length;  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest.length;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    _shortest  =  _shortest.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	add
136	[BUG]  [BUGGY]  _shortest  =  0;  (_shortest  =  0;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  (_shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    (_shortest  =  0;	  	non-compiled	[CE]  ')'  expected	1	None	add
137	[BUG]  [BUGGY]  ||(sz  >  _longest))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  _longest))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  _longest))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
138	[BUG]  [BUGGY]  ||(sz  >  0  &&  sz  <  seq.length))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  0  &&  sz  <  seq.length))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  0  &&  sz  <  seq.length))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
139	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  (_shortest  =  sz  +  1;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  (_shortest  =  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    (_shortest  =  sz  +  1;	  	non-compiled	[CE]  ')'  expected	3	None	add
140	[BUG]  [BUGGY]  ((  long)sz).setLongest(_longest  +  1);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLongest(_longest  +  1);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLongest(_longest  +  1);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
141	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  (_shortest  =  sz  -  1);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  (_shortest  =  sz  -  1);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    (_shortest  =  sz  -  1);	  	non-compiled	[CE]  not  a  statement	23	None	add
142	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  (_shortest  =  sz  -  1;  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  (_shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    (_shortest  =  sz  -  1;	  	non-compiled	[CE]  ')'  expected	23	None	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  -  1  +  1;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
144	[BUG]  [BUGGY]  _shortest  =  sz  -  1  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  -  1  +  1;	  _shortest    =    sz    -    1;    	compilable	  [FE]  AssertionError  	24	1	replace
145	[BUG]  [BUGGY]  _Sz  =  seq[1].length();  [CE]  cannot  find  symbol  _Sz  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _Sz  =  seq[1].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_Sz  =  seq[1].length();	      sz    =    seq[1].length();    	non-compiled	[CE]  cannot  find  symbol  _Sz	16	None	replace
146	[BUG]  [BUGGY]  int  sz  =  seq[3].length();  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  int  sz  =  seq[3].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	int  sz  =  seq[3].length();	      int    sz    =    seq[2].length();    	non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	29	None	replace
147	[BUG]  [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[1.length();  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      _longest  =  seq[1].length();  _longest  =  seq[1.length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        _longest    =    seq[1].length();    _longest  =  seq[1.length();	  	non-compiled	[CE]  ']'  expected	18	None	add
148	[BUG]  [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;	  	non-compiled	[CE]  >  expected	1	None	add
149	[BUG]  [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  0;  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  0;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  0;	  	non-compiled	[CE]  >  expected	1	None	add
150	[BUG]  [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;  }  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  _shortest  =  0;  }	  	non-compiled	[CE]  >  expected	1	None	add
151	[BUG]  [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  return  lookupMap.get(sz);  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  0;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  return  lookupMap.get(sz);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    0;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  longest)))  {  return  lookupMap.get(sz);	  	non-compiled	[CE]  >  expected	1	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  4;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  *  4;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	2	replace
153	[BUG]  [BUGGY]  _shortest  =  sz  *  4;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  4;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  *  4;	  _shortest    =    sz    *    _longest;    	compilable	  [FE]  AssertionError  	26	2	replace
154	[BUG]  [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;  [CE]  >  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;	  	non-compiled	[CE]  >  expected	21	None	add
155	[BUG]  [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [CE]  >  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  <  =  0)))  {  _shortest  =  -1;	  	non-compiled	[CE]  >  expected	21	None	add
156	[BUG]  [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0))  {  _shortest  =  -1;  [CE]  >  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0))  {  _shortest  =  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0))  {  _shortest  =  -1;	  	non-compiled	[CE]  >  expected	21	None	add
157	[BUG]  [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;  }  [CE]  >  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  -1;  ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    -1;    ((  longest  <  <  _longest)&&(sz  >  0)||(sz  >  0)))  {  _shortest  =  -1;  }	  	non-compiled	[CE]  >  expected	21	None	add
158	[BUG]  [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _shortest;  _shortest  =  _shortest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _shortest;    _shortest  =  _shortest;  }	  	non-compiled	[CE]  <identifier>  expected	7	None	add
159	[BUG]  [BUGGY]      this.lookupMap.put(sz,  seq[1]);  [CE]  no  suitable  method  found  for  put(int,CharSequence)  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(sz,  seq[1]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(sz,  seq[1]);	  	non-compiled	[CE]  no  suitable  method  found  for  put(int,CharSequence)	9	None	add
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(seq[1],  seq[2]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	        this.lookupMap.put(seq[1],  seq[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	add
161	[BUG]  [BUGGY]      this.lookupMap.put(seq[1],  seq[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]      this.lookupMap.put(seq[1],  seq[2]);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	        this.lookupMap.put(seq[1],  seq[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	add
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =  sz  *  1;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	1	replace
163	[BUG]  [BUGGY]  _shortest  =  sz  *  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =  sz  *  1;	  _shortest    =    sz    +    1;    	compilable	  [FE]  AssertionError  	4	1	replace
164	[BUG]  [BUGGY]  ((  long)sz).longest  =  _longest,  _longest;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).longest  =  _longest,  _longest;  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).longest  =  _longest,  _longest;	      ((    long)sz).longest    =    _longest;    	non-compiled	[CE]  ';'  expected	17	None	replace
165	[BUG]  [BUGGY]  ||(sz  >  _longest  &&  sz  <  1))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  _longest  &&  sz  <  1))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  _longest  &&  sz  <  1))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
166	[BUG]  [BUGGY]  ||(sz  >  _longest  &&  sz  <  2))  {  _longest  =  sz;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ||(sz  >  _longest  &&  sz  <  2))  {  _longest  =  sz;  }  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	||(sz  >  _longest  &&  sz  <  2))  {  _longest  =  sz;  }	      if(sz    >    _longest)    {    _longest    =    sz;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[2].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_longest  =  seq[2].length();	      _longest    =    seq[1].length();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
168	[BUG]  [BUGGY]  _longest  =  seq[2].length();  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[2].length();  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[2].length();	      _longest    =    seq[1].length();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  (_longest);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    sz    *    _longest;    _shortest  =  sz  *  (_longest);	  	compilable	  [FE]  AssertionError  	25	1	add
170	[BUG]  [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  (_longest);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  *  _longest;  _shortest  =  sz  *  (_longest);  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    *    _longest;    _shortest  =  sz  *  (_longest);	  	compilable	  [FE]  AssertionError  	25	1	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  <  1)?  0  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  <  1)?  0  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	1	replace
172	[BUG]  [BUGGY]  _shortest  =(_longest  <  1)?  0  :  _shortest;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  <  1)?  0  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  <  1)?  0  :  _shortest;	  _shortest    =    _shortest;    	compilable	  [FE]  AssertionError  	8	1	replace
173	[BUG]  [BUGGY]  _shortest  =(_longest  <  1)?  0L  :  _shortest;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  <  1)?  0L  :  _shortest;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  <  1)?  0L  :  _shortest;	  _shortest    =    _shortest;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
174	[BUG]  [BUGGY]  _longest  =  seq[1][sz],  lookupMap.length());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _longest  =  seq[1][sz],  lookupMap.length());  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_longest  =  seq[1][sz],  lookupMap.length());	      _longest    =    seq[1][sz].length();    	non-compiled	[CE]  ';'  expected	20	None	replace
175	[BUG]  [BUGGY]  ((  longest)sz).setLength(0);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  longest)sz).setLength(0);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  longest)sz).setLength(0);	      ((    long)sz).setLength(0);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  >  _longest)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    if(  _longest  >  _longest)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
177	[BUG]  [BUGGY]  _shortest  =  _longest;  if(  _longest  >  _longest)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  >  _longest)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    if(  _longest  >  _longest)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
179	[BUG]  [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    if(  _longest  <  sz)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
181	[BUG]  [BUGGY]  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  >  0)  {  _shortest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    if(  _longest  >  0)  {  _shortest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _longest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest    =    _longest;    if(  _longest  <  sz)  {  _longest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
183	[BUG]  [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _longest  =  _longest;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  _longest;  if(  _longest  <  sz)  {  _longest  =  _longest;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    _longest;    if(  _longest  <  sz)  {  _longest  =  _longest;  }	  	compilable	  [FE]  AssertionError  	5	1	add
184	[BUG]  [BUGGY]  ((  long)sz).setLongest(_longest,  _longest);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  ((  long)sz).setLongest(_longest,  _longest);  [BUGGY]    _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	((  long)sz).setLongest(_longest,  _longest);	      ((    long)sz).setLongest(_longest);    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
185	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  <  1)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  <  1)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
186	[BUG]  [BUGGY]  _shortest  =(_longest  <  1)?  -1  :  -1;  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  <  1)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  <  1)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
187	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(_longest  >  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
188	[BUG]  [BUGGY]  _shortest  =(_longest  >  0)?  -1  :  -1;  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(_longest  >  0)?  -1  :  -1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(_longest  >  0)?  -1  :  -1;	  _shortest    =    -1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  <  1)?  _longest  :  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	_shortest  =(sz  <  1)?  _longest  :  sz;	  _shortest    =    _longest;    	compilable	  [FE]  AssertionError  	6	1	replace
190	[BUG]  [BUGGY]  _shortest  =(sz  <  1)?  _longest  :  sz;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =(sz  <  1)?  _longest  :  sz;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest  =(sz  <  1)?  _longest  :  sz;	  _shortest    =    _longest;    	compilable	  [FE]  AssertionError  	6	1	replace
191	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
192	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _longest  =  sz  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _longest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _longest  =  sz  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
193	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ((  sz  >  longest)&&(sz  <  =  _longest))  ||(sz  >  longest))  {  _shortest  =  sz  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
194	[BUG]  [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest)))  {  _shortest  =  sz  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  -  1;  ((  sz  >  longest)&&(sz  <  =  _longest)))  {  _shortest  =  sz  -  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    -    1;    ((  sz  >  longest)&&(sz  <  =  _longest)))  {  _shortest  =  sz  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
195	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)  <  =  _longest)?  _shortest  :  sz  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)  <  =  _longest)?  _shortest  :  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    ((  _longest  +  sz)  <  =  _longest)?  _shortest  :  sz  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
196	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  }	  	non-compiled	[CE]  not  a  statement	3	None	add
197	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    ((  _longest  +  sz)>  seq[1])  {  _shortest  =  sz  +  1;	  	non-compiled	[CE]  not  a  statement	3	None	add
198	[BUG]  [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)  <  =  _longest)?  _longest  :  sz  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {    [BUGGY]  _shortest  =  sz  +  1;  ((  _longest  +  sz)  <  =  _longest)?  _longest  :  sz  +  1;  [BUGGY]    }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	_shortest    =    sz    +    1;    ((  _longest  +  sz)  <  =  _longest)?  _longest  :  sz  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
