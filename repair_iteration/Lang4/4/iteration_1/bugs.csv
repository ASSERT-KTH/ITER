bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [CE]  variable  lookupMap  might  already  have  been  assigned  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();		non-compiled	[CE]  variable  lookupMap  might  already  have  been  assigned	8	None	add
2	[BUG]  [BUGGY]    this.lookupMap.put(seq[0],  seq[1]);  [CE]  cannot  find  symbol  seq  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    this.lookupMap.put(seq[0],  seq[1]);		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
3	[BUG]  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);  [CE]  cannot  find  symbol  seq  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
4	[BUG]  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]);  [CE]  cannot  find  symbol  seq  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]);		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
5	[BUG]  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  sz);  [CE]  cannot  find  symbol  seq  [FE]            AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  sz);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  sz);		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
6	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MIN_VALUE;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	add	int  _shortest  =  Integer.MIN_VALUE;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	replace
7	[BUG]  [BUGGY]  int  _shortest  =  Integer.MIN_VALUE;  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MIN_VALUE;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	int  _shortest  =  Integer.MIN_VALUE;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	replace
8	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  +  1;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	add	int  _shortest  =  Integer.MAX_VALUE  +  1;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	replace
9	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  +  1;  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  +  1;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	int  _shortest  =  Integer.MAX_VALUE  +  1;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	add	int  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  AssertionError  	7	1	replace
11	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	int  _shortest  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  AssertionError  	7	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  -  1;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	add	int  _shortest  =  Integer.MAX_VALUE  -  1;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  AssertionError  	7	1	replace
13	[BUG]  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  -  1;  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE  -  1;  [BUGGY]  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	int  _shortest  =  Integer.MAX_VALUE  -  1;	int  _shortest  =  Integer.MAX_VALUE;  	compilable	  [FE]  AssertionError  	7	1	replace
14	[BUG]  [BUGGY]    int  longest  =  this.lookupMap.size();  [CE]  variable  longest  might  not  have  been  initialized  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    int  longest  =  this.lookupMap.size();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    int  longest  =  this.lookupMap.size();		non-compiled	[CE]  variable  longest  might  not  have  been  initialized	8	None	add
15	[BUG]  [BUGGY]    int  longest  =  Integer.MAX_VALUE;  [CE]  variable  longest  might  not  have  been  initialized  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    int  longest  =  Integer.MAX_VALUE;  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    int  longest  =  Integer.MAX_VALUE;		non-compiled	[CE]  variable  longest  might  not  have  been  initialized	8	None	add
16	[BUG]  [BUGGY]    this.lookupMap  =  lookupMap.get(seq);  [CE]  cannot  find  symbol  seq  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    this.lookupMap  =  lookupMap.get(seq);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    this.lookupMap  =  lookupMap.get(seq);		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
17	[BUG]  [BUGGY]    int  longest  =  this.lookupMap.get(seq[0].length());  [CE]  cannot  find  symbol  seq  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    int  longest  =  this.lookupMap.get(seq[0].length());  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    int  longest  =  this.lookupMap.get(seq[0].length());		non-compiled	[CE]  cannot  find  symbol  seq	8	None	add
18	[BUG]  [BUGGY]    int  sz  =  this.lookupMap.size();  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    int  sz  =  this.lookupMap.size();  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    int  sz  =  this.lookupMap.size();		non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	8	None	add
19	[BUG]  [BUGGY]    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(false);  [CE]  no  suitable  constructor  found  for  HashMap(boolean)  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  [BUGGY]    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(false);  [BUGGY]  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	    this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(false);		non-compiled	[CE]  no  suitable  constructor  found  for  HashMap(boolean)	8	None	add
