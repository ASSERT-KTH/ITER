bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.lookupMap.put(sq[0],  seq[1]);  [CE]  cannot  find  symbol  sq  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(sq[0],  seq[1]);  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(sq[0],  seq[1]);	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  cannot  find  symbol  sq	15	None	replace
2	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]  +  1);  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  seq[1]  +  1);	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
3	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));  [CE]  CharSequence  is  abstract;  cannot  be  instantiated  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  CharSequence  is  abstract;  cannot  be  instantiated	15	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	add	  	this.lookupMap.put(seq[0],  seq[1]);  	compilable	  [FE]  AssertionError  	15	2	replace
5	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	  	this.lookupMap.put(seq[0],  seq[1]);  	compilable	  [FE]  AssertionError  	15	2	replace
6	[BUG]  [BUGGY]    ((  CharSequence[][])seq).clear();  [CE]  inconvertible  types  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    ((  CharSequence[][])seq).clear();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    ((  CharSequence[][])seq).clear();		non-compiled	[CE]  inconvertible  types	16	None	add
7	[BUG]  [BUGGY]    ((  CharSequence[])seq).clear();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    ((  CharSequence[])seq).clear();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    ((  CharSequence[])seq).clear();		non-compiled	[CE]  cannot  find  symbol	16	None	add
8	[BUG]  [BUGGY]    final  int  seq[][]  =  lookupMap.get(seq);  [CE]  variable  seq  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    final  int  seq[][]  =  lookupMap.get(seq);  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    final  int  seq[][]  =  lookupMap.get(seq);		non-compiled	[CE]  variable  seq  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	16	None	add
9	[BUG]  [BUGGY]    ((  CharSequence[][])seq).put(sq);  [CE]  cannot  find  symbol  sq  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    ((  CharSequence[][])seq).put(sq);  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    ((  CharSequence[][])seq).put(sq);		non-compiled	[CE]  cannot  find  symbol  sq	16	None	add
10	[BUG]  [BUGGY]    final  int  seq  =  seq.length();  [CE]  variable  seq  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]            AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    final  int  seq  =  seq.length();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    final  int  seq  =  seq.length();		non-compiled	[CE]  variable  seq  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	16	None	add
11	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length());  [CE]  no  suitable  method  found  for  put(CharSequence,int)  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length());  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  seq[1].length());	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  no  suitable  method  found  for  put(CharSequence,int)	15	None	replace
12	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].longest);  [CE]  cannot  find  symbol  longest  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].longest);  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  seq[1].longest);	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  cannot  find  symbol  longest	15	None	replace
13	[BUG]  [BUGGY]    int  sz  =  seq[0].length();  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    int  sz  =  seq[0].length();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    int  sz  =  seq[0].length();		non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	16	None	add
14	[BUG]  [BUGGY]    int  sz  =  seq.length();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    int  sz  =  seq.length();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    int  sz  =  seq.length();		non-compiled	[CE]  cannot  find  symbol	16	None	add
15	[BUG]  [BUGGY]    ((  CharSequence[][])seq).reset();  [CE]  inconvertible  types  [FE]        AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    ((  CharSequence[][])seq).reset();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    ((  CharSequence[][])seq).reset();		non-compiled	[CE]  inconvertible  types	16	None	add
16	[BUG]  [BUGGY]    int  sz  =  seq.length;  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]          AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    int  sz  =  seq.length;  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    int  sz  =  seq.length;		non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	16	None	add
17	[BUG]  [BUGGY]    int  sz  =  seq[1].length();  [CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]    int  sz  =  seq[1].length();  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	    int  sz  =  seq[1].length();		non-compiled	[CE]  variable  sz  is  already  defined  in  constructor  LookupTranslator(CharSequence[]...)	16	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].toString());  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	add	this.lookupMap.put(seq[0],  seq[1].toString());	this.lookupMap.put(seq[0],  seq[1]);  	compilable	  [FE]  AssertionError  	15	1	replace
19	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].toString());  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].toString());  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  seq[1].toString());	this.lookupMap.put(seq[0],  seq[1]);  	compilable	  [FE]  AssertionError  	15	1	replace
20	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length);  [CE]  cannot  find  symbol  length  [FE]      AssertionError  [CONTEXT]  public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length);  [BUGGY]  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	this.lookupMap.put(seq[0],  seq[1].length);	this.lookupMap.put(seq[0],  seq[1]);  	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
