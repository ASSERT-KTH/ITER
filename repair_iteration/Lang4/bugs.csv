bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return 0; [FE] AssertionError [CONTEXT] }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } [BUGGY] return 0; [BUGGY] } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	1.0	83	83	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } [BUGGY] [BUGGY] return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	1.0	83	83	1	add	
3	[BUG] [BUGGY] public LookupTranslator(final CharSequence[]... lookup) { [FE] AssertionError [CONTEXT] [BUGGY] public LookupTranslator(final CharSequence[]... lookup) { [BUGGY] lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	45	45	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	45	45	1	add	
5	[BUG] [BUGGY] lookupMap = new HashMap<CharSequence, CharSequence>(); [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { [BUGGY] lookupMap = new HashMap<CharSequence, CharSequence>(); [BUGGY] int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	46	46	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { [BUGGY] [BUGGY] lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	46	46	1	add	
7	[BUG] [BUGGY] int _shortest = Integer.MAX_VALUE; [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); [BUGGY] int _shortest = Integer.MAX_VALUE; [BUGGY] int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); [BUGGY] [BUGGY] int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	47	47	1	add	
9	[BUG] [BUGGY] int _longest = 0; [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; [BUGGY] int _longest = 0; [BUGGY] if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	48	48	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; [BUGGY] [BUGGY] int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	48	48	1	add	
11	[BUG] [BUGGY] if (lookup != null) { [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; [BUGGY] if (lookup != null) { [BUGGY] for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; [BUGGY] [BUGGY] if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	49	49	1	add	
13	[BUG] [BUGGY] for (final CharSequence[] seq : lookup) { [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { [BUGGY] for (final CharSequence[] seq : lookup) { [BUGGY] this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { [BUGGY] [BUGGY] for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	add	
15	[BUG] [BUGGY] this.lookupMap.put(seq[0], seq[1]); [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { [BUGGY] this.lookupMap.put(seq[0], seq[1]); [BUGGY] final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { [BUGGY] [BUGGY] this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	51	51	1	add	
17	[BUG] [BUGGY] final int sz = seq[0].length(); [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); [BUGGY] final int sz = seq[0].length(); [BUGGY] if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	52	52	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); [BUGGY] [BUGGY] final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	52	52	1	add	
19	[BUG] [BUGGY] if (sz < _shortest) { [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); [BUGGY] if (sz < _shortest) { [BUGGY] _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); [BUGGY] [BUGGY] if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	
21	[BUG] [BUGGY] _shortest = sz; [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { [BUGGY] _shortest = sz; [BUGGY] } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { [BUGGY] [BUGGY] _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	54	54	1	add	
23	[BUG] [BUGGY] if (sz > _longest) { [FE] AssertionError [CONTEXT] lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } [BUGGY] if (sz > _longest) { [BUGGY] _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	56	56	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } [BUGGY] [BUGGY] if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	56	56	1	add	
25	[BUG] [BUGGY] _longest = sz; [FE] AssertionError [CONTEXT] int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { [BUGGY] _longest = sz; [BUGGY] } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	57	57	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { [BUGGY] [BUGGY] _longest = sz; } } } shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	57	57	1	add	
27	[BUG] [BUGGY] shortest = _shortest; [FE] AssertionError [CONTEXT] this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } [BUGGY] shortest = _shortest; [BUGGY] longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	61	61	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } [BUGGY] [BUGGY] shortest = _shortest; longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	61	61	1	add	
29	[BUG] [BUGGY] longest = _longest; [FE] AssertionError [CONTEXT] final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; [BUGGY] longest = _longest; [BUGGY] } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	62	62	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; [BUGGY] [BUGGY] longest = _longest; } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	62	62	1	add	
31	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; [BUGGY] } [BUGGY]  [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	63	63	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; [BUGGY] [BUGGY] } [CLASS] LookupTranslator [METHOD] <init> [RETURN_TYPE] CharSequence[][])  lookup [VARIABLES] CharSequence[] seq boolean HashMap lookupMap int _longest _shortest longest shortest sz CharSequence[][] lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	63	63	1	add	
33	[BUG] [BUGGY] int max = longest; [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { [BUGGY] int max = longest; [BUGGY] if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	70	70	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { [BUGGY] [BUGGY] int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	70	70	1	add	
35	[BUG] [BUGGY] if (index + longest > input.length()) { [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; [BUGGY] if (index + longest > input.length()) { [BUGGY] max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	71	71	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; [BUGGY] [BUGGY] if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	71	71	1	add	
37	[BUG] [BUGGY] for (int i = max; i >= shortest; i--) { [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  [BUGGY] for (int i = max; i >= shortest; i--) { [BUGGY] final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	75	75	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  [BUGGY] [BUGGY] for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	75	75	1	add	
39	[BUG] [BUGGY] final CharSequence subSeq = input.subSequence(index, index + i); [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { [BUGGY] final CharSequence subSeq = input.subSequence(index, index + i); [BUGGY] final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	76	76	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { [BUGGY] [BUGGY] final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	76	76	1	add	
41	[BUG] [BUGGY] final CharSequence result = lookupMap.get(subSeq); [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); [BUGGY] final CharSequence result = lookupMap.get(subSeq); [BUGGY] if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	77	77	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); [BUGGY] [BUGGY] final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	77	77	1	add	
43	[BUG] [BUGGY] if (result != null) { [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); [BUGGY] if (result != null) { [BUGGY] out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	78	78	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; }  for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); [BUGGY] [BUGGY] if (result != null) { out.write(result.toString()); return i; } } return 0; } [CLASS] LookupTranslator [METHOD] translate [RETURN_TYPE] int  CharSequence input final int index Writer out [VARIABLES] CharSequence input result subSeq boolean HashMap lookupMap int _longest _shortest i index longest max shortest sz Writer out  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	78	78	1	add	
