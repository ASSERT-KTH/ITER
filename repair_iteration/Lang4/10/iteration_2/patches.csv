bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  sz  =  seq[0].length()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  final  int  sz  =  seq[0].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	final  int  sz  =  seq[0].length()  +  1;	  final    int    sz    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
2	[BUG]  [BUGGY]  final  int  sz  =  seq[0].length()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  final  int  sz  =  seq[0].length()  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	final  int  sz  =  seq[0].length()  -  1;	  final    int    sz    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
3	[BUG]  [BUGGY]  _sz  =  sz.length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  sz.length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  sz.length;	  _sz    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
4	[BUG]  [BUGGY]  _sz  =  seq.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq.length  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq.length  -  1;	  _sz    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
5	[BUG]  [BUGGY]  _sz  =  seq.length  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq.length  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq.length  +  1;	  _sz    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
6	[BUG]  [BUGGY]  _longest  =  seq[0].length()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _longest  =  seq[0].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_longest  =  seq[0].length()  +  1;	  _longest    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
7	[BUG]  [BUGGY]  sz  =  _longest.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  _longest.length  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  _longest.length  -  1;	  sz    =    _longest.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
8	[BUG]  [BUGGY]  sz  =  sz.length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  sz.length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  sz.length;	  sz    =    _longest.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  sz  =  _longest.length  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  _longest.length  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  _longest.length  +  1;	  sz    =    _longest.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
10	[BUG]  [BUGGY]  sz  =  sz;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  sz;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  sz;	  sz    =    _longest.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
11	[BUG]  [BUGGY]  int  sz  =  seq[3].length()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq[3].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq[3].length()  +  1;	  int    sz    =    seq[3].length();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  if(sz  >  _longest)  {  If(sz  <  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest)  {  If(sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _longest)  {  If(sz  <  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  if(sz  <  _longest)  {  If(sz  >  _longest)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest)  {  If(sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _longest)  {  If(sz  >  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
14	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  If(sz  <  _longest)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  If(sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >=  _longest)  {  If(sz  <  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
15	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  If(sz  <  _longest)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  If(sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  _longest)  {  If(sz  <  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
16	[BUG]  [BUGGY]  final  int  sz  =  seq[2].length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  final  int  sz  =  seq[2].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	final  int  sz  =  seq[2].length()  +  1;	  final    int    sz    =    seq[2].length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
17	[BUG]  [BUGGY]  final  int  sz  =  seq[3].length();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  final  int  sz  =  seq[3].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	final  int  sz  =  seq[3].length();	  final    int    sz    =    seq[2].length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
18	[BUG]  [BUGGY]  if(sz  <  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
19	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
20	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
21	[BUG]  [BUGGY]  if(sz  <  =  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
22	[BUG]  [BUGGY]  if(sz  <  =  _shortest  ||  sz  >  _longest)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _shortest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _shortest  ||  sz  >  _longest)  {	  if(sz    <    =    _shortest)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  _sz  =  seq[0].length()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq[0].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq[0].length()  +  1;	  _sz    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  _shortest  =  seq[1].length()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  seq[1].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  seq[1].length()  +  1;	  _shortest    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
25	[BUG]  [BUGGY]  sz  =  seq[0].length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  seq[0].length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  seq[0].length;	  sz    =    seq[1].length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
26	[BUG]  [BUGGY]  sz  =  seq[1].length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  sz  =  seq[1].length  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	sz  =  seq[1].length  +  1;	  sz    =    seq[1].length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
27	[BUG]  [BUGGY]  int  sz  =  seq.length  /  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length  /  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length  /  1;	  int    sz    =    seq.length    -    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
28	[BUG]  [BUGGY]  int  sz  =  seq.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length  -  1  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length  -  1  +  1;	  int    sz    =    seq.length    -    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
29	[BUG]  [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  if(sz  <  _longest  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  if(sz  <  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    _longest    ||    sz    >    _longest)    {    if(sz  <  _longest  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
30	[BUG]  [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  If(sz  <  _longest  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  If(sz  <  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    _longest    ||    sz    >    _longest)    {    If(sz  <  _longest  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
31	[BUG]  [BUGGY]  if(sz  <  _longest)  {  If(sz  >  _shortest)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest)  {  If(sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _longest)  {  If(sz  >  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
32	[BUG]  [BUGGY]  if(sz  <  =  _longest)  {  If(sz  >  _shortest)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _longest)  {  If(sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _longest)  {  If(sz  >  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  If(sz  >  _shortest)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  If(sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  _shortest)  {  If(sz  >  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
34	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  If(sz  >  _shortest)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  If(sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  _longest)  {  If(sz  >  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
35	[BUG]  [BUGGY]  int  sz  =  seq.length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length()  +  1;	  int    sz    =    seq.length();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
36	[BUG]  [BUGGY]  int  sz  =  seq.length()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length()  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length()  -  1;	  int    sz    =    seq.length();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
37	[BUG]  [BUGGY]  int  sz  =  seq.length()  *  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length()  *  2;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length()  *  2;	  int    sz    =    seq.length();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
38	[BUG]  [BUGGY]  int  sz  =  seq.length  /  2;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length  /  2;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length  /  2;	  int    sz    =    seq.length    -    2;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  <  0  ||  sz  >  0)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
40	[BUG]  [BUGGY]  if(sz  <  0  ||  sz  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  0  ||  sz  >  0)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  <  _longest  ||  sz  >  0)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
42	[BUG]  [BUGGY]  if(sz  <  _longest  ||  sz  >  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _longest  ||  sz  >  0)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
43	[BUG]  [BUGGY]  if(sz  <  =  _longest  ||  sz  >  _longest)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _longest  ||  sz  >  _longest)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _shortest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  <  _shortest  ||  sz  >  _longest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
45	[BUG]  [BUGGY]  if(sz  <  _shortest  ||  sz  >  _longest)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _shortest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _shortest  ||  sz  >  _longest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  <  _longest  ||  sz  >  _shortest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	2	replace
47	[BUG]  [BUGGY]  if(sz  <  _longest  ||  sz  >  _shortest)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _longest  ||  sz  >  _shortest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	2	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  0  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  >  0  ||  sz  >  0)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
49	[BUG]  [BUGGY]  if(sz  >  0  ||  sz  >  0)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  0  ||  sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  0  ||  sz  >  0)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _shortest  ||  sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  >  _shortest  ||  sz  <  _longest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	2	replace
51	[BUG]  [BUGGY]  if(sz  >  _shortest  ||  sz  <  _longest)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _shortest  ||  sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _shortest  ||  sz  <  _longest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	2	replace
52	[BUG]  [BUGGY]  _shortest  =  sz.length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  sz.length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  sz.length;	  _shortest    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
53	[BUG]  [BUGGY]  _shortest  =  sz;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  sz;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  sz;	  _shortest    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
54	[BUG]  [BUGGY]  _shortest  =  seq.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  seq.length  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  seq.length  -  1;	  _shortest    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
55	[BUG]  [BUGGY]  _shortest  =  seq.length  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  seq.length  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  seq.length  +  1;	  _shortest    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
56	[BUG]  [BUGGY]  _shortest  =  seq[0].length()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  seq[0].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  seq[0].length()  +  1;	  _shortest    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  _shortest  =  seq[2].length();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  seq[2].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  seq[2].length();	  _shortest    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
58	[BUG]  [BUGGY]  if(sz  <  0)  {  if(sz  <  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0)  {  if(sz  <  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    0)    {    if(sz  <  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
59	[BUG]  [BUGGY]  if(sz  <  0)  {  if(sz  >=  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0)  {  if(sz  >=  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    0)    {    if(sz  >=  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
60	[BUG]  [BUGGY]  if(sz  <  0)  {  If(sz  <  0)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0)  {  If(sz  <  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    0)    {    If(sz  <  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
61	[BUG]  [BUGGY]  _longest  =  seq[1].length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _longest  =  seq[1].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_longest  =  seq[1].length()  +  1;	  _longest    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
62	[BUG]  [BUGGY]  _longest  =  seq[1].length()  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _longest  =  seq[1].length()  +  2;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_longest  =  seq[1].length()  +  2;	  _longest    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
63	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  if(sz  ==  _shortest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  if(sz  ==  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _shortest)    {    if(sz  ==  _shortest)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
64	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  if(sz  >=  _shortest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  if(sz  >=  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _shortest)    {    if(sz  >=  _shortest)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
65	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  if(sz!=  _shortest)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  if(sz!=  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _shortest)    {    if(sz!=  _shortest)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
66	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  if(sz  >>  _shortest)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  if(sz  >>  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _shortest)    {    if(sz  >>  _shortest)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
67	[BUG]  [BUGGY]  if(sz!=  _longest)  {  If  (sz  ==  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  If  (sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=  _longest)  {  If  (sz  ==  _longest)  {	  if    (sz    >    _longest)    {    If    (sz    >    _longest)    {    	non-compiled	[CE]  ';'  expected	39	None	replace
68	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  If  (sz  >  _longest)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  If  (sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  _longest)  {  If  (sz  >  _longest)  {	  if    (sz    >    _longest)    {    If    (sz    >    _longest)    {    	non-compiled	[CE]  ';'  expected	39	None	replace
69	[BUG]  [BUGGY]  if(sz!=  _longest)  {  If  (sz  >  _longest)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  If  (sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=  _longest)  {  If  (sz  >  _longest)  {	  if    (sz    >    _longest)    {    If    (sz    >    _longest)    {    	non-compiled	[CE]  ';'  expected	39	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  ==  0)  {	  if(sz    <    0)    {    	compilable	  [FE]  AssertionError  	5	2	replace
71	[BUG]  [BUGGY]  if(sz  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  ==  0)  {	  if(sz    <    0)    {    	compilable	  [FE]  AssertionError  	5	2	replace
72	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  if(sz  >=  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  if(sz  >=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >=    _longest)    {    if(sz  >=  _longest)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
73	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  if(sz  >>  _longest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  if(sz  >>  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >=    _longest)    {    if(sz  >>  _longest)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
74	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  if(sz!=  _longest)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  if(sz!=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >=    _longest)    {    if(sz!=  _longest)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
75	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  if(sz  ==  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  if(sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >=    _longest)    {    if(sz  ==  _longest)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
76	[BUG]  [BUGGY]  _seq  =  seq[0].length();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _seq  =  seq[0].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_seq  =  seq[0].length();	  _seq    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
77	[BUG]  [BUGGY]  _seq  =  seq[1].length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _seq  =  seq[1].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_seq  =  seq[1].length()  +  1;	  _seq    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
78	[BUG]  [BUGGY]  _z  =  sz.length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _z  =  sz.length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_z  =  sz.length;	  _z    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
79	[BUG]  [BUGGY]  _z  =  seq.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _z  =  seq.length  -  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_z  =  seq.length  -  1;	  _z    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
80	[BUG]  [BUGGY]  _z  =  seq.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _z  =  seq.length  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_z  =  seq.length  +  1;	  _z    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
81	[BUG]  [BUGGY]  _z  =  seq.length  -  2;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _z  =  seq.length  -  2;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_z  =  seq.length  -  2;	  _z    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
82	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz  ==  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    if(sz  ==  _longest)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
83	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz!=  _longest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz!=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    if(sz!=  _longest)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
84	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz  >=  _longest)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz  >=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    if(sz  >=  _longest)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
85	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz  >>  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz  >>  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    if(sz  >>  _longest)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
86	[BUG]  [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  if(sz  >  _shortest  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  if(sz  >  _shortest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >    _shortest    ||    sz    >    _longest)    {    if(sz  >  _shortest  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
87	[BUG]  [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  If(sz  >  _shortest  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  If(sz  >  _shortest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >    _shortest    ||    sz    >    _longest)    {    If(sz  >  _shortest  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
88	[BUG]  [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  if(sz  >  _hort  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _shortest  ||  sz  >  _longest)  {  if(sz  >  _hort  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >    _shortest    ||    sz    >    _longest)    {    if(sz  >  _hort  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
89	[BUG]  [BUGGY]  if(sz  >  0)  {  if(sz  >  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  0)  {  if(sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >    0)    {    if(sz  >  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
90	[BUG]  [BUGGY]  if(sz  >  0)  {  If(sz  >  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  0)  {  If(sz  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    >    0)    {    If(sz  >  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
91	[BUG]  [BUGGY]  if(sz!=  _longest)  {  if(sz!=  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  if(sz!=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=    _longest)    {    if(sz!=  _longest)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
92	[BUG]  [BUGGY]  if(sz!=  _longest)  {  if(sz  >=  _longest)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  if(sz  >=  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=    _longest)    {    if(sz  >=  _longest)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
93	[BUG]  [BUGGY]  if(sz!=  _longest)  {  if(sz  >>  _longest)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  if(sz  >>  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=    _longest)    {    if(sz  >>  _longest)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
94	[BUG]  [BUGGY]  if(sz!=  _longest)  {  if(sz  ==  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  if(sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=    _longest)    {    if(sz  ==  _longest)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
95	[BUG]  [BUGGY]  _sz  =  seq[1].length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq[1].length()  +  1;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq[1].length()  +  1;	  _sz    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
96	[BUG]  [BUGGY]  _sz  =  seq[1].length()  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq[1].length()  +  2;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq[1].length()  +  2;	  _sz    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
97	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  If(sz  ==  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  If(sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    If(sz  ==  _longest)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
98	[BUG]  [BUGGY]  _sz  =  seq[2].length();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _sz  =  seq[2].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_sz  =  seq[2].length();	  _sz    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
99	[BUG]  [BUGGY]  Integer  sz  =  seq[1].length();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  Integer  sz  =  seq[1].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	Integer  sz  =  seq[1].length();	  int    sz    =    seq[1].length()    +    2;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
100	[BUG]  [BUGGY]  Int  sz  =  seq[1].length();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  Int  sz  =  seq[1].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	Int  sz  =  seq[1].length();	  int    sz    =    seq[1].length()    +    2;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
101	[BUG]  [BUGGY]  if(sz  >  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
102	[BUG]  [BUGGY]  if(sz!=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=  _longest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  >=  _shortest)  {	  if(sz    <    =    _shortest)    {    	compilable	  [FE]  AssertionError  	10	2	replace
104	[BUG]  [BUGGY]  if(sz  >=  _shortest)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >=  _shortest)  {	  if(sz    <    =    _shortest)    {    	compilable	  [FE]  AssertionError  	10	2	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0  ||  _longest  >  seq.length)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  <  0  ||  _longest  >  seq.length)  {	  if(sz    <    0)    {    	compilable	  [FE]  AssertionError  	5	2	replace
106	[BUG]  [BUGGY]  if(sz  <  0  ||  _longest  >  seq.length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  0  ||  _longest  >  seq.length)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  0  ||  _longest  >  seq.length)  {	  if(sz    <    0)    {    	compilable	  [FE]  AssertionError  	5	2	replace
107	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  If(sz  ==  _longest)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  If(sz  ==  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >=  _longest)  {  If(sz  ==  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
108	[BUG]  [BUGGY]  Integer  sz  =  seq[0].length();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  Integer  sz  =  seq[0].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	Integer  sz  =  seq[0].length();	  int    sz    =    seq[0].length()    -    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
109	[BUG]  [BUGGY]  int  sz  =  seq.length  -  1L;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  int  sz  =  seq.length  -  1L;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	int  sz  =  seq.length  -  1L;	  int    sz    =    seq.length    -    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest  ||  sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  >  _longest  ||  sz  >  _shortest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
111	[BUG]  [BUGGY]  if(sz  >  _longest  ||  sz  >  _shortest)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest  ||  sz  >  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _longest  ||  sz  >  _shortest)  {	  if(sz    >    _shortest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	53	1	replace
112	[BUG]  [BUGGY]  if(sz  ==  _shortest)  {  If(sz  ==  _shortest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _shortest)  {  If(sz  ==  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _shortest)    {    If(sz  ==  _shortest)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
113	[BUG]  [BUGGY]  if(sz!=  _longest)  {  If(sz  ==  _shortest)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz!=  _longest)  {  If(sz  ==  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz!=  _longest)  {  If(sz  ==  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
114	[BUG]  [BUGGY]  if(sz  >=  _longest)  {  If(sz  ==  _shortest)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >=  _longest)  {  If(sz  ==  _shortest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >=  _longest)  {  If(sz  ==  _shortest)  {	  if(sz    >    _shortest)    {    If(sz    >    _shortest)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
115	[BUG]  [BUGGY]  _z  =  sz;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _z  =  sz;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_z  =  sz;	  _z    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
116	[BUG]  [BUGGY]  _seq  =  seq[1].trim();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _seq  =  seq[1].trim();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_seq  =  seq[1].trim();	  _seq    =    seq[1].length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
117	[BUG]  [BUGGY]  if(sz  <  =  _longest)  {  If(sz  <  _longest)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _longest)  {  If(sz  <  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _longest)  {  If(sz  <  _longest)  {	  if(sz    <    _longest)    {    If(sz    <    _longest)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
118	[BUG]  [BUGGY]  if(sz  <  _shortest)  {  if(sz  >  _shortest)  <  _shortest;  }  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _shortest)  {  if(sz  >  _shortest)  <  _shortest;  }  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  _shortest)  {  if(sz  >  _shortest)  <  _shortest;  }	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
119	[BUG]  [BUGGY]  if(sz  >  _longest)  <  _shortest;  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest)  <  _shortest;  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _longest)  <  _shortest;	  if(sz    >    _shortest)    {    if(sz    >    _shortest)    <    _shortest;    	non-compiled	[CE]  >  expected	49	None	replace
120	[BUG]  [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  if(sz  >=  _longest  ||  sz  >  _longest)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  _longest  ||  sz  >  _longest)  {  if(sz  >=  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    <    _longest    ||    sz    >    _longest)    {    if(sz  >=  _longest  ||  sz  >  _longest)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	add	if(sz  >  _longest  ||  sz  >  _longest)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
122	[BUG]  [BUGGY]  if(sz  >  _longest  ||  sz  >  _longest)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  >  _longest  ||  sz  >  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  >  _longest  ||  sz  >  _longest)  {	  if(sz    <    _longest    ||    sz    >    _longest)    {    	compilable	  [FE]  AssertionError  	51	1	replace
123	[BUG]  [BUGGY]  _shortest  =  sz  *  seq.length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _shortest  =  sz  *  seq.length;  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_shortest  =  sz  *  seq.length;	  _shortest    =    seq.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
124	[BUG]  [BUGGY]  _longest  =  seq[2].length();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  _longest  =  seq[2].length();  [BUGGY]      if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	_longest  =  seq[2].length();	  _longest    =    seq[0].length();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
125	[BUG]  [BUGGY]  if(sz  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  0)  {	  if(sz    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
126	[BUG]  [BUGGY]  if(sz  <  =  _longest  &&  seq.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  <  =  _longest  &&  seq.length  >  0)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz  <  =  _longest  &&  seq.length  >  0)  {	  if(sz    <    =    _longest)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  if(sz  ==  _longest)  {  if(sz  {  _longest)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {  for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();      [BUGGY]  if(sz  ==  _longest)  {  if(sz  {  _longest)  {  [BUGGY]      _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  shortest  =  _shortest;  longest  =  _longest;  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	53	53	1	replace	if(sz    ==    _longest)    {    if(sz  {  _longest)  {	  	non-compiled	[CE]  ')'  expected	22	None	add
