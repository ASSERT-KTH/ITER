bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest  +  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _length);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _length);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _longest);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _longest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _shortest);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest,  _shortest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	60	None	replace
6	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  cannot  find  symbol  seq  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  seq	60	None	replace
7	[BUG]  [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
8	[BUG]  [BUGGY]  this.lookupMap  =  Collections.emptyMap();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  Collections.emptyMap();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  Collections.emptyMap();	  this.lookupMap    =    lookup;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
9	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1,  _shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1,  _shortest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  +  1);	  this.lookupMap    =    lookupMap.get(_longest    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
11	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  /  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  /  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  /  1);	  this.lookupMap    =    lookupMap.get(_longest    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
12	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
14	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
15	[BUG]  [BUGGY]  _longest  =  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  1;	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
16	[BUG]  [BUGGY]  Integer  sz  =  lookupMap.size();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Integer  sz  =  lookupMap.size();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Integer  sz  =  lookupMap.size();	  int    sz    =    lookupMap.size()    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
17	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  2);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  2);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  2);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
18	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
19	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest,  _longest  +  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.values(),  lookup)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.values(),  lookup)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap.values(),  lookup)  {	  for(final    CharSequence[]    seq    :    this.lookupMap.values())    {    	non-compiled	[CE]  ')'  expected	64	None	replace
21	[BUG]  [BUGGY]  String  seq  =  lookupMap.get(_longest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  String  seq  =  lookupMap.get(_longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	String  seq  =  lookupMap.get(_longest);	  char    seq    =    lookupMap.get(_longest);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
22	[BUG]  [BUGGY]  char  seq  =  lookupMap.get(_longest  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  char  seq  =  lookupMap.get(_longest  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	char  seq  =  lookupMap.get(_longest  +  1);	  char    seq    =    lookupMap.get(_longest);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
23	[BUG]  [BUGGY]  Char  seq  =  lookupMap.get(_longest  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Char  seq  =  lookupMap.get(_longest  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Char  seq  =  lookupMap.get(_longest  +  1);	  char    seq    =    lookupMap.get(_longest);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
24	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
25	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
26	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  this.lookupMap)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
27	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookupMap,  this.lookupMap)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookupMap,  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookupMap,  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
28	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(sq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(sq[0],  seq[1]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(sq[0],  seq[1]);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
29	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1]  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1]  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1]  +  1);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
30	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(sz[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(sz[0],  seq[1]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(sz[0],  seq[1]);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap.values(),  _shortest)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap.values(),  _shortest)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  lookupMap.values(),  _shortest)  {	  for(final    CharSequence[]    seq    :    lookupMap.values())    {    	non-compiled	[CE]  ')'  expected	55	None	replace
32	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  0;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  0;	  ((    HashMap    <    CharSequence,    CharSequence>)lookup)._longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
33	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  _longest;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  _longest;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  _longest;	  ((    HashMap    <    CharSequence,    CharSequence>)lookup)._longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
34	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  Integer.MIN_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup)._longest  =  Integer.MIN_VALUE;	  ((    HashMap    <    CharSequence,    CharSequence>)lookup)._longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
35	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  ')'  expected	39	None	replace
36	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  _shortest)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  _shortest)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  _shortest)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  ')'  expected	39	None	replace
37	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup.length)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup.length)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest],  lookup.length)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  ')'  expected	39	None	replace
38	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MIN_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
39	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest,  _shortest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest,  _shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest,  _shortest);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    _longest);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
40	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _shortest);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _shortest);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    _longest);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
41	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  _longest  +  1);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    _longest);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
42	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  LookupMap.class.getSimpleName())  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  LookupMap.class.getSimpleName())  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  LookupMap.class.getSimpleName())  {	  for(final    CharSequence[]    seq    :    lookupMap.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
43	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  *  _longest  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  *  _longest  -  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  *  _longest  -  1);	  this.lookupMap    =    lookupMap.get(_longest    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
44	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  2);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  -  2);	  this.lookupMap    =    lookupMap.get(_longest    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
45	[BUG]  [BUGGY]  Int  sz  =  lookupMap.size();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Int  sz  =  lookupMap.size();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Int  sz  =  lookupMap.size();	  int    sz    =    lookupMap.size()    -    2;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
46	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  null)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap,  null)  {	  for(final    CharSequence[]    seq    :    this.lookupMap,    lookup)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
47	[BUG]  [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	  _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  _longest  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  new  TreeMap  <  CharSequence,  CharSequence>();	  _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
50	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_shortest);	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
51	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1]),  lookupMap)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1]),  lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[1]),  lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0]),    lookupMap)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
52	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0]),  lookupMap,  this.lookupMap)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0]),  lookupMap,  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[0]),  lookupMap,  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0]),    lookupMap)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
53	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0]),  this.lookupMap)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0]),  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[0]),  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0]),    lookupMap)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
54	[BUG]  [BUGGY]  _longest  =  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  Integer.MIN_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  Integer.MIN_VALUE;	  _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
55	[BUG]  [BUGGY]  _longest  =  Integer.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  Integer.MAX_VALUE  +  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  Integer.MAX_VALUE  +  1;	  _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
56	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(sq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(sq[0],  seq[1]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(sq[0],  seq[1]);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  +  1);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
58	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  1);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  _longest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  _longest);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
60	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _longest  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _longest  +  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest  +  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
63	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  _longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  /  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  /  _longest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
64	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest,  _longest);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
65	[BUG]  [BUGGY]  String  seq  =  lookupMap.get(_shortest);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  String  seq  =  lookupMap.get(_shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	String  seq  =  lookupMap.get(_shortest);	  char    seq    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
66	[BUG]  [BUGGY]  Char  seq  =  lookupMap.get(_longest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Char  seq  =  lookupMap.get(_longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Char  seq  =  lookupMap.get(_longest);	  char    seq    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
67	[BUG]  [BUGGY]  char  seq  =  lookupMap.get(_shortest  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  char  seq  =  lookupMap.get(_shortest  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	char  seq  =  lookupMap.get(_shortest  +  1);	  char    seq    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
68	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  +  1);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest,  _longest  -  1);	  this.lookupMap    =    lookupMap.get(_shortest,    _longest);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.length)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.length)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap.length)  {	  for(final    CharSequence[]    seq    :    lookupMap.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	52	None	replace
71	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  _longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap.put(seq[0],  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap.put(seq[0],  _longest);	  this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
72	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1]  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap.put(seq[0],  seq[1]  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap.put(seq[0],  seq[1]  +  1);	  this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
73	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  *  _longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  *  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  *  _longest);	  this.lookupMap    =    lookupMap.get(_longest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
74	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  /  _longest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  /  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  /  _longest);	  this.lookupMap    =    lookupMap.get(_longest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
75	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  +  1);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
76	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest,  _shortest);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
77	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(16,  _shortest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(16,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(16,  _shortest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _shortest);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
78	[BUG]  [BUGGY]  Arrays.sort(this.lookupMap);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.sort(this.lookupMap);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.sort(this.lookupMap);	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
79	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
80	[BUG]  [BUGGY]  Arrays.sort(lookupMap,  this.lookupMap);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.sort(lookupMap,  this.lookupMap);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.sort(lookupMap,  this.lookupMap);	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
81	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest,  _shortest);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest,  _shortest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest,  _shortest  +  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
84	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  -1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  -1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  -1;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
85	[BUG]  [BUGGY]  int  seq  =  lookupMap.length()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.length()  -  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.length()  -  1;	  int    seq    =    lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
86	[BUG]  [BUGGY]  int  seq  =  lookupMap.length()  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.length()  -  2;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.length()  -  2;	  int    seq    =    lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
87	[BUG]  [BUGGY]  int  seq  =  this.lookupMap.length();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  this.lookupMap.length();  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  this.lookupMap.length();	  int    seq    =    lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
88	[BUG]  [BUGGY]  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_longest);	  lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>(_shortest);	  lookupMap    =    new    TreeMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  this.lookupMap.size()  -  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  this.lookupMap.size()  -  1;	  int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
91	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  this.lookupMap.size()  +  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  this.lookupMap.size()  +  1;	  int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
92	[BUG]  [BUGGY]  Arrays.fill(seq,  _longest,  lookup);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  _longest,  lookup);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  _longest,  lookup);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  Arrays.fill(seq,  _longest  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  _longest  +  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  _longest  +  1);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
94	[BUG]  [BUGGY]  Arrays.fill(seq,  0,  _longest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  0,  _longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  0,  _longest);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
95	[BUG]  [BUGGY]  Arrays.fill(lookup,  _longest);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(lookup,  _longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(lookup,  _longest);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
96	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap,  this.lookupMap.length)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap,  this.lookupMap.length)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  lookupMap,  this.lookupMap.length)  {	  for(final    CharSequence[]    seq    :    lookupMap,    this.lookupMap)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
97	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1],  lookupMap)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1],  lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[1],  lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
98	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0],  lookupMap,  this.lookupMap)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0],  lookupMap,  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[0],  lookupMap,  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
99	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0],  this.lookupMap)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[0],  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[0],  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
100	[BUG]  [BUGGY]  int  sz  =  lookupmap.length();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  lookupmap.length();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  lookupmap.length();	  int    sz    =    lookupMap.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
101	[BUG]  [BUGGY]  int  sz  =  lookup.length()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  lookup.length()  -  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  lookup.length()  -  1;	  int    sz    =    lookup.length();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
102	[BUG]  [BUGGY]  int  sz  =  lookup.length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  lookup.length()  +  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  lookup.length()  +  1;	  int    sz    =    lookup.length();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
103	[BUG]  [BUGGY]  int  sz  =  lookup.length()  -  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  lookup.length()  -  2;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  lookup.length()  -  2;	  int    sz    =    lookup.length();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
104	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_shortest])  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_shortest])  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_shortest])  {	  for(final    CharSequence[]    seq    :    new    CharSequence[1])    {    	non-compiled	[CE]  incompatible  types	37	None	replace
105	[BUG]  [BUGGY]  int  seq  =  lookupMap.size()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.size()  -  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.size()  -  1;	  int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
106	[BUG]  [BUGGY]  int  seq  =  lookupMap.size()  -  2;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.size()  -  2;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.size()  -  2;	  int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
107	[BUG]  [BUGGY]  int  seq  =  lookupMap.size()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.size()  +  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.size()  +  1;	  int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
108	[BUG]  [BUGGY]  if(lookup  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookup  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookup  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
109	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(seq.length);  this.lookupMap.put(seq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(seq.length);  this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(seq.length);  this.lookupMap.put(seq[0],  seq[1]);	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
110	[BUG]  [BUGGY]  _longest  =  -1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  -1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  -1;	  _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  this.lookupMap  =  Maps.newHashMap  <  CharSequence,  CharSequence>();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  Maps.newHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  Maps.newHashMap  <  CharSequence,  CharSequence>();	  this.lookupMap    =    Maps.newHashMap();    	non-compiled	[CE]  ';'  expected	34	None	replace
112	[BUG]  [BUGGY]  this.lookupMap  =  Maps.newHashMap(_shortest);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  Maps.newHashMap(_shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  Maps.newHashMap(_shortest);	  this.lookupMap    =    Maps.newHashMap();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
113	[BUG]  [BUGGY]  this.lookupMap  =  Maps.newLinkedHashMap();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  Maps.newLinkedHashMap();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  Maps.newLinkedHashMap();	  this.lookupMap    =    Maps.newHashMap();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
114	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest  +  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  -  _shortest  +  1);	  this.lookupMap    =    lookupMap.get(_longest    -    _shortest);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
115	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest,  _longest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  -  _shortest,  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  -  _shortest,  _longest);	  this.lookupMap    =    lookupMap.get(_longest    -    _shortest);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
116	[BUG]  [BUGGY]  final  int  seq  =  lookupMap.size()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  int  seq  =  lookupMap.size()  -  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  int  seq  =  lookupMap.size()  -  1;	  final    int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
117	[BUG]  [BUGGY]  final  int  seq  =  lookupMap.size()  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  int  seq  =  lookupMap.size()  -  2;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  int  seq  =  lookupMap.size()  -  2;	  final    int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
118	[BUG]  [BUGGY]  final  int  seq  =  lookupMap.size()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  int  seq  =  lookupMap.size()  +  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  int  seq  =  lookupMap.size()  +  1;	  final    int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
119	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
120	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.length()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  this.lookupMap.length()  -  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  this.lookupMap.length()  -  1;	  int    sz    =    this.lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
121	[BUG]  [BUGGY]  _longest  =  0L;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  0L;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  0L;	  _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
122	[BUG]  [BUGGY]  Arrays.fill(seq,  _shortest);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  _shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  _shortest);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
123	[BUG]  [BUGGY]  Arrays.fill(seq,  _longest,  _shortest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  _longest,  _shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  _longest,  _shortest);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
124	[BUG]  [BUGGY]  char  seq  =  lookupMap.get(_longest  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  char  seq  =  lookupMap.get(_longest  -  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	char  seq  =  lookupMap.get(_longest  -  1);	  char    seq    =    lookupMap.get(_longest);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
125	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_shortest  -  _longest  -  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    _longest);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
126	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  -  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1]  -  1);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
127	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.shortest)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.shortest)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap,  this.shortest)  {	  for(final    CharSequence[]    seq    :    this.lookupMap,    lookupMap)    {    	non-compiled	[CE]  ')'  expected	45	None	replace
128	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap.put(seq[0],  seq[1].length());  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap.put(seq[0],  seq[1].length());	  this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
129	[BUG]  [BUGGY]  this.lookupMap.put(seq[1],  seq[0]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap.put(seq[1],  seq[0]);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap.put(seq[1],  seq[0]);	  this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
130	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
131	[BUG]  [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
132	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(lookup);	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
133	[BUG]  [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  LinkedHashMap  <  CharSequence,  CharSequence>();	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
134	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap.seq())  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  lookupMap.seq())  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  lookupMap.seq())  {	  for(final    CharSequence[]    seq    :    lookupMap.values())    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
135	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.length()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  this.lookupMap.length()  +  1;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  this.lookupMap.length()  +  1;	  int    sz    =    this.lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
136	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence[_longest],  CharSequence>();  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence[_longest],  CharSequence>();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence[_longest],  CharSequence>();	  this.lookupMap    =    lookup;    	non-compiled	[CE]  ']'  expected	32	None	replace
137	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  LookupMap.values())  {  [CE]  cannot  find  symbol  LookupMap  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  LookupMap.values())  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  LookupMap.values())  {	  for(final    CharSequence[]    seq    :    this.lookupMap.values())    {    	non-compiled	[CE]  cannot  find  symbol  LookupMap	64	None	replace
138	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0,  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0,  Integer.MAX_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0,  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	29	None	replace
139	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  0);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest,  0);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
140	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length());  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length());	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
141	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[1],  seq[0]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[1],  seq[0]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(seq[1],  seq[0]);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
142	[BUG]  [BUGGY]  int  seq  =  this.lookupMap.size();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  this.lookupMap.size();  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  this.lookupMap.size();	  int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
143	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[seq.length])  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[seq.length])  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[seq.length])  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  incompatible  types	39	None	replace
144	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest  +  1])  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest  +  1])  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest  +  1])  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  incompatible  types	39	None	replace
145	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  =  lookupMap.keySet())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  =  lookupMap.keySet())  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  =  lookupMap.keySet())  {	  for(final    CharSequence[]    seq    :    lookupMap.keySet())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
146	[BUG]  [BUGGY]  Arrays.sort(lookupMap,  _shortest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.sort(lookupMap,  _shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.sort(lookupMap,  _shortest);	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
147	[BUG]  [BUGGY]  Arrays.sort(lookupMap,  _longest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.sort(lookupMap,  _longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.sort(lookupMap,  _longest);	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
148	[BUG]  [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0L;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
149	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  cannot  find  symbol  seq  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  cannot  find  symbol  seq	59	None	replace
150	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_length  -  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_length  -  1);	  this.lookupMap    =    lookupMap.get(_shortest    -    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
151	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  lookup);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  lookup);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap,  lookup);	  for(final    CharSequence[]    seq    :    lookupMap,    this.lookupMap)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
152	[BUG]  [BUGGY]  Integer  sz  =  lookupMap.length();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Integer  sz  =  lookupMap.length();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Integer  sz  =  lookupMap.length();	  int    sz    =    lookupMap.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
153	[BUG]  [BUGGY]  Int  sz  =  lookupMap.length();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Int  sz  =  lookupMap.length();  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Int  sz  =  lookupMap.length();	  int    sz    =    lookupMap.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
154	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	60	None	replace
155	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap!=  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap!=  null)  {  if(_longest  ==  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	60	None	replace
156	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap  ==  null)  {  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  Il	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	60	None	replace
157	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest  -  1,  lookupMap)  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest  -  1,  lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest  -  1,  lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest],    lookupMap)    {    	non-compiled	[CE]  ']'  expected	56	None	replace
158	[BUG]  [BUGGY]  if(lookup!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookup!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookup!=  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
159	[BUG]  [BUGGY]  final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  this.lookupMap.put(seq[0],  seq[1]);	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
160	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookupMap).put(seq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookupMap).put(seq[0],  seq[1]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookupMap).put(seq[0],  seq[1]);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
161	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  Object>)lookup).put(seq[0],  seq[1].length);	  ((    HashMap    <    CharSequence,    Object>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
162	[BUG]  [BUGGY]  this.lookupMap  =  Maps.newHashMap(_longest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  Maps.newHashMap(_longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  Maps.newHashMap(_longest);	  this.lookupMap    =    Maps.newHashMap();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
163	[BUG]  [BUGGY]  int  sz  =  this.lookupMap.size()  -  2;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  sz  =  this.lookupMap.size()  -  2;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  sz  =  this.lookupMap.size()  -  2;	  int    sz    =    this.lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
164	[BUG]  [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  ==  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
165	[BUG]  [BUGGY]  if(_longest  <  =  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  <  =  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  <  =  Integer.MAX_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
166	[BUG]  [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
167	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  2);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest,  _shortest  -  2);	  this.lookupMap    =    lookupMap.get(_longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
168	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[2],  lookupMap)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[2],  lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[2],  lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[0],    lookupMap)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
169	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _shortest);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
170	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.get(_longest))  {  [CE]  for-each  not  applicable  to  expression  type  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap.get(_longest))  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap.get(_longest))  {	  for(final    CharSequence[]    seq    :    this.lookupMap.keySet())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	7	None	replace
171	[BUG]  [BUGGY]  Char  seq  =  lookupMap.get(_shortest);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Char  seq  =  lookupMap.get(_shortest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Char  seq  =  lookupMap.get(_shortest);	  char    seq    =    lookupMap.get(_shortest);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
172	[BUG]  [BUGGY]  final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
173	[BUG]  [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap  ==  null)  {  LookupMap  <  CharSequence,  CharSequence>  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  0;  }	  LookupMap    <    CharSequence,    CharSequence>    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
174	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  }	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
175	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  sz);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  sz);  }  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  sz);  }	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
176	[BUG]  [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  _longest);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  _longest);  }  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(lookupMap!=  null)  {  Arrays.sort(lookupMap);  }  else  {  this.lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  System.arraycopy(seq,  0,  seq,  0,  _longest);  }	  Arrays.sort(lookupMap);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
177	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[1],  _longest);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[1],  _longest);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[1],  _longest);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    _longest);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
178	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  1);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    _longest);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
179	[BUG]  [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  _longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup.length);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	_longest  =  new  HashMap  <  CharSequence,  CharSequence>(lookup.length);	  _longest    =    new    HashMap    <    CharSequence,    CharSequence>();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
180	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
181	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1]),  this.lookupMap)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[1]),  this.lookupMap)  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[1]),  this.lookupMap)  {	  for(final    CharSequence[]    seq    :    new    CharSequence[1])    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
182	[BUG]  [BUGGY]  Arrays.fill(seq,  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  Arrays.fill(seq,  1);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	Arrays.fill(seq,  1);	  Arrays.fill(seq,    _longest);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
183	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest,  _shortest))  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  new  CharSequence[_longest,  _shortest))  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  new  CharSequence[_longest,  _shortest))  {	  for(final    CharSequence[]    seq    :    new    CharSequence[_longest])    {    	non-compiled	[CE]  ']'  expected	39	None	replace
184	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookupMap)._longest  =  Integer.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookupMap)._longest  =  Integer.MAX_VALUE;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookupMap)._longest  =  Integer.MAX_VALUE;	  ((    HashMap    <    CharSequence,    CharSequence>)lookup)._longest    =    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
185	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookupMap).put(seq[0],  seq[1]);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
186	[BUG]  [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1].length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  ((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1].length);  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	((  HashMap  <  CharSequence,  CharSequence>)lookup).put(seq[0],  seq[1].length);	  ((    HashMap    <    CharSequence,    CharSequence>)lookup).put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
187	[BUG]  [BUGGY]  this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap.put(seq[0],  new  CharSequence(seq[1]));	  this.lookupMap.put(seq[0],    seq[1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
188	[BUG]  [BUGGY]  int  seq  =  lookupMap.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  int  seq  =  lookupMap.length  -  1;  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	int  seq  =  lookupMap.length  -  1;	  int    seq    =    lookupMap.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
189	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  getupMap().values())  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  getupMap().values())  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  getupMap().values())  {	  for(final    CharSequence[]    seq    :    lookupMap.values())    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
190	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest,  _shortest);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest,  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1,  _longest,  _shortest);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest,    _shortest);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
191	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  *  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  *  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(_longest  *  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_longest    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
192	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest  *  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest  *  1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(0,  _longest  *  1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(0,    _longest    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
193	[BUG]  [BUGGY]  final  int  seq  =  this.lookupMap.size();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  final  int  seq  =  this.lookupMap.size();  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	final  int  seq  =  this.lookupMap.size();	  final    int    seq    =    lookupMap.size();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
194	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[1])  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[1])  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[1])  {	  for(final    CharSequence[]    seq    :    this.lookupMap,    lookupMap)    {    	non-compiled	[CE]  ')'  expected	45	None	replace
195	[BUG]  [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[0])  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[0])  {  [BUGGY]      this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	for(final  CharSequence[]  seq  :  this.lookupMap,  this.seq[0])  {	  for(final    CharSequence[]    seq    :    this.lookupMap,    lookupMap)    {    	non-compiled	[CE]  ')'  expected	45	None	replace
196	[BUG]  [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	if(_longest  <  Integer.MIN_VALUE)  {  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>();  _longest  =  Integer.MAX_VALUE;  }	  if(_longest    ==    Integer.MAX_VALUE)    {    lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    Integer.MAX_VALUE;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
197	[BUG]  [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  +  _shortest);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  lookupMap.get(_longest  +  _shortest);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  lookupMap.get(_longest  +  _shortest);	  this.lookupMap    =    lookupMap.get(_longest    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
198	[BUG]  [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  0;  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	this.lookupMap  =  new  TreeMap  <  CharSequence,  CharSequence>();  _longest  =  0;	  this.lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>();    _longest    =    0;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
199	[BUG]  [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  LookupTranslator(final  CharSequence[]...  lookup)  {  lookupMap  =  new  HashMap<CharSequence,  CharSequence>();  int  _shortest  =  Integer.MAX_VALUE;  int  _longest  =  0;  if  (lookup  !=  null)  {      [BUGGY]  lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1);  [BUGGY]      for  (final  CharSequence[]  seq  :  lookup)  {  this.lookupMap.put(seq[0],  seq[1]);  final  int  sz  =  seq[0].length();  if  (sz  <  _shortest)  {  _shortest  =  sz;  }  if  (sz  >  _longest)  {  _longest  =  sz;  }  }  }  [CLASS]  LookupTranslator  [METHOD]  <init>  [RETURN_TYPE]  CharSequence[][])  lookup  [VARIABLES]  CharSequence[]  seq  boolean  HashMap  lookupMap  int  _longest  _shortest  longest  shortest  sz  CharSequence[][]  lookup  	projects/Lang4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java	0.7071067811865475	50	50	1	replace	lookupMap  =  new  HashMap  <  CharSequence,  CharSequence>(1);	  lookupMap    =    new    HashMap    <    CharSequence,    CharSequence>(_shortest);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
