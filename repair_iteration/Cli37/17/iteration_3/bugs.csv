bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(arguments[0],  options);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(arguments[0],  options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  arguments.getRequiredOption(arguments[0],  options);	  Option    currentOption    =    arguments.getRequiredOption(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
2	[BUG]  [BUGGY]  Option  currentOption  =  arguments[0].getRequiredOption(arguments[0]);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  arguments[0].getRequiredOption(arguments[0]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  arguments[0].getRequiredOption(arguments[0]);	  Option    currentOption    =    arguments.getRequiredOption(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
3	[BUG]  [BUGGY]  currentOption  =  new  OptionGroup(options,  options.getRequiredOptions());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  OptionGroup(options,  options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  OptionGroup(options,  options.getRequiredOptions());	  currentOption    =    new    OptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
4	[BUG]  [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getRequiredOptions());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getRequiredOptions());	  currentOption    =    new    OptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
5	[BUG]  [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options);	  currentOption    =    new    OptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
6	[BUG]  [BUGGY]  OptionGroup  group  =  options.groups(),  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.groups(),  stopAtNonOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.groups(),  stopAtNonOption;	  OptionGroup    group    =    options.groups();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
7	[BUG]  [BUGGY]  OptionGroup  group  =  options.groups(),  skipParsing;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.groups(),  skipParsing;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.groups(),  skipParsing;	  OptionGroup    group    =    options.groups();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  stopAtNonOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  stopAtNonOption;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    option;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.option;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.option;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.option;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    option;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.options);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  this.options);	  Option    currentOption    =    options.getRequiredOption(argument,    option);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.optionToken);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.optionToken);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  this.optionToken);	  Option    currentOption    =    options.getRequiredOption(argument,    option);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  arguments);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  arguments);	  Option    currentOption    =    options.getRequiredOption(argument,    option);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
13	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  this.stopAtNonOption);	  Option    currentToken    =    options.getToken(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
14	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.skipParsing);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  this.skipParsing);	  Option    currentToken    =    options.getToken(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
15	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  arguments);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  arguments);	  Option    currentToken    =    options.getToken(),    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	30	None	replace
16	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  skipParsing);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  skipParsing);	  Option    currentToken    =    options.getToken(),    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	30	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options,  options.getRequiredOption();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options,  options.getRequiredOption();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options,  options.getRequiredOption();	  Option    currentOption    =    options,    options.getRequiredOptions();    	non-compiled	[CE]  ';'  expected	48	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  option.getRequiredOptionGroups();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getRequiredOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getRequiredOptionGroups();	  Option    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
19	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOptionGroup(options);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOptionGroup(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOptionGroup(options);	  Option    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
20	[BUG]  [BUGGY]  currentOption  =  cmd.toString()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.toString()  +  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.toString()  +  1;	  currentOption    =    cmd.toString();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
21	[BUG]  [BUGGY]  currentOption  =  cmd.toString()  +  ';';  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.toString()  +  ';';  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.toString()  +  ';';	  currentOption    =    cmd.toString();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
22	[BUG]  [BUGGY]  currentOption  =  cmd.toString()  + "n ";  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.toString()  + "n ";  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.toString()  + "n ";	  currentOption    =    cmd.toString();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
23	[BUG]  [BUGGY]  OptionGroup  group  =  _options.getGroups();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  _options.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  _options.getGroups();	  OptionGroup    group    =    this.options.getGroups();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
24	[BUG]  [BUGGY]  OptionGroup  group  =  cloneOptions.getGroups();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  cloneOptions.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  cloneOptions.getGroups();	  OptionGroup    group    =    this.options.getGroups();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
25	[BUG]  [BUGGY]  currentOption  =  new  Option(options,  options.getRequiredOptions(),  options.getRequiredOptions());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options,  options.getRequiredOptions(),  options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options,  options.getRequiredOptions(),  options.getRequiredOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
26	[BUG]  [BUGGY]  currentOption  =  new  Option(options,  options.getRequiredOptions());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options,  options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options,  options.getRequiredOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
27	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getSelectedOptions());  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getSelectedOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getSelectedOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.stopAtNonOption);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(this.skipParsing);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.options);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.options);	  Option    currentOption    =    options.getRequiredOption(this.skipParsing);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipToken);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipToken);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.skipToken);	  Option    currentOption    =    options.getRequiredOption(this.skipParsing);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
31	[BUG]  [BUGGY]  currentOption  =  cmd.clone();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.clone();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.clone();	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
32	[BUG]  [BUGGY]  currentOption  =  cmd.clonePath();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.clonePath();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.clonePath();	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
33	[BUG]  [BUGGY]  currentOption  =  cmd.getOption();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.getOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.getOption();	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
34	[BUG]  [BUGGY]  currentOption  =  cmd.options  ||!skipParsing;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.options  ||!skipParsing;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.options  ||!skipParsing;	  currentOption    =    cmd.options;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  expectedOpts);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  expectedOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.options,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(this.options);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  skipParsing);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.options,  skipParsing);	  Option    currentOption    =    options.getRequiredOption(this.options);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  this.options.getRequiredOption(options);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  this.options.getRequiredOption(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  this.options.getRequiredOption(options);	  Option    currentOption    =    options.getRequiredOption(this.options);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
38	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOption(currentToken);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOption(currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  options.getRequiredOption(currentToken);	  OptionGroup    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
39	[BUG]  [BUGGY]  OptionGroup  currentOption  =  option.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  option.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  option.getRequiredOptions();	  OptionGroup    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
40	[BUG]  [BUGGY]  Option  currentOption  =  option.getRequiredOption(arguments);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getRequiredOption(arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getRequiredOption(arguments);	  Option    currentOption    =    arguments.getRequiredOption(options);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  currentOption  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptions();	  currentOption    =    options.options;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
42	[BUG]  [BUGGY]  currentOption  =  options.getOption();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOption();	  currentOption    =    options.options;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.stopAtNonOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  this.stopAtNonOption;	  Option    currentToken    =    options.getToken(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
44	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  arguments;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  arguments;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  arguments;	  Option    currentToken    =    options.getToken(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
45	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.skipParsing;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.skipParsing;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  this.skipParsing;	  Option    currentToken    =    options.getToken(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
46	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  argument;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  argument;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  argument;	  Option    currentToken    =    options.getToken(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentOpts);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argumentOpts);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getPreparedOption(argument);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getPreparedOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getPreparedOption(argument);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getPreservedOption(argument);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getPreservedOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getPreservedOption(argument);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
50	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(options[0]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(options[0]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(options[0]);	  Option    currentOption    =    arguments.getRequiredOption(options[0]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentes[0]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentes[0]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argumentes[0]);	  Option    currentOption    =    arguments.getRequiredOption(options[0]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  this.stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
53	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.skipParsing);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  this.skipParsing);	  Option    currentOption    =    options.getRequiredOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
54	[BUG]  [BUGGY]  options.getRequiredOptionGroups();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options.getRequiredOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options.getRequiredOptionGroups();	  Options    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
55	[BUG]  [BUGGY]  Options  currentOption  =  options.getRequiredOptionGroup(options);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Options  currentOption  =  options.getRequiredOptionGroup(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Options  currentOption  =  options.getRequiredOptionGroup(options);	  Options    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
56	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(arguments,    skipParsing);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.skipParsing);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  this.skipParsing);	  Option    currentOption    =    options.getRequiredOption(arguments,    skipParsing);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  this.stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  this.stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  skipParsing,  this.stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(arguments,    skipParsing);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(arguments[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(arguments[1]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  arguments.getRequiredOption(arguments[1]);	  Option    currentOption    =    options.getRequiredOption(arguments[1]);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
60	[BUG]  [BUGGY]  Option  currentOption  =  _options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  _options.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  _options.getRequiredOptions();	  Option    currentOption    =    option.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
61	[BUG]  [BUGGY]  options  =  option.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options  =  option.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options  =  option.getRequiredOptions();	  Option    currentOption    =    option.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
62	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getOptionGroup(false);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
63	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(this.skipParsing);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getOptionGroup(this.skipParsing);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
64	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getOptionGroup(true);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
65	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  skipParsing,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  skipParsing,  expectedOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  skipParsing,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(argument,    skipParsing);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
66	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  skipParsing  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  skipParsing  +  1);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  skipParsing  +  1);	  Option    currentOption    =    options.getRequiredOption(argument,    skipParsing);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
67	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  skipParsing);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  skipParsing);	  Option    currentOption    =    options.getRequiredOption(),    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	9	None	replace
68	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption,  expectedOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  this.stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  this.stopAtNonOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroups(),  this.stopAtNonOption;	  OptionGroup    group    =    options.getGroups(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  skipParsing;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  skipParsing;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroups(),  skipParsing;	  OptionGroup    group    =    options.getGroups(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  this.skipParsing;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  this.skipParsing;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroups(),  this.skipParsing;	  OptionGroup    group    =    options.getGroups(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getGroups();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  options.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  options.getGroups();	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
74	[BUG]  [BUGGY]  OptionGroup  currentOption  =  option.getGroups();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  option.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  option.getGroups();	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
75	[BUG]  [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(currentToken);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(currentToken);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  arguments.getRequiredOption(currentToken);	  Option    currentOption    =    arguments.getRequiredOption(argument);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
76	[BUG]  [BUGGY]  Options  currentOption  =  options.getRequiredOption(arguments);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Options  currentOption  =  options.getRequiredOption(arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Options  currentOption  =  options.getRequiredOption(arguments);	  Options    currentOption    =    options.getRequiredOption(options);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
77	[BUG]  [BUGGY]  currentOption  =  this.currentToken  +  1;  [CE]  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.currentToken  +  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.currentToken  +  1;	  currentOption    =    this.currentToken;    	non-compiled	[CE]  	20	None	replace
78	[BUG]  [BUGGY]  Option  currentToken  =  option.getToken()  +  1;  [CE]  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  option.getToken()  +  1;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  option.getToken()  +  1;	  Option    currentToken    =    option.getToken();    	non-compiled	[CE]  	36	None	replace
79	[BUG]  [BUGGY]  currentOption  =  options.clone();  [CE]  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.clone();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.clone();	  currentOption    =    options.cloneOption();    	non-compiled	[CE]  	25	None	replace
80	[BUG]  [BUGGY]  currentOption  =  options.getOption(options.getRequiredOptions());  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOption(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOption(options.getRequiredOptions());	  currentOption    =    options.cloneOption();    	non-compiled	[CE]  	25	None	replace
81	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments);  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    options);    	non-compiled	[CE]  	57	None	replace
82	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  this.options);  [CE]  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  this.options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  this.options);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    options);    	non-compiled	[CE]  	57	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  option);  [CE]  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  option);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  option);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    options);    	non-compiled	[CE]  	57	None	replace
84	[BUG]  [BUGGY]  Option  currentToken  =  this.options.getToken(argument);  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  this.options.getToken(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  this.options.getToken(argument);	  Option    currentToken    =    this.options.getToken();    	non-compiled	[CE]  	29	None	replace
85	[BUG]  [BUGGY]  Option  currentToken  =  this.options.getToken()  +  1;  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  this.options.getToken()  +  1;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  this.options.getToken()  +  1;	  Option    currentToken    =    this.options.getToken();    	non-compiled	[CE]  	29	None	replace
86	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.stopAtNonOption);  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.stopAtNonOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.stopAtNonOption);	  currentOption    =    new    Option(options.getRequiredOptions());    	non-compiled	[CE]  	45	None	replace
87	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(currentToken);  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(currentToken);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(currentToken);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  	37	None	replace
88	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(this.options);  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(this.options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(this.options);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  	37	None	replace
89	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(argument,  skipParsing);  [CE]  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(argument,  skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(argument,  skipParsing);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  	37	None	replace
90	[BUG]  [BUGGY]  Option  currentOption  =  options.getSelectedOption();  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getSelectedOption();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getSelectedOption();	  Options    currentOption    =    options.getRequiredOption();    	non-compiled	[CE]  	31	None	replace
91	[BUG]  [BUGGY]  Option  currentToken  =  options.getSelectedOption();  [CE]  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getSelectedOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getSelectedOption();	  Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  	15	None	replace
92	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption();  [CE]  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getImplicitRequiredOption();	  Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  	15	None	replace
93	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption();  [CE]  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getOption();	  Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  	15	None	replace
94	[BUG]  [BUGGY]  Option  currentOption  =  this.stopAtNonOption.getRequiredOption(arguments,  options);  [CE]  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  this.stopAtNonOption.getRequiredOption(arguments,  options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  this.stopAtNonOption.getRequiredOption(arguments,  options);	  Option    currentOption    =    options.getRequiredOption(arguments,    this.stopAtNonOption);    	non-compiled	[CE]  	52	None	replace
95	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  skipParsing);  [CE]  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  skipParsing);	  Option    currentOption    =    options.getRequiredOption(arguments,    this.stopAtNonOption);    	non-compiled	[CE]  	52	None	replace
96	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.skipParsing);  [CE]  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.skipParsing);	  Option    currentOption    =    options.getRequiredOption(arguments,    this.stopAtNonOption);    	non-compiled	[CE]  	52	None	replace
97	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  options  =  options.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  	16	None	replace
98	[BUG]  [BUGGY]  Options  options  =  options.getOptionGroups();  [CE]  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Options  options  =  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Options  options  =  options.getOptionGroups();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  options  =  options.getOptions();  [CE]  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options  =  options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options  =  options.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  	16	None	replace
100	[BUG]  [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  this.options.getRequiredOption()  :  null;  [CE]  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  this.options.getRequiredOption()  :  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.hasRequiredOption()?  this.options.getRequiredOption()  :  null;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  	49	None	replace
101	[BUG]  [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  option.getRequiredOption()  :  null;  [CE]  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  option.getRequiredOption()  :  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.hasRequiredOption()?  option.getRequiredOption()  :  null;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  	49	None	replace
102	[BUG]  [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.options;  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.options;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.hasRequiredOption()?  options.getRequiredOption()  :  this.options;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  	49	None	replace
103	[BUG]  [BUGGY]  currentOption  =  options.getOptionGroups(),  stopAtNonOption;  [CE]  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptionGroups(),  stopAtNonOption;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptionGroups(),  stopAtNonOption;	  currentOption    =    options.getOptionGroups();    	non-compiled	[CE]  	54	None	replace
104	[BUG]  [BUGGY]  currentOption  =  options.getOptionGroups(),  stopAtNonOption);  [CE]  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptionGroups(),  stopAtNonOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptionGroups(),  stopAtNonOption);	  currentOption    =    options.getOptionGroups();    	non-compiled	[CE]  	54	None	replace
105	[BUG]  [BUGGY]  currentOption  =  option.getOptionGroups();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  option.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  option.getOptionGroups();	  currentOption    =    options.getOptionGroups();    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
106	[BUG]  [BUGGY]  currentOption  =  this.cmd  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.cmd  -  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.cmd  -  1;	  currentOption    =    this.cmd;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
107	[BUG]  [BUGGY]  Option  group  =  this.options.getGroups();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  this.options.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  this.options.getGroups();	  Option    group    =    options.getGroups();    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
108	[BUG]  [BUGGY]  Option  group  =  options.getGroups(),  stopAtNonOption);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  options.getGroups(),  stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  options.getGroups(),  stopAtNonOption);	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ';'  expected	41	None	replace
109	[BUG]  [BUGGY]  Option  group  =  options.getGroups(),  stopAtNonOption;  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  options.getGroups(),  stopAtNonOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  options.getGroups(),  stopAtNonOption;	  Option    group    =    options.getGroups();    	non-compiled	[CE]  	41	None	replace
110	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1);	  Option    currentOption    =    options.getRequiredOption(),    this.skipParsing);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
111	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing,  expectedOpts);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing,  expectedOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.skipParsing,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(),    this.skipParsing);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
112	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.skipParsing  +  1;	  Option    currentOption    =    options.getRequiredOption(),    this.skipParsing);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
113	[BUG]  [BUGGY]  OptionGroup  group  =  this.skipParsing.getGroup(options);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  this.skipParsing.getGroup(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  this.skipParsing.getGroup(options);	  OptionGroup    group    =    options.getGroup(this.skipParsing);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
114	[BUG]  [BUGGY]  OptionGroup  group  =  _groups.getGroup(this.skipParsing);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  _groups.getGroup(this.skipParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  _groups.getGroup(this.skipParsing);	  OptionGroup    group    =    options.getGroup(this.skipParsing);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
115	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(this.skipParsing,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroup(this.skipParsing,  stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroup(this.skipParsing,  stopAtNonOption);	  OptionGroup    group    =    options.getGroup(this.skipParsing);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  currentOption  =  options.getOptionGroup(),  stopAtNonOption;  [CE]  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptionGroup(),  stopAtNonOption;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptionGroup(),  stopAtNonOption;	  currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  	56	None	replace
117	[BUG]  [BUGGY]  currentOption  =  option.getOptionGroup();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  option.getOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  option.getOptionGroup();	  currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
118	[BUG]  [BUGGY]  currentOption  =  options.getOptionGroup(),  stopAtNonOption);  [CE]  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptionGroup(),  stopAtNonOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptionGroup(),  stopAtNonOption);	  currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  	56	None	replace
119	[BUG]  [BUGGY]  Option  currentOption  =  option.getImplicitRequiredOption();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getImplicitRequiredOption();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getImplicitRequiredOption();	  Option    currentOption    =    option.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
120	[BUG]  [BUGGY]  Option  currentOption  =  option.getSelectedOption();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getSelectedOption();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getSelectedOption();	  Option    currentOption    =    option.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
121	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[1],  arguments[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[1],  arguments[1]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[1],  arguments[1]);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[0]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
122	[BUG]  [BUGGY]  Options  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Options  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Options  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[0]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
123	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[2]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[2]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[2]);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[0]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
124	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]  +  1);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]  +  1);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[1]);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
125	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  expectedOpts);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[1]);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
126	[BUG]  [BUGGY]  Option  currentOption  =  options.isRequiredOption()?  options.getRequiredOption()  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.isRequiredOption()?  options.getRequiredOption()  :  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.isRequiredOption()?  options.getRequiredOption()  :  null;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
127	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption()?  options.getRequiredOption()  :  null;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption()?  options.getRequiredOption()  :  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption()?  options.getRequiredOption()  :  null;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
128	[BUG]  [BUGGY]  Option  currentOption  =  option.hasRequiredOption()?  options.getRequiredOption()  :  null;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.hasRequiredOption()?  options.getRequiredOption()  :  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.hasRequiredOption()?  options.getRequiredOption()  :  null;	  Option    currentOption    =    options.hasRequiredOption()?    options.getRequiredOption()    :    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
129	[BUG]  [BUGGY]  Option  currentOption  =  args.getRequiredOption(arguments[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  args.getRequiredOption(arguments[0]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  args.getRequiredOption(arguments[0]);	  Option    currentOption    =    arguments.getRequiredOption(arguments[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
130	[BUG]  [BUGGY]  currentOption  =  cmd.toPlainString();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.toPlainString();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.toPlainString();	  currentOption    =    cmd.toString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
131	[BUG]  [BUGGY]  currentOption  =  cmd.toLowerCase();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.toLowerCase();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.toLowerCase();	  currentOption    =    cmd.toString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
132	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options);	  currentOption    =    new    Option(options.getRequiredOptions());    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
133	[BUG]  [BUGGY]  currentOption  =  options,  options.getOptionGroups();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options,  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options,  options.getOptionGroups();	  currentOption    =    options.getOptionGroups();    	non-compiled	[CE]  ';'  expected	54	None	replace
134	[BUG]  [BUGGY]  OptionGroup  group  =  option.getOptionGroups();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  option.getOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  option.getOptionGroups();	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
135	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroups();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  options.getOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  options.getOptionGroups();	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
136	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(argument);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getOption(argument);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
137	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[2]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[2]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[2]);	  Option    currentOption    =    options.getRequiredOption(arguments[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
138	[BUG]  [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  >  0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  >  0);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  >  0);	  currentOption    =    cmd.options;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
139	[BUG]  [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getOptions().length  >  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getOptions().length  >  0);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getOptions().length  >  0);	  currentOption    =    cmd.options;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
140	[BUG]  [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  <  2)||(cmd.options!=  null  &&  cmd.options.getRequiredOpti  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  <  2)||(cmd.options!=  null  &&  cmd.options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.options  ||(cmd.options!=  null  &&  cmd.options.getRequiredOptions().length  <  2)||(cmd.options!=  null  &&  cmd.options.getRequiredOpti	  currentOption    =    cmd.options;    	non-compiled	[CE]  ')'  expected	17	None	replace
141	[BUG]  [BUGGY]  OptionGroup  group  =  options.groups(),  options.getOptionGroups();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.groups(),  options.getOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.groups(),  options.getOptionGroups();	  OptionGroup    group    =    options.groups();    	non-compiled	[CE]  ';'  expected	53	None	replace
142	[BUG]  [BUGGY]  OptionGroup  group  =  options.groups(),  options.getRequiredOptions();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.groups(),  options.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.groups(),  options.getRequiredOptions();	  OptionGroup    group    =    options.groups();    	non-compiled	[CE]  ';'  expected	53	None	replace
143	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  null);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  null);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  null);	  Option    currentOption    =    options.getRequiredOption(argument,    stopAtNonOption);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
144	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.token);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.token);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.token);	  Option    currentOption    =    options.getRequiredOption(this.skipParsing);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
145	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  argument);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  argument);	  Option    currentToken    =    options.getToken(),    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	30	None	replace
146	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  0);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  0);	  Option    currentOption    =    options.getRequiredOption(argument,    skipParsing);    	non-compiled	[CE]  ';'  expected	23	None	replace
147	[BUG]  [BUGGY]  Option  currentToken  =  arguments.getToken();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  arguments.getToken();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  arguments.getToken();	  Option    currentToken    =    this.options.getToken();    	non-compiled	[CE]  ';'  expected	29	None	replace
148	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroups();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  options  =  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  options  =  options.getOptionGroups();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  ')'  expected	16	None	replace
149	[BUG]  [BUGGY]  currentOption  =  options.getRequiredOptions();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getRequiredOptions();	  currentOption    =    options.options;    	non-compiled	[CE]  ')'  expected	24	None	replace
150	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentOption;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentOption;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroups(),  currentOption;	  OptionGroup    group    =    options.getGroups(),    stopAtNonOption;    	non-compiled	[CE]  ')'  expected	8	None	replace
151	[BUG]  [BUGGY]  currentOption  =  this.cmd?  null  :  this.cmd;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.cmd?  null  :  this.cmd;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.cmd?  null  :  this.cmd;	  currentOption    =    this.cmd;    	non-compiled	[CE]  ')'  expected	38	None	replace
152	[BUG]  [BUGGY]  currentOption  =  this.cmd  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.cmd  +  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.cmd  +  1;	  currentOption    =    this.cmd;    	non-compiled	[CE]  ')'  expected	38	None	replace
153	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  ')'  expected	46	None	replace
154	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrerequisiteOptions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrerequisiteOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrerequisiteOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  ')'  expected	46	None	replace
155	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.skipParsing;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.skipParsing;	  Option    currentOption    =    options.getRequiredOption(),    this.skipParsing);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
156	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(this.skipParsing,  options);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroup(this.skipParsing,  options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroup(this.skipParsing,  options);	  OptionGroup    group    =    options.getGroup(this.skipParsing);    	non-compiled	[CE]  ')'  expected	7	None	replace
157	[BUG]  [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getOptionGroups());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getOptionGroups());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  OptionGroup(options.getRequiredOptions(),  options.getOptionGroups());	  currentOption    =    new    OptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  ')'  expected	58	None	replace
158	[BUG]  [BUGGY]  OptionOption  currentOption  =  options.getRequiredOptions();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionOption  currentOption  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionOption  currentOption  =  options.getRequiredOptions();	  OptionGroup    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  ')'  expected	51	None	replace
159	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(currentOption);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(currentOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(currentOption);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  ')'  expected	37	None	replace
160	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(token);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(token);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(token);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  ')'  expected	37	None	replace
161	[BUG]  [BUGGY]  currentOption  =  this.currentToken  -  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.currentToken  -  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.currentToken  -  1;	  currentOption    =    this.currentToken;    	non-compiled	[CE]  ')'  expected	20	None	replace
162	[BUG]  [BUGGY]  Option  currentOption  =  option.getRequiredOption(argument);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getRequiredOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getRequiredOption(argument);	  Option    currentOption    =    arguments.getRequiredOption(option);    	non-compiled	[CE]  ')'  expected	59	None	replace
163	[BUG]  [BUGGY]  currentOption  =  cmd.getOption(null);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.getOption(null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.getOption(null);	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  ')'  expected	18	None	replace
164	[BUG]  [BUGGY]  currentOption  =  cmd.cloneOption();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.cloneOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.cloneOption();	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  ')'  expected	18	None	replace
165	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options)+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options)+  1;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.options)+  1;	  Option    currentOption    =    options.getRequiredOption(this.options);    	non-compiled	[CE]  ')'  expected	35	None	replace
166	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.option);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  this.option);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  this.option);	  Option    currentOption    =    options.getRequiredOption(argument,    option);    	non-compiled	[CE]  ')'  expected	60	None	replace
167	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  null);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  null);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  null);	  Option    currentOption    =    options.getRequiredOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	1	None	replace
168	[BUG]  [BUGGY]  options  currentOption  =  option.getRequiredOptions();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options  currentOption  =  option.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options  currentOption  =  option.getRequiredOptions();	  Option    currentOption    =    option.getRequiredOptions();    	non-compiled	[CE]  ')'  expected	34	None	replace
169	[BUG]  [BUGGY]  Option  currentOption  =  options,  option.getRequiredOptions();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options,  option.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options,  option.getRequiredOptions();	  Option    currentOption    =    option.getRequiredOptions();    	non-compiled	[CE]  ';'  expected	34	None	replace
170	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1],  stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[1]);    	non-compiled	[CE]  ')'  expected	12	None	replace
171	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getRequiredOption(argument);	  Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  ')'  expected	15	None	replace
172	[BUG]  [BUGGY]  Option  group  =  _groups.getGroups();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  _groups.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  _groups.getGroups();	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ')'  expected	41	None	replace
173	[BUG]  [BUGGY]  Option  group  =  option.getGroups();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  group  =  option.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  group  =  option.getGroups();	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ')'  expected	41	None	replace
174	[BUG]  [BUGGY]  Option  currentOption  =  option.getImmediateParentPointer();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  option.getImmediateParentPointer();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  option.getImmediateParentPointer();	  Option    currentOption    =    option.getRequiredOption();    	non-compiled	[CE]  ')'  expected	10	None	replace
175	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.options;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.options;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.getToken(),  this.options;	  Option    currentToken    =    options.getToken(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
176	[BUG]  [BUGGY]  currentOption  =  this.cmd?  options.getRequiredOptions()  :  null;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.cmd?  options.getRequiredOptions()  :  null;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.cmd?  options.getRequiredOptions()  :  null;	  currentOption    =    this.cmd;    	non-compiled	[CE]  ')'  expected	38	None	replace
177	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getRequiredOptions()));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getRequiredOptions()));  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getRequiredOptions()));	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	46	None	replace
178	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrequiredOptions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getPrequiredOptions());	  currentOption    =    new    Option(options.getRequiredOptions(),    options.getRequiredOptions());    	non-compiled	[CE]  ')'  expected	46	None	replace
179	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.paramParsing);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(),  this.paramParsing);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(),  this.paramParsing);	  Option    currentOption    =    options.getRequiredOption(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
180	[BUG]  [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(options[1]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  arguments.getRequiredOption(options[1]);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  arguments.getRequiredOption(options[1]);	  Option    currentOption    =    options.getRequiredOption(arguments[1]);    	non-compiled	[CE]  ')'  expected	43	None	replace
181	[BUG]  [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptionGroups());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptionGroups());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  new  Option(options.getRequiredOptions(),  options.getOptionGroups());	  currentOption    =    new    Option(options.getRequiredOptions());    	non-compiled	[CE]  ')'  expected	45	None	replace
182	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options,  options.getRequiredOptions();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  options,  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  options,  options.getRequiredOptions();	  OptionGroup    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  ';'  expected	51	None	replace
183	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOption(options);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOption(options);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  currentOption  =  options.getRequiredOption(options);	  OptionGroup    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  ')'  expected	51	None	replace
184	[BUG]  [BUGGY]  options  currentOption  =  options.getRequiredOptionGroups();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options  currentOption  =  options.getRequiredOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options  currentOption  =  options.getRequiredOptionGroups();	  Options    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  ')'  expected	55	None	replace
185	[BUG]  [BUGGY]  Options  currentOption  =  options.getRequiredOption(argument);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Options  currentOption  =  options.getRequiredOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Options  currentOption  =  options.getRequiredOption(argument);	  Options    currentOption    =    options.getRequiredOption();    	non-compiled	[CE]  ')'  expected	31	None	replace
186	[BUG]  [BUGGY]  currentOption  =  this.cmd.toString();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  this.cmd.toString();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  this.cmd.toString();	  currentOption    =    cmd.toString();    	non-compiled	[CE]  ')'  expected	19	None	replace
187	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.optionToken);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.optionToken);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.skipParsing,  this.optionToken);	  Option    currentOption    =    options.getRequiredOption(this.skipParsing);    	non-compiled	[CE]  ')'  expected	26	None	replace
188	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  arguments);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(this.options,  arguments);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(this.options,  arguments);	  Option    currentOption    =    options.getRequiredOption(this.options);    	non-compiled	[CE]  ')'  expected	35	None	replace
189	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  options);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument,  options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(argument,  options);	  Option    currentOption    =    options.getRequiredOption(argument,    option);    	non-compiled	[CE]  ')'  expected	60	None	replace
190	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  options,  null);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  options,  null);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  options,  null);	  Option    currentOption    =    options.getRequiredOption(arguments[0],    options);    	non-compiled	[CE]  ')'  expected	57	None	replace
191	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1])+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1])+  1;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1])+  1;	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[1]);    	non-compiled	[CE]  ')'  expected	12	None	replace
192	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]).options;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]).options;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0],  arguments[1]).options;	  Option    currentOption    =    options.getRequiredOption(arguments[0],    arguments[1]);    	non-compiled	[CE]  ')'  expected	12	None	replace
193	[BUG]  [BUGGY]  OptionGroup  group  =  options.groups()  &&  options.getOptionGroups();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.groups()  &&  options.getOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.groups()  &&  options.getOptionGroups();	  OptionGroup    group    =    options.groups();    	non-compiled	[CE]  ')'  expected	53	None	replace
194	[BUG]  [BUGGY]  options  =  options.getRequiredOptions();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  options  =  options.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	options  =  options.getRequiredOptions();	  Option    currentOption    =    option.getRequiredOptions();    	non-compiled	[CE]  ')'  expected	34	None	replace
195	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  null;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  null;  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getGroups(),  null;	  OptionGroup    group    =    options.getGroups(),    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
196	[BUG]  [BUGGY]  Option  currentToken  =  option.getToken(),  options.getRequiredOptions();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  option.getToken(),  options.getRequiredOptions();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  option.getToken(),  options.getRequiredOptions();	  Option    currentToken    =    option.getToken();    	non-compiled	[CE]  ';'  expected	36	None	replace
197	[BUG]  [BUGGY]  Option  currentToken  =  this.option.getToken();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  this.option.getToken();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  this.option.getToken();	  Option    currentToken    =    option.getToken();    	non-compiled	[CE]  ')'  expected	36	None	replace
198	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getOptionGroup(options);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  ')'  expected	40	None	replace
199	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(options);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  options.getOptionGroups(options);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  ')'  expected	40	None	replace
200	[BUG]  [BUGGY]  currentOption  =  options,  option.options;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options,  option.options;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options,  option.options;	  currentOption    =    option.options;    	non-compiled	[CE]  ';'  expected	5	None	replace
201	[BUG]  [BUGGY]  currentOption  =  options.getOptionGroup(options);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  options.getOptionGroup(options);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  options.getOptionGroup(options);	  currentOption    =    options.getOptionGroups();    	non-compiled	[CE]  ')'  expected	54	None	replace
202	[BUG]  [BUGGY]  currentOption  =  cmd.options();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.options();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.options();	  currentOption    =    cmd.options;    	non-compiled	[CE]  ')'  expected	17	None	replace
203	[BUG]  [BUGGY]  currentOption  =  cmd.getOptions();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.getOptions();	  currentOption    =    cmd.options;    	non-compiled	[CE]  ')'  expected	17	None	replace
204	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(argument,  null);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(argument,  null);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(argument,  null);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  ')'  expected	37	None	replace
205	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(argument,  true);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(argument,  true);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(argument,  true);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  ')'  expected	37	None	replace
206	[BUG]  [BUGGY]  Option  currentToken  =  options.selectToken(argument,  false);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentToken  =  options.selectToken(argument,  false);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentToken  =  options.selectToken(argument,  false);	  Option    currentToken    =    options.selectToken(argument);    	non-compiled	[CE]  ')'  expected	37	None	replace
207	[BUG]  [BUGGY]  currentOption  =  group.getOptionGroup();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  group.getOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  group.getOptionGroup();	  currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  ')'  expected	56	None	replace
208	[BUG]  [BUGGY]  Option  currentOption  =  options.getImplicitRequiredOption(argument);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getImplicitRequiredOption(argument);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getImplicitRequiredOption(argument);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  ')'  expected	27	None	replace
209	[BUG]  [BUGGY]  OptionGroup  group  =  groups.getGroups();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  OptionGroup  group  =  groups.getGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	OptionGroup  group  =  groups.getGroups();	  OptionGroup    group    =    this.options.getGroups();    	non-compiled	[CE]  ')'  expected	6	None	replace
210	[BUG]  [BUGGY]  currentOption  =  cmd.parse();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  currentOption  =  cmd.parse();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	currentOption  =  cmd.parse();	  currentOption    =    cmd.cloneTree();    	non-compiled	[CE]  ')'  expected	18	None	replace
211	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  option);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  option);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  option);	  Option    currentOption    =    options.getRequiredOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	1	None	replace
212	[BUG]  [BUGGY]  Option  currentOption  =  options,  options.getRequiredOptionGroups();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options,  options.getRequiredOptionGroups();  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options,  options.getRequiredOptionGroups();	  Option    currentOption    =    options.getRequiredOptionGroups();    	non-compiled	[CE]  ';'  expected	47	None	replace
213	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.options);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;      [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.options);  [BUGGY]      currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	105	105	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  this.stopAtNonOption,  this.options);	  Option    currentOption    =    options.getRequiredOption(arguments,    this.stopAtNonOption);    	non-compiled	[CE]  ')'  expected	52	None	replace
