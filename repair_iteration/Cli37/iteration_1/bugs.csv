bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action2	[BUG]  [BUGGY]  String  opt  =  t.substring(0,  i);  [CE]  variable  i  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =  t.substring(0,  i);  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =  t.substring(0,  i);	String  opt  =  null;  	non-compiled	[CE]  variable  i  might  not  have  been  initialized	13	None	replace
4	[BUG]  [BUGGY]  String  opt  =  t.substring(i  +  1);  [CE]  variable  i  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =  t.substring(i  +  1);  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =  t.substring(i  +  1);	String  opt  =  null;  	non-compiled	[CE]  variable  i  might  not  have  been  initialized	13	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  opt  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	  	String  opt  =  null;  	non-compiled	[CE]  cannot  find  symbol  opt	13	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1
12	[BUG]  [BUGGY]  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1	replace
13	[BUG]  [BUGGY]  else  if(!getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  [CE]  bad  operand  type  String  for  unary  operator  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(!getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(!getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	7	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(token)  ==  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	else  if(getLongPrefix(token)  ==  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1
15	[BUG]  [BUGGY]  else  if(getLongPrefix(token)  ==  null  &&!token.startsWith( "- "))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(token)  ==  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongPrefix(token)  ==  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1	replace
15	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	  	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  break;  }  [CE]  break  outside  switch  or  loop  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  break;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    if(options.hasLongOption(token))  {  break;  }		non-compiled	[CE]  break  outside  switch  or  loop	12	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  stopAtNonOption  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    boolean  stopAtNonOption  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
23	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.hasLongOption(token);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  stopAtNonOption  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  stopAtNonOption  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
23	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  int  i  =  options.size();  if(i  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  int  i  =  options.size();  if(i  >  0)  {  break;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    if(options.hasLongOption(token))  {  int  i  =  options.size();  if(i  >  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
24	[BUG]  [BUGGY]    token  =  token.substring(0,  i);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    token  =  token.substring(0,  i);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    token  =  token.substring(0,  i);		non-compiled	[CE]  cannot  find  symbol  i	12	None	add
25	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  for(String  argument  :  options.values())  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  for(String  argument  :  options.values())  {  break;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    if(options.hasLongOption(token))  {  for(String  argument  :  options.values())  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	add	    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1
32	[BUG]  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	add	    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1
33	[BUG]  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	add	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1
34	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	add	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1
35	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	add	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1
36	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  else  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	10	1	add
41	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
42	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
43	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  if(opt.length()  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(token))  {  if(opt.length()  >  0)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(token))  {  if(opt.length()  >  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
44	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  break;  }  [CE]  break  outside  switch  or  loop  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(token))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(token))  {  break;  }		non-compiled	[CE]  break  outside  switch  or  loop	16	None	add
45	[BUG]  [BUGGY]    if(options.hasLongOption(t))  {  break;  }  [CE]  break  outside  switch  or  loop  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(t))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(t))  {  break;  }		non-compiled	[CE]  break  outside  switch  or  loop	16	None	add
52	[BUG]  [BUGGY]  if(!options.hasLongPrefix(prefix))  {  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(!options.hasLongPrefix(prefix))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(!options.hasLongPrefix(prefix))  {	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
53	[BUG]  [BUGGY]  if(options.hasLongOption(prefix)||  options.hasLongValue(prefix))  {  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongOption(prefix)||  options.hasLongValue(prefix))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(options.hasLongOption(prefix)||  options.hasLongValue(prefix))  {	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
54	[BUG]  [BUGGY]  if(options.hasLongOption(prefix)&&  prefix.equals(t.substring(0,  opt)))  {  [CE]  no  suitable  method  found  for  substring(int,String)  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongOption(prefix)&&  prefix.equals(t.substring(0,  opt)))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(options.hasLongOption(prefix)&&  prefix.equals(t.substring(0,  opt)))  {	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  no  suitable  method  found  for  substring(int,String)	19	None	replace
55	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	  	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    token  =  token.substring(pos  +  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
62	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    token  =  token.substring(pos  +  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1,  token.length());  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    token  =  token.substring(pos  +  1,  token.length());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
63	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1,  token.length());  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1,  token.length());  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    token  =  token.substring(pos  +  1,  token.length());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
63	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(0,  pos);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    token  =  token.substring(0,  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	4	1
64	[BUG]  [BUGGY]    token  =  token.substring(0,  pos);  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(0,  pos);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    token  =  token.substring(0,  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	4	1	add
64	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    token  =  token.substring(pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	4	1
65	[BUG]  [BUGGY]    token  =  token.substring(pos);  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    token  =  token.substring(pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	4	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1,  token.length()  -  1);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    token  =  token.substring(pos  +  1,  token.length()  -  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
66	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1,  token.length()  -  1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    token  =  token.substring(pos  +  1,  token.length()  -  1);  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    token  =  token.substring(pos  +  1,  token.length()  -  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i  +  1);  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	String  prefix  =  t.substring(0,  i  +  1);	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1
73	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i  +  1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i  +  1);  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i  +  1);	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1	replace
73	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i).toLongBits(opt);  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i).toLongBits(opt);  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i).toLongBits(opt);	String  prefix  =  t.substring(0,  i);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i)+  1;  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	String  prefix  =  t.substring(0,  i)+  1;	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1
75	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i)+  1;  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i)+  1;  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i)+  1;	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1	replace
75	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  prefix  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	  	String  prefix  =  t.substring(0,  i);  	non-compiled	[CE]  cannot  find  symbol  prefix	17	None	replace
82	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(value);  [CE]  cannot  find  symbol  value  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(value);  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(value);	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  cannot  find  symbol  value	11	None	replace
83	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(boolean);  [CE]  '.class'  expected  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(boolean);  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(boolean);	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  '.class'  expected	11	None	replace
84	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(op);  [CE]  cannot  find  symbol  op  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(op);  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(op);	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  cannot  find  symbol  op	11	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]  for(i  =  t.length();  i  >  1;  i--)  {  [BUGGY]  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	add	for(i  =  t.length();  i  >  1;  i--)  {	for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	15	1
92	[BUG]  [BUGGY]  for(i  =  t.length();  i  >  1;  i--)  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]  for(i  =  t.length();  i  >  1;  i--)  {  [BUGGY]  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	for(i  =  t.length();  i  >  1;  i--)  {	for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	15	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]  for(i  =  t.length();  i  >  2;  i--)  {  [BUGGY]  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	add	for(i  =  t.length();  i  >  2;  i--)  {	for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	15	1
95	[BUG]  [BUGGY]  for(i  =  t.length();  i  >  2;  i--)  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]  for(i  =  t.length();  i  >  2;  i--)  {  [BUGGY]  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	for(i  =  t.length();  i  >  2;  i--)  {	for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	15	1	replace
102	[BUG]  [BUGGY]  if(!options.getMatchingOptions(t).isLong())  {  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t).isLong())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(!options.getMatchingOptions(t).isLong())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(pos  >  0  ||!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	if(pos  >  0  ||!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1
104	[BUG]  [BUGGY]  if(pos  >  0  ||!options.getMatchingOptions(t).isEmpty())  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(pos  >  0  ||!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(pos  >  0  ||!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t).isEmpty()  ||  pos  >  0)  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	if(!options.getMatchingOptions(t).isEmpty()  ||  pos  >  0)  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1
105	[BUG]  [BUGGY]  if(!options.getMatchingOptions(t).isEmpty()  ||  pos  >  0)  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t).isEmpty()  ||  pos  >  0)  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(!options.getMatchingOptions(t).isEmpty()  ||  pos  >  0)  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1	replace
105	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	  	if  (!options.getMatchingOptions(t).isEmpty())  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "- ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.indexOf( "- ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
112	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "- ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "- ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "- ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.lastIndexOf( "= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.lastIndexOf( "= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
113	[BUG]  [BUGGY]  int  pos  =  token.lastIndexOf( "= ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.lastIndexOf( "= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.lastIndexOf( "= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "-1 ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.indexOf( "-1 ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
114	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "-1 ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "-1 ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "-1 ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
115	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  pos  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	  	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  cannot  find  symbol  pos	1	None	replace
121	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  break;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
122	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.getLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.length()  >  0)  {  if(options.getLongOption(prefix))  {  break;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.length()  >  0)  {  if(options.getLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
123	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
124	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  option;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  option;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.length()  >  0)  {  if(options.hasLongOption(prefix))  {  opt  =  option;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    opt  =  t.substring(i  +  1,  prefix.length());  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	add	    opt  =  t.substring(i  +  1,  prefix.length());		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	20	1
126	[BUG]  [BUGGY]    opt  =  t.substring(i  +  1,  prefix.length());  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    opt  =  t.substring(i  +  1,  prefix.length());  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    opt  =  t.substring(i  +  1,  prefix.length());		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	20	1	add
131	[BUG]  [BUGGY]  String  t  =  token.length  ==  -1?  token  :  token.substring(0,  pos);  [CE]  cannot  find  symbol  length  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]  String  t  =  token.length  ==  -1?  token  :  token.substring(0,  pos);  [BUGGY]    if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	String  t  =  token.length  ==  -1?  token  :  token.substring(0,  pos);	String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
132	[BUG]  [BUGGY]  String  t  =  token!=  -1?  token  :  token.substring(0,  pos);  [CE]  incomparable  types:  String  and  int  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]  String  t  =  token!=  -1?  token  :  token.substring(0,  pos);  [BUGGY]    if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	String  t  =  token!=  -1?  token  :  token.substring(0,  pos);	String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  	non-compiled	[CE]  incomparable  types:  String  and  int	3	None	replace
133	[BUG]  [BUGGY]  String  t  =  token  ==  -1?  token  :  token.substring(0,  pos);  [CE]  incomparable  types:  String  and  int  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]  String  t  =  token  ==  -1?  token  :  token.substring(0,  pos);  [BUGGY]    if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	String  t  =  token  ==  -1?  token  :  token.substring(0,  pos);	String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  	non-compiled	[CE]  incomparable  types:  String  and  int	3	None	replace
141	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    opt  =  t.substring(i  +  1,  i);  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	    opt  =  t.substring(i  +  1,  i);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	18	1
142	[BUG]  [BUGGY]    opt  =  t.substring(i  +  1,  i);  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    opt  =  t.substring(i  +  1,  i);  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    opt  =  t.substring(i  +  1,  i);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	18	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(opt))  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	    if(options.hasLongOption(opt))  {  break;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	18	1
144	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  break;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(opt))  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(opt))  {  break;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	18	1	add
144	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(token))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
145	[BUG]  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
151	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(currentToken))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(currentToken))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(options.hasLongOption(currentToken))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
152	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(token))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(token))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(options.hasLongOption(token))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
153	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(currentOption))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(currentOption))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(options.hasLongOption(currentOption))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
154	[BUG]  [BUGGY]    if(options.hasLongOption(currentToken))  {  if(!currentToken.equals(t))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(options.hasLongOption(currentToken))  {  if(!currentToken.equals(t))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(options.hasLongOption(currentToken))  {  if(!currentToken.equals(t))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
155	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  if(!currentOption.hasLongOption(t))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(options.hasLongOption(token))  {  if(!currentOption.hasLongOption(t))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(options.hasLongOption(token))  {  if(!currentOption.hasLongOption(t))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
161	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	    if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1
162	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1	add
162	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
163	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1
164	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1	add
164	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1
165	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	8	1	add
165	[BUG]  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.length()  -  1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    token  =  token.substring(0,  token.length()  -  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1
172	[BUG]  [BUGGY]    token  =  token.substring(0,  token.length()  -  1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.length()  -  1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(0,  token.length()  -  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1	add
172	[BUG]  [BUGGY]    token  =  token.substring(0,  pos);  [CE]  cannot  find  symbol  pos  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  pos);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(0,  pos);		non-compiled	[CE]  cannot  find  symbol  pos	2	None	add
173	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1,  token.length());  [CE]  cannot  find  symbol  pos  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(pos  +  1,  token.length());  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(pos  +  1,  token.length());		non-compiled	[CE]  cannot  find  symbol  pos	2	None	add
175	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1);  [CE]  cannot  find  symbol  pos  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(pos  +  1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(pos  +  1);		non-compiled	[CE]  cannot  find  symbol  pos	2	None	add
182	[BUG]  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;  }  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;  }  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;  }	return  false;  	non-compiled	[CE]  	9	None	replace
183	[BUG]  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  true;  }  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  true;  }  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  true;  }	return  false;  	non-compiled	[CE]  	9	None	replace
184	[BUG]  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	return  pos  <  0  &&(getLongPrefix(token)!=  null  &&!token.startsWith( "- ")))  {  return  false;	return  false;  	non-compiled	[CE]  	9	None	replace
191	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos  +  1);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    token  =  token.substring(pos  +  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1
192	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos  +  1);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    token  =  token.substring(pos  +  1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos  +  1,  t.length());  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    token  =  token.substring(pos  +  1,  t.length());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1
193	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1,  t.length());  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos  +  1,  t.length());  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    token  =  token.substring(pos  +  1,  t.length());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1	add
193	[BUG]  [BUGGY]    token  =  token.substring(pos,  t);  [CE]  no  suitable  method  found  for  substring(int,String)  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos,  t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    token  =  token.substring(pos,  t);		non-compiled	[CE]  no  suitable  method  found  for  substring(int,String)	6	None	add
194	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    token  =  token.substring(pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	6	1
195	[BUG]  [BUGGY]    token  =  token.substring(pos);  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    token  =  token.substring(pos);		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	6	1	add
195	[BUG]  [BUGGY]    token  =  token.substring(pos  +  1,  t);  [CE]  no  suitable  method  found  for  substring(int,String)  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    token  =  token.substring(pos  +  1,  t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    token  =  token.substring(pos  +  1,  t);		non-compiled	[CE]  no  suitable  method  found  for  substring(int,String)	6	None	add
2	[BUG]  [BUGGY]    pos  =  token.indexOf(' "+getLongPrefix());  [CE]  unclosed  character  literal  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf(' "+getLongPrefix());  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf(' "+getLongPrefix());		non-compiled	[CE]  unclosed  character  literal	4	None	add
3	[BUG]  [BUGGY]    pos  =  token.indexOf(' "+getLongValue());  [CE]  unclosed  character  literal  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf(' "+getLongValue());  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf(' "+getLongValue());		non-compiled	[CE]  unclosed  character  literal	4	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf('+');  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    pos  =  token.indexOf('+');		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
6	[BUG]  [BUGGY]    pos  =  token.indexOf('+');  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf('+');  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf('+');		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1
22	[BUG]  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "- "))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "-- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	add	else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "-- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1
23	[BUG]  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "-- "))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "-- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongPrefix(t)!=  null  &&!token.startsWith( "-- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	7	1	replace
24	[BUG]  [BUGGY]  else  if(getLongOpt(token)!=  null  &&!token.startsWith( "-- "))  {  [CE]  cannot  find  symbol  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongOpt(token)!=  null  &&!token.startsWith( "-- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongOpt(token)!=  null  &&!token.startsWith( "-- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
41	[BUG]  [BUGGY]  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    boolean  stopAtNonOption  =  isLongOption(t);		compilable	  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue	6	1
42	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(t);  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    boolean  stopAtNonOption  =  isLongOption(t);		compilable	  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue	6	1	add
42	[BUG]  [BUGGY]    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  false;  }  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
43	[BUG]  [BUGGY]    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  true;  }  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    if(t!=  null)  {  if(getLongPrefix(token)!=  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
44	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.isAtNonOption(t);  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    boolean  stopAtNonOption  =  options.isAtNonOption(t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    boolean  stopAtNonOption  =  options.isAtNonOption(t);		non-compiled	[CE]  cannot  find  symbol	6	None	add
45	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.isLongOption(t);  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    boolean  stopAtNonOption  =  options.isLongOption(t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    boolean  stopAtNonOption  =  options.isLongOption(t);		non-compiled	[CE]  cannot  find  symbol	6	None	add
62	[BUG]  [BUGGY]  String  t  =  Util.precedenceHyphens(token);  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.precedenceHyphens(token);  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.precedenceHyphens(token);	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+  1;  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	String  t  =  Util.stripLeadingHyphens(token)+  1;	String  t  =  Util.stripLeadingHyphens(token);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	11	1
65	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+  1;  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+  1;  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(token)+  1;	String  t  =  Util.stripLeadingHyphens(token);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	11	1	replace
81	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
82	[BUG]  [BUGGY]    if(t.length()  ==  0)  {  if(options.hasLongOption(t))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  ==  0)  {  if(options.hasLongOption(t))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  ==  0)  {  if(options.hasLongOption(t))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
83	[BUG]  [BUGGY]    if(t!=  null)  {  if(options.hasLongOption(t))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t!=  null)  {  if(options.hasLongOption(t))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t!=  null)  {  if(options.hasLongOption(t))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
84	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  continue;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
85	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  continue;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(options.hasLongOption(t))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
102	[BUG]  [BUGGY]  return(getLongValue(token)!=  null  &&!token.startsWith( "- "))  {  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return(getLongValue(token)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	return(getLongValue(token)!=  null  &&!token.startsWith( "- "))  {	return  false;  	non-compiled	[CE]  	9	None	replace
103	[BUG]  [BUGGY]  return(getLongValue(token)!=  null  &&!token.startsWith( "- ")))  {  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  return(getLongValue(token)!=  null  &&!token.startsWith( "- ")))  {  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	return(getLongValue(token)!=  null  &&!token.startsWith( "- ")))  {	return  false;  	non-compiled	[CE]  	9	None	replace
121	[BUG]  [BUGGY]    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  continue;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
122	[BUG]  [BUGGY]    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  continue;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
123	[BUG]  [BUGGY]    if(prefix!=  null)  {  if(opt.equals(prefix))  {  return  opt;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(prefix!=  null)  {  if(opt.equals(prefix))  {  return  opt;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(prefix!=  null)  {  if(opt.equals(prefix))  {  return  opt;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
124	[BUG]  [BUGGY]    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  return  token;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  return  token;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(prefix!=  null)  {  if(opt.length()  ==  0)  {  return  token;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
125	[BUG]  [BUGGY]    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  return  opt;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  return  opt;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(prefix!=  null)  {  if(options.hasLongOption(prefix))  {  return  opt;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
141	[BUG]  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
142	[BUG]  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
143	[BUG]  [BUGGY]    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
144	[BUG]  [BUGGY]    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.startsWith( "-- "))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
145	[BUG]  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals(token))  {  if(getLongPrefix(token)!=  null  &&!token.startsWith( "-- "))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
161	[BUG]  [BUGGY]    cmd.addOption(token);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token);  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	10	None	add
162	[BUG]  [BUGGY]    cmd.addOption(opt);  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(opt);  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(opt);		non-compiled	[CE]  cannot  find  symbol  opt	10	None	add
163	[BUG]  [BUGGY]    cmd.addOption(option);  [CE]  cannot  find  symbol  option  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(option);  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(option);		non-compiled	[CE]  cannot  find  symbol  option	10	None	add
164	[BUG]  [BUGGY]    getLongValue(token));  [CE]  ';'  expected  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    getLongValue(token));  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    getLongValue(token));		non-compiled	[CE]  ';'  expected	10	None	add
165	[BUG]  [BUGGY]    cmd.addOption(token,  opt);  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token,  opt);  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token,  opt);		non-compiled	[CE]  cannot  find  symbol  opt	10	None	add
184	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]  String  t  =  pos  ==  2?  token  :  token.substring(0,  pos);  [BUGGY]    if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	String  t  =  pos  ==  2?  token  :  token.substring(0,  pos);	String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  	compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	3	1
185	[BUG]  [BUGGY]  String  t  =  pos  ==  2?  token  :  token.substring(0,  pos);  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]  String  t  =  pos  ==  2?  token  :  token.substring(0,  pos);  [BUGGY]    if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	String  t  =  pos  ==  2?  token  :  token.substring(0,  pos);	String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  	compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	3	1	replace
222	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "-= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.indexOf( "-= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
223	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "-= ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "-= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "-= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
223	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "+ "  = ");  [CE]  unclosed  string  literal  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "+ "  = ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "+ "  = ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  unclosed  string  literal	1	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "$= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.indexOf( "$= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
225	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "$= ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "$= ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "$= ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
243	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i).prefix;  [CE]  cannot  find  symbol  prefix  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i).prefix;  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i).prefix;	String  prefix  =  t.substring(0,  i);  	non-compiled	[CE]  cannot  find  symbol  prefix	17	None	replace
244	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i).prefix);  [CE]  ';'  expected  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i).prefix);  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i).prefix);	String  prefix  =  t.substring(0,  i);  	non-compiled	[CE]  ';'  expected	17	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(t!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	if(t!=  null  &&!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1
263	[BUG]  [BUGGY]  if(t!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(t!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(t!=  null  &&!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1	replace
263	[BUG]  [BUGGY]  if(!options.getMatchingOptions(t)).isEmpty())  {  [CE]  illegal  start  of  expression  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t)).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(!options.getMatchingOptions(t)).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
264	[BUG]  [BUGGY]  if(!options.getMatchingOptions(t))  {  [CE]  bad  operand  type  List<String>  for  unary  operator  '!'  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t))  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(!options.getMatchingOptions(t))  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	non-compiled	[CE]  bad  operand  type  List<String>  for  unary  operator  '!'	5	None	replace
281	[BUG]  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  return  opt;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  return  opt;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  return  opt;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
282	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  return  opt;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  return  opt;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  return  opt;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
284	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
285	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
301	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(prefix!=  null  &&  options.hasLongOption(prefix))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	add	if(prefix!=  null  &&  options.hasLongOption(prefix))  {	if  (options.hasLongOption(prefix))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	19	1
302	[BUG]  [BUGGY]  if(prefix!=  null  &&  options.hasLongOption(prefix))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(prefix!=  null  &&  options.hasLongOption(prefix))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(prefix!=  null  &&  options.hasLongOption(prefix))  {	if  (options.hasLongOption(prefix))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	19	1	replace
303	[BUG]  [BUGGY]  if(options.hasLongPrefix(prefix))  {  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongPrefix(prefix))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(options.hasLongPrefix(prefix))  {	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    token  =  token.substring(1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1
323	[BUG]  [BUGGY]    token  =  token.substring(1);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(1);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1	add
323	[BUG]  [BUGGY]  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    boolean  stopAtNonOption  =  isLongOption(token);		compilable	  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue	2	1
324	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(token);  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  stopAtNonOption  =  isLongOption(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    boolean  stopAtNonOption  =  isLongOption(token);		compilable	  [FE]  StackOverflowError  shouldParseShortOptionWithoutValue	2	1	add
324	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isLong(token);  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  stopAtNonOption  =  isLong(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    boolean  stopAtNonOption  =  isLong(token);		non-compiled	[CE]  cannot  find  symbol	2	None	add
325	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isLongOpt(token);  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  stopAtNonOption  =  isLongOpt(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    boolean  stopAtNonOption  =  isLongOpt(token);		non-compiled	[CE]  cannot  find  symbol	2	None	add
342	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  return  null;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    if(options.hasLongOption(token))  {  return  null;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
343	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  return  null;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  return  null;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    if(options.hasLongOption(token))  {  return  null;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
343	[BUG]  [BUGGY]    if(options.hasLongOption(token))  {  continue;  }  [CE]  continue  outside  of  loop  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    if(options.hasLongOption(token))  {  continue;  }  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    if(options.hasLongOption(token))  {  continue;  }		non-compiled	[CE]  continue  outside  of  loop	12	None	add
344	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isEnabled(Option.getLongOpt(token));  [CE]  method  getLongOpt  in  class  Option  cannot  be  applied  to  given  types;  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  stopAtNonOption  =  isEnabled(Option.getLongOpt(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  stopAtNonOption  =  isEnabled(Option.getLongOpt(token));		non-compiled	[CE]  method  getLongOpt  in  class  Option  cannot  be  applied  to  given  types;	12	None	add
345	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  isEnabled(Option.getLongValue());  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  stopAtNonOption  =  isEnabled(Option.getLongValue());  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  stopAtNonOption  =  isEnabled(Option.getLongValue());		non-compiled	[CE]  cannot  find  symbol	12	None	add
363	[BUG]  [BUGGY]  String  opt  =(t  ==  null)?  null  :  t.substring(i  +  1);  [CE]  variable  i  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =(t  ==  null)?  null  :  t.substring(i  +  1);  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =(t  ==  null)?  null  :  t.substring(i  +  1);	String  opt  =  null;  	non-compiled	[CE]  variable  i  might  not  have  been  initialized	13	None	replace
364	[BUG]  [BUGGY]  String  opt  =(t  ==  null)?  null  :  t.substring(i);  [CE]  variable  i  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =(t  ==  null)?  null  :  t.substring(i);  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =(t  ==  null)?  null  :  t.substring(i);	String  opt  =  null;  	non-compiled	[CE]  variable  i  might  not  have  been  initialized	13	None	replace
382	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(opt))  {  if(opt.length()  ==  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
383	[BUG]  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(t))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
384	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  return  opt;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  return  opt;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(opt.length()  >  0)  {  if(options.hasLongOption(opt))  {  return  opt;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
385	[BUG]  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(opt))  {  if(opt  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
32	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  false;  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  false;  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  false;	return  false;  	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  true;  [CE]  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  true;  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	throw  new  IllegalStateException( " ")  &&  token.token.startsWith( "- "))  {  return  true;	return  false;  	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.contains( "- "  +  token);  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]  throw  new  IllegalStateException( " ")  &&  token.contains( "- "  +  token);  [BUGGY]  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	throw  new  IllegalStateException( " ")  &&  token.contains( "- "  +  token);	return  false;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	9	None	replace
62	[BUG]  [BUGGY]    cmd.addOption(t);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    cmd.addOption(t);  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    cmd.addOption(t);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	6	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    pos  =  token.indexOf( ": "+t.substring(pos  +  1));  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    pos  =  token.indexOf( ": "+t.substring(pos  +  1));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1
64	[BUG]  [BUGGY]    pos  =  token.indexOf( ": "+t.substring(pos  +  1));  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    pos  =  token.indexOf( ": "+t.substring(pos  +  1));  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    pos  =  token.indexOf( ": "+t.substring(pos  +  1));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    pos  =  token.indexOf( ": "+t.toString());  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	    pos  =  token.indexOf( ": "+t.toString());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1
65	[BUG]  [BUGGY]    pos  =  token.indexOf( ": "+t.toString());  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    pos  =  token.indexOf( ": "+t.toString());  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    pos  =  token.indexOf( ": "+t.toString());		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	6	1	add
65	[BUG]  [BUGGY]    pos  =  token.indexOf( ": "+t.getSimpleName());  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]    pos  =  token.indexOf( ": "+t.getSimpleName());  [BUGGY]  if  (!options.getMatchingOptions(t).isEmpty())  {  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	    pos  =  token.indexOf( ": "+t.getSimpleName());		non-compiled	[CE]  cannot  find  symbol	6	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i).toLowerCase();  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	String  prefix  =  t.substring(0,  i).toLowerCase();	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1
94	[BUG]  [BUGGY]  String  prefix  =  t.substring(0,  i).toLowerCase();  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]  String  prefix  =  t.substring(0,  i).toLowerCase();  [BUGGY]  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	String  prefix  =  t.substring(0,  i).toLowerCase();	String  prefix  =  t.substring(0,  i);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	17	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.length()  -  2);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    token  =  token.substring(0,  token.length()  -  2);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1
123	[BUG]  [BUGGY]    token  =  token.substring(0,  token.length()  -  2);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.length()  -  2);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(0,  token.length()  -  2);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  skipParsing  =  token.isEmpty();  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    boolean  skipParsing  =  token.isEmpty();		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1
124	[BUG]  [BUGGY]    boolean  skipParsing  =  token.isEmpty();  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    boolean  skipParsing  =  token.isEmpty();  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    boolean  skipParsing  =  token.isEmpty();		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1	add
124	[BUG]  [BUGGY]    String  token  =  token.substring(0,  token.length()  -  1);  [CE]  variable  token  is  already  defined  in  method  isLongOption(String)  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    String  token  =  token.substring(0,  token.length()  -  1);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    String  token  =  token.substring(0,  token.length()  -  1);		non-compiled	[CE]  variable  token  is  already  defined  in  method  isLongOption(String)	2	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.indexOf( "- "));  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	    token  =  token.substring(0,  token.indexOf( "- "));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1
126	[BUG]  [BUGGY]    token  =  token.substring(0,  token.indexOf( "- "));  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]    token  =  token.substring(0,  token.indexOf( "- "));  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	    token  =  token.substring(0,  token.indexOf( "- "));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	2	1	add
151	[BUG]  [BUGGY]    cmd.addOption(opt);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    cmd.addOption(opt);  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    cmd.addOption(opt);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	20	None	add
152	[BUG]  [BUGGY]    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  opt  =  null;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
153	[BUG]  [BUGGY]    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  break;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.equals(prefix))  {  if(options.hasLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
154	[BUG]  [BUGGY]    cmd.addLast(options.getLong(prefix));  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    cmd.addLast(options.getLong(prefix));  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    cmd.addLast(options.getLong(prefix));		non-compiled	[CE]  cannot  find  symbol	20	None	add
155	[BUG]  [BUGGY]    if(opt.getLong()  ==  null)  {  String  prefix  =  token.substring(i  +  1);  if(prefix.length()  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]    if(opt.getLong()  ==  null)  {  String  prefix  =  token.substring(i  +  1);  if(prefix.length()  ==  0)  {  break;  }  [BUGGY]  if  (options.hasLongOption(prefix))    {  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	    if(opt.getLong()  ==  null)  {  String  prefix  =  token.substring(i  +  1);  if(prefix.length()  ==  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
184	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "--> ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	add	int  pos  =  token.indexOf( "--> ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1
185	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "--> ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "--> ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	319	319	1	replace	int  pos  =  token.indexOf( "--> ");	int  pos  =  token.indexOf( "= ");  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	1	1	replace
211	[BUG]  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.hasLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.hasLongOption(prefix))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.hasLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
213	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(value  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(value  ==  null)  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(value  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
214	[BUG]  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.getLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.getLongOption(prefix))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  i);  if(options.getLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
215	[BUG]  [BUGGY]    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  break;  }  [BUGGY]  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	    if(t.length()  >  0)  {  if(!currentToken.equals(token))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
241	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  matchingOpts  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    boolean  matchingOpts  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
242	[BUG]  [BUGGY]    boolean  matchingOpts  =  options.hasLongOption(token);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  matchingOpts  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  matchingOpts  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =(options.hasLongOption(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    boolean  ignore  =(options.hasLongOption(token));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
243	[BUG]  [BUGGY]    boolean  ignore  =(options.hasLongOption(token));  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =(options.hasLongOption(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  ignore  =(options.hasLongOption(token));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
243	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    boolean  ignore  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
244	[BUG]  [BUGGY]    boolean  ignore  =  options.hasLongOption(token);  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =  options.hasLongOption(token);  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  ignore  =  options.hasLongOption(token);		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
244	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongOption(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongOption(token));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1
245	[BUG]  [BUGGY]    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongOption(token));  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongOption(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongOption(token));		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	12	1	add
245	[BUG]  [BUGGY]    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongValue(token));  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongValue(token));  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	    boolean  ignore  =(options.hasLongOption(token)||  options.hasLongValue(token));		non-compiled	[CE]  cannot  find  symbol	12	None	add
301	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    t  =  t.substring(i  +  1,  t.length());  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	add	    t  =  t.substring(i  +  1,  t.length());		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	18	1
302	[BUG]  [BUGGY]    t  =  t.substring(i  +  1,  t.length());  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    t  =  t.substring(i  +  1,  t.length());  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    t  =  t.substring(i  +  1,  t.length());		compilable	  [FE]  StringIndexOutOfBoundsException  shouldParseShortOptionWithoutValue	18	1	add
305	[BUG]  [BUGGY]    opt  =  Util.stripLeadingHyphens(t,  i);  [CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  [BUGGY]    opt  =  Util.stripLeadingHyphens(t,  i);  [BUGGY]  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	576	576	1	replace	    opt  =  Util.stripLeadingHyphens(t,  i);		non-compiled	[CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;	18	None	add
332	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)-  1;  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(token)-  1;	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	11	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+ "[] ";  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	add	String  t  =  Util.stripLeadingHyphens(token)+ "[] ";	String  t  =  Util.stripLeadingHyphens(token);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	11	1
334	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+ "[] ";  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token)+ "[] ";  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(token)+ "[] ";	String  t  =  Util.stripLeadingHyphens(token);  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	11	1	replace
334	[BUG]  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token,  options);  [CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;  [CONTEXT]  private  String  getLongPrefix(String  token)  {  [BUGGY]  String  t  =  Util.stripLeadingHyphens(token,  options);  [BUGGY]    int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	570	570	1	replace	String  t  =  Util.stripLeadingHyphens(token,  options);	String  t  =  Util.stripLeadingHyphens(token);  	non-compiled	[CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;	11	None	replace
361	[BUG]  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
362	[BUG]  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(opt))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(opt))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(opt))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
363	[BUG]  [BUGGY]    if(opt.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(opt.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(opt.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(options.hasLongOption(prefix))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
364	[BUG]  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(prefix  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(prefix  ==  null)  {  break;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(t.length()  >  0)  {  String  prefix  =  token.substring(0,  opt);  if(prefix  ==  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
365	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(t))  {  opt  =  null;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	add	    if(options.hasLongOption(t))  {  opt  =  null;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	16	1
366	[BUG]  [BUGGY]    if(options.hasLongOption(t))  {  opt  =  null;  }  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  [BUGGY]    if(options.hasLongOption(t))  {  opt  =  null;  }  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  return  opt;  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	574	575	1	replace	    if(options.hasLongOption(t))  {  opt  =  null;  }		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	16	1	add
392	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(t  ==  null  &&!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	add	if(t  ==  null  &&!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1
393	[BUG]  [BUGGY]  if(t  ==  null  &&!options.getMatchingOptions(t).isEmpty())  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(t  ==  null  &&!options.getMatchingOptions(t).isEmpty())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(t  ==  null  &&!options.getMatchingOptions(t).isEmpty())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	5	1	replace
394	[BUG]  [BUGGY]  if(!options.getMatchingOptions(t).isSupported())  {  [CE]  cannot  find  symbol  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  [BUGGY]  if(!options.getMatchingOptions(t).isSupported())  {  [BUGGY]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	322	323	1	replace	if(!options.getMatchingOptions(t).isSupported())  {	if  (!options.getMatchingOptions(t).isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
423	[BUG]  [BUGGY]  String  opt  =(opt  ==  null)?  null  :  opt;  [CE]  variable  opt  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =(opt  ==  null)?  null  :  opt;  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =(opt  ==  null)?  null  :  opt;	String  opt  =  null;  	non-compiled	[CE]  variable  opt  might  not  have  been  initialized	13	None	replace
424	[BUG]  [BUGGY]  String  opt  =(opt  ==  null?  null  :  opt.trim());  [CE]  variable  opt  might  not  have  been  initialized  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  [BUGGY]  String  opt  =(opt  ==  null?  null  :  opt.trim());  [BUGGY]  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  if  (options.hasLongOption(prefix))  {  opt  =  prefix;  break;  }  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	573	573	1	replace	String  opt  =(opt  ==  null?  null  :  opt.trim());	String  opt  =  null;  	non-compiled	[CE]  variable  opt  might  not  have  been  initialized	13	None	replace
452	[BUG]  [BUGGY]    cmd.addOption(token,  getLongPrefix(token));  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token,  getLongPrefix(token));  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token,  getLongPrefix(token));		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	10	None	add
453	[BUG]  [BUGGY]    cmd.addOption(token,  getLongValue(token));  [CE]  cannot  find  symbol  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token,  getLongValue(token));  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token,  getLongValue(token));		non-compiled	[CE]  cannot  find  symbol	10	None	add
454	[BUG]  [BUGGY]    cmd.addOption(token);  currentOption  =  null;  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token);  currentOption  =  null;  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token);  currentOption  =  null;		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	10	None	add
455	[BUG]  [BUGGY]    cmd.addOption(token,  token);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  }  [BUGGY]    cmd.addOption(token,  token);  [BUGGY]  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	333	333	1	replace	    cmd.addOption(token,  token);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	10	None	add
484	[BUG]  [BUGGY]  else  if(getLongOpt(token)!=  null  &&!token.startsWith( "- "))  {  [CE]  cannot  find  symbol  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if(getLongOpt(token)!=  null  &&!token.startsWith( "- "))  {  [BUGGY]  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	else  if(getLongOpt(token)!=  null  &&!token.startsWith( "- "))  {	else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
511	[BUG]  [BUGGY]    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
512	[BUG]  [BUGGY]    if(getLongOpt(token)!=  null)  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(getLongOpt(token)!=  null)  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(getLongOpt(token)!=  null)  {  if(!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
513	[BUG]  [BUGGY]    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
514	[BUG]  [BUGGY]    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals( "- "))  {  if(getLongOpt(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
515	[BUG]  [BUGGY]    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  int  pos  =  token.indexOf( "= ");  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  [BUGGY]  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  {  return  true;  }  return  false;  }  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	327	328	1	replace	    if(t.equals( "- "))  {  if(getLongPrefix(token)!=  null  &&!options.getMatchingOptions(t).isEmpty())  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
543	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "$$ ")+  1;  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    pos  =  token.indexOf( "$$ ")+  1;		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
544	[BUG]  [BUGGY]    pos  =  token.indexOf( "$$ ")+  1;  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "$$ ")+  1;  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf( "$$ ")+  1;		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
544	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "$$ ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    pos  =  token.indexOf( "$$ ");		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
545	[BUG]  [BUGGY]    pos  =  token.indexOf( "$$ ");  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "$$ ");  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf( "$$ ");		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
545	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "- ")+  1;  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	add	    pos  =  token.indexOf( "- ")+  1;		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1
546	[BUG]  [BUGGY]    pos  =  token.indexOf( "- ")+  1;  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  boolean  isLongOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  [BUGGY]    pos  =  token.indexOf( "- ")+  1;  [BUGGY]  String  t  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  if  (!options.getMatchingOptions(t).isEmpty())  {  return  true;  }  else  if  (getLongPrefix(token)  !=  null  &&  !token.startsWith( "-- "))  {  return  true;  [CLASS]  DefaultParser  [METHOD]  isLongOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  t  token  value  int  pos  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	320	320	1	replace	    pos  =  token.indexOf( "- ")+  1;		compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	4	1	add
573	[BUG]  [BUGGY]  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongOption(prefix)||(options.hasLongOption(prefix)))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	add	if(options.hasLongOption(prefix)||(options.hasLongOption(prefix)))  {	if  (options.hasLongOption(prefix))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	19	1
574	[BUG]  [BUGGY]  if(options.hasLongOption(prefix)||(options.hasLongOption(prefix)))  {  [FE]  AssertionError  shouldParseShortOptionWithoutValue  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongOption(prefix)||(options.hasLongOption(prefix)))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(options.hasLongOption(prefix)||(options.hasLongOption(prefix)))  {	if  (options.hasLongOption(prefix))  {  	compilable	  [FE]  AssertionError  shouldParseShortOptionWithoutValue	19	1	replace
574	[BUG]  [BUGGY]  if(options.hasLongOption(prefix)||(options.hasLongValue(prefix)))  {  [CE]  cannot  find  symbol  [CONTEXT]  private  String  getLongPrefix(String  token)  {  String  t  =  Util.stripLeadingHyphens(token);  int  i;  String  opt  =  null;  for  (i  =  t.length()  -  2;  i  >  1;  i--)  {  String  prefix  =  t.substring(0,  i);  [BUGGY]  if(options.hasLongOption(prefix)||(options.hasLongValue(prefix)))  {  [BUGGY]  {  opt  =  prefix;  break;  }  }  return  opt;  }  [CLASS]  DefaultParser  [METHOD]  getLongPrefix  [RETURN_TYPE]  String  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  option  List  expectedOpts  matchingOpts  String  argument  currentToken  opt  option  prefix  t  token  value  int  i  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	1.0	577	578	1	replace	if(options.hasLongOption(prefix)||(options.hasLongValue(prefix)))  {	if  (options.hasLongOption(prefix))  {  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
