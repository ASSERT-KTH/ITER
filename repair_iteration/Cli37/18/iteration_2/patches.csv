bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(false);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(false);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(false);	  OptionGroup    group    =    options.getGroup(true);    	non-compiled	[CE]  ';'  expected	39	None	replace
2	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(false,  currentToken);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(false,  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(false,  currentToken);	  OptionGroup    group    =    options.getGroup(true);    	non-compiled	[CE]  ';'  expected	39	None	replace
3	[BUG]  [BUGGY]  if(options!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
4	[BUG]  [BUGGY]  if(options  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  if(options!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptionGroups()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  if(options.getOptionGroups()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptionGroups()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
8	[BUG]  [BUGGY]  OptionGroup  group  =  options.getRequiredOptionGroups();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getRequiredOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getRequiredOptionGroups();	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  ';'  expected	66	None	replace
9	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup();	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  ';'  expected	66	None	replace
10	[BUG]  [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
11	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
12	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  ';'  expected	25	None	replace
13	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  if(options.getOptionPositions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionPositions());    }    	non-compiled	[CE]  ';'  expected	22	None	replace
14	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  currentToken);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  currentToken);	  Option    currentToken    =    options.getRequiredOption(currentToken,    argument);    	non-compiled	[CE]  ';'  expected	77	None	replace
15	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  argument);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  argument);	  Option    currentToken    =    options.getRequiredOption(currentToken,    argument);    	non-compiled	[CE]  ';'  expected	77	None	replace
16	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  argument);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  argument);	  Option    currentToken    =    options.getRequiredOption(currentToken,    argument);    	non-compiled	[CE]  ';'  expected	77	None	replace
17	[BUG]  [BUGGY]  Option  group  =  options.getRequiredOptions();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getRequiredOptions();	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ';'  expected	19	None	replace
18	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroups();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getOptionGroups();	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ';'  expected	19	None	replace
19	[BUG]  [BUGGY]  Option  group  =  options.getGroups(),  currentToken);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroups(),  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroups(),  currentToken);	  Option    group    =    options.getGroups();    	non-compiled	[CE]  ';'  expected	19	None	replace
20	[BUG]  [BUGGY]  options.addAll(options.getOptions());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options.addAll(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options.addAll(options.getOptions());	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  ';'  expected	64	None	replace
21	[BUG]  [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  ';'  expected	64	None	replace
22	[BUG]  [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()    >=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  ';'  expected	60	None	replace
23	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  this.options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  this.options.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	1	None	replace
24	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  ';'  expected	24	None	replace
25	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  ';'  expected	24	None	replace
26	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  ';'  expected	24	None	replace
27	[BUG]  [BUGGY]  Option  options  =  options.getOptionOptions();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  options.getOptionOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  options.getOptionOptions();	  Option    options    =    options.getOptionGroups();    	non-compiled	[CE]  ';'  expected	75	None	replace
28	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptionGroups();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  currentOption.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  currentOption.getOptionGroups();	  Option    options    =    options.getOptionGroups();    	non-compiled	[CE]  ';'  expected	75	None	replace
29	[BUG]  [BUGGY]  if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionPositions());  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionPositions());  }	  expectedOpts    =    new    LinkedList(options.getOptionPositions());    	non-compiled	[CE]  ';'  expected	82	None	replace
30	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionPositions());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionPositions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionPositions());	  expectedOpts    =    new    LinkedList(options.getOptionPositions());    	non-compiled	[CE]  ';'  expected	82	None	replace
31	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(1);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(1);	  Option    currentToken    =    options.getToken(0);    	non-compiled	[CE]  ';'  expected	87	None	replace
32	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(2);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(2);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(2);	  Option    currentToken    =    options.getToken(0);    	non-compiled	[CE]  ';'  expected	87	None	replace
33	[BUG]  [BUGGY]  Options  options  =  options.getOptionOpts();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Options  options  =  options.getOptionOpts();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Options  options  =  options.getOptionOpts();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  ';'  expected	68	None	replace
34	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  currentOption.getOption();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  currentOption.getOption();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  ';'  expected	68	None	replace
35	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(argument);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(argument);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  ';'  expected	55	None	replace
36	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken  +  1);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken  +  1);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  ';'  expected	55	None	replace
37	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(arguments);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(arguments);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  ';'  expected	55	None	replace
38	[BUG]  [BUGGY]  ||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  ||    options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  ';'  expected	83	None	replace
39	[BUG]  [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  ||    options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  ';'  expected	83	None	replace
40	[BUG]  [BUGGY]  &&  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  &&  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	&&  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  ||    options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  ';'  expected	83	None	replace
41	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptionGroups()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  expectOpts  =  new  ArrayList(options.getOptions());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectOpts  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectOpts  =  new  ArrayList(options.getOptions());	  expectOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	92	None	replace
43	[BUG]  [BUGGY]  expectOpts  =  new  LinkedList(options.getRequiredOptions());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectOpts  =  new  LinkedList(options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectOpts  =  new  LinkedList(options.getRequiredOptions());	  expectOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	92	None	replace
44	[BUG]  [BUGGY]  expectOpts  =  new  ArrayList(options.getAllOptions());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectOpts  =  new  ArrayList(options.getAllOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectOpts  =  new  ArrayList(options.getAllOptions());	  expectOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	92	None	replace
45	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getTokens());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  ';'  expected	26	None	replace
46	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  ';'  expected	26	None	replace
47	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(currentToken  +  2);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(currentToken  +  2);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(currentToken  +  2);	  Option    currentToken    =    options.getRequiredOption(currentToken    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
48	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument  +  1);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument  +  1);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument  +  1);	  Option    currentToken    =    options.getRequiredOption(currentToken    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
49	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  skipParsing);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  skipParsing);	  Option    currentToken    =    options.getRequiredOption(argument);    	non-compiled	[CE]  ';'  expected	12	None	replace
50	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  expectedOpts);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  expectedOpts);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  expectedOpts);	  Option    currentToken    =    options.getRequiredOption(argument);    	non-compiled	[CE]  ';'  expected	12	None	replace
51	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  arguments  =  null;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(),  arguments  =  null;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(),  arguments  =  null;	  Option    currentToken    =    options.getToken(),    arguments;    	non-compiled	[CE]  ';'  expected	29	None	replace
52	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  arguments.length;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(),  arguments.length;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(),  arguments.length;	  Option    currentToken    =    options.getToken(),    arguments;    	non-compiled	[CE]  ';'  expected	29	None	replace
53	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.options;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.options;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(),  this.options;	  Option    currentToken    =    options.getToken(),    arguments;    	non-compiled	[CE]  ';'  expected	29	None	replace
54	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  ';'  expected	41	None	replace
55	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  ';'  expected	41	None	replace
56	[BUG]  [BUGGY]  if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  ';'  expected	41	None	replace
57	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken()  /  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken()  /  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken()  /  1;	  Option    currentToken    =    options.getToken()    -    1;    	non-compiled	[CE]  ';'  expected	28	None	replace
58	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  currentToken);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  currentToken);	  Option    currentToken    =    options.getRequiredOption(currentToken,    arguments);    	non-compiled	[CE]  ';'  expected	78	None	replace
59	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  arguments);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  arguments);	  Option    currentToken    =    options.getRequiredOption(currentToken,    arguments);    	non-compiled	[CE]  ';'  expected	78	None	replace
60	[BUG]  [BUGGY]  Option  group  =  options.getArgumentGroups();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getArgumentGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getArgumentGroups();	  Option    group    =    options.getArgumentGroup();    	non-compiled	[CE]  ';'  expected	76	None	replace
61	[BUG]  [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
62	[BUG]  [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);	  if(options.getRequiredOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
63	[BUG]  [BUGGY]  Option  currentToken  =  options.getSelectedOption(options.getRequiredOptions());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getSelectedOption(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getSelectedOption(options.getRequiredOptions());	  Option    currentToken    =    options.getSelectedOption();    	non-compiled	[CE]  ';'  expected	35	None	replace
64	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
65	[BUG]  [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
66	[BUG]  [BUGGY]  currentToken  =  options.getToken();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentToken  =  options.getToken();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentToken  =  options.getToken();	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  ';'  expected	80	None	replace
67	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  ';'  expected	80	None	replace
68	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  ';'  expected	80	None	replace
69	[BUG]  [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  ';'  expected	80	None	replace
70	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(currentOption);	  OptionGroup    group    =    options.getGroup(null);    	non-compiled	[CE]  ';'  expected	95	None	replace
71	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(defaultToken);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(defaultToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(defaultToken);	  OptionGroup    group    =    options.getGroup(null);    	non-compiled	[CE]  ';'  expected	95	None	replace
72	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptions());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts.checkState(options.getOptions());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	93	None	replace
73	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getAllOptions());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getAllOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts.checkState(options.getAllOptions());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	93	None	replace
74	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptionGroups());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts.checkState(options.getOptionGroups());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  ';'  expected	93	None	replace
75	[BUG]  [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()!=  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
76	[BUG]  [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
77	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList  <  Option>();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList  <  Option>();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  LinkedList  <  Option>();	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts();	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.size());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.size());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  ArrayList  <  Option>(options.size());	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }	  expectedOpts    =    new    ArrayList(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
81	[BUG]  [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  >=  null)  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getRequiredOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()  ==  null  &&  options.getOptionGroups().length  >  0))  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
83	[BUG]  [BUGGY]  currentOption  =  options.getRequiredOption();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getRequiredOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getRequiredOption();	  currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  currentOption  =  options.getSelectedOption();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getSelectedOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getSelectedOption();	  currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  currentOption  =  options.getRequiredOption(arguments);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getRequiredOption(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getRequiredOption(arguments);	  currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(argument);	  OptionGroup    group    =    options.getOptionGroup(defaultToken);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
87	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
88	[BUG]  [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().length  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
89	[BUG]  [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().size()  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().size()  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getOptionGroups()!=  null  &&  options.getRequiredOptions().size()  >  0))  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
90	[BUG]  [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups()!=  null))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups()!=  null))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()!=  null  &&  options.getOptionGroups()!=  null))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptionGroups()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
91	[BUG]  [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }	  expectedOpts    =    new    ArrayList(options.getOptionOPts());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
92	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(options.getRequiredOptions());	  Option    currentToken    =    options.getOption();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }	  expectedOpts    =    new    LinkedList(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
94	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());	  expectedOpts    =    new    LinkedList(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
95	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getAllOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
96	[BUG]  [BUGGY]  if(options.getAllOptions()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getAllOptions()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getAllOptions()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getAllOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
97	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(argument);	  OptionGroup    group    =    options.getGroup(currentToken);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
98	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(arguments);	  OptionGroup    group    =    options.getGroup(currentToken);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
99	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(arguments[0]);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(arguments[0]);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(arguments[0]);	  OptionGroup    group    =    options.getGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
100	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitOpt();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getImplicitOpt();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getImplicitOpt();	  Option    currentToken    =    options.getImplicitRequiredOption();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
101	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitParsingOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getImplicitParsingOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getImplicitParsingOption();	  Option    currentToken    =    options.getImplicitRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
102	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption(arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getImplicitRequiredOption(arguments);	  Option    currentToken    =    options.getImplicitRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
103	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
104	[BUG]  [BUGGY]  if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null  ||  options.getOptions().length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
106	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptions(),  currentToken);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getSelectedOptions(),  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getSelectedOptions(),  currentToken);	  OptionGroup    group    =    options.getSelectedOptions();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
107	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  skipParsing);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  skipParsing);	  Option    currentToken    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
108	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments[0]);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments[0]);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments[0]);	  Option    currentToken    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
109	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments)+  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments)+  1;	  Option    currentToken    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
110	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
111	[BUG]  [BUGGY]  Option  group  =  options.getSelectedOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getSelectedOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getSelectedOption();	  Option    group    =    options.getArgument();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
112	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments,  currentToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments,  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(arguments,  currentToken);	  OptionGroup    group    =    options.getOptionGroup(arguments);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
113	[BUG]  [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
114	[BUG]  [BUGGY]  Option  group  =  options.getGroup(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroup(false);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroup(false);	  Option    group    =    options.getGroup(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
115	[BUG]  [BUGGY]  Option  group  =  options.getGroup(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroup(null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroup(null);	  Option    group    =    options.getGroup(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
116	[BUG]  [BUGGY]  Option  group  =  options.getGroup(true,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroup(true,  false);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroup(true,  false);	  Option    group    =    options.getGroup(true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
117	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument,  skipParsing);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument,  skipParsing);	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
118	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument  +  1);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument  +  1);	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
119	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument,  0);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument,  0);	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
120	[BUG]  [BUGGY]  Options  options  =  this.options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Options  options  =  this.options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Options  options  =  this.options.getOptions();	  Options    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
121	[BUG]  [BUGGY]  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  currentOption.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options  =  currentOption.getOptions();	  Options    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
122	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  if(options.getOptionPositions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getOptionPositions());    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
123	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getTokens());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
124	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  arguments);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  arguments);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getTokens());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
125	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
126	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  argument);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroups(),  argument);	  OptionGroup    group    =    options.getGroups(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
127	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroups(),  arguments);	  OptionGroup    group    =    options.getGroups(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
128	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentToken,  skipParsing);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentToken,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroups(),  currentToken,  skipParsing);	  OptionGroup    group    =    options.getGroups(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
129	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroups(),  currentToken,  expectedOpts);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroups(),  currentToken,  expectedOpts);	  OptionGroup    group    =    options.getGroups(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
130	[BUG]  [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().length  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
131	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
132	[BUG]  [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().size()  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().size()  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getOptionGroups()!=  null  &&  options.getOptionGroups().size()  >  0))  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
133	[BUG]  [BUGGY]  currentOption  =  options.getOption(arguments,  skipParsing);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOption(arguments,  skipParsing);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOption(arguments,  skipParsing);	  currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
134	[BUG]  [BUGGY]  currentOption  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOption(currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOption(currentToken);	  currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
135	[BUG]  [BUGGY]  currentOption  =  options.getOption(arguments[0]);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOption(arguments[0]);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOption(arguments[0]);	  currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
136	[BUG]  [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||(options.getRequiredOptions()  ==  null  &&  options.getOptions().length  >  0))  {  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
137	[BUG]  [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroup(null);    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
138	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroup(null);    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
139	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroup(null);    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
140	[BUG]  [BUGGY]  options  =  new  ArrayList(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  new  ArrayList(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options  =  new  ArrayList(options.getOptionGroups());	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
141	[BUG]  [BUGGY]  options.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options.addAll(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options.addAll(options.getOptionGroups());	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
142	[BUG]  [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionGroups());  }	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
143	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    LinkedList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
144	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    LinkedList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
145	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  currentOption.getOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  currentOption.getOptionGroup();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
146	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(argument);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  option  =  options.getOption(argument);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
147	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  option  =  options.getOption(arguments);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
148	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(currentToken,  expectedOpts);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  option  =  options.getOption(currentToken,  expectedOpts);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
149	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
150	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
151	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
152	[BUG]  [BUGGY]  if(options.getAllOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getAllOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getAllOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getAllOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getAllOptions());  }	  expectedOpts    =    new    LinkedList(options.getAllOptions());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
153	[BUG]  [BUGGY]  options  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options  =  new  ArrayList(options.getOptions());	  options    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
154	[BUG]  [BUGGY]  options  =  new  LinkedList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  new  LinkedList(options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options  =  new  LinkedList(options.getRequiredOptions());	  options    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
155	[BUG]  [BUGGY]  Options  options  =  new  ArrayList(options.getOptions());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Options  options  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Options  options  =  new  ArrayList(options.getOptions());	  options    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
156	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
157	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  currentOption!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  currentOption!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
158	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
159	[BUG]  [BUGGY]  currentOption  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  null;  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  null;	  if(options.getOptionGroups()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
160	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
161	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    for(Option    group    :    options.getGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
162	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()  ==  null)  {  for(Option  group  :  options.getGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    for(Option    group    :    options.getGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
163	[BUG]  [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  ArrayList  <  Option>();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  expectedOpts  =  new  ArrayList  <  Option>();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  expectedOpts  =  new  ArrayList  <  Option>();  }	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
164	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
165	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
166	[BUG]  [BUGGY]  Option  group  =  options.getRequiredOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getRequiredOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getRequiredOptionGroup();	  Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
167	[BUG]  [BUGGY]  if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  if(options.getOptionPositions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionPositions());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
168	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(arguments[currentToken]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(arguments[currentToken]);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(arguments[currentToken]);	  OptionGroup    group    =    options.getGroup(currentToken);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
169	[BUG]  [BUGGY]  if(!skipParsing)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(!skipParsing)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getOptionGroup(null);    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
170	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getArguments());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getArguments());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getArguments());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getTokens());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
171	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getTokens());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
172	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
173	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOptionGroups();	  Option    currentToken    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(defaultToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  option  =  options.getOption(defaultToken);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
175	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument)+  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument)+  1;	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
176	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument,  null);	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
177	[BUG]  [BUGGY]  Option  group  =  options.getGroups()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroups()  +  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroups()  +  1;	  Option    group    =    options.getGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
178	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(),  this.arguments;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(),  this.arguments;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(),  this.arguments;	  Option    currentToken    =    options.getToken(),    arguments;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
179	[BUG]  [BUGGY]  CurrentOption  currentOption  =  options.getRequiredOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  CurrentOption  currentOption  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	CurrentOption  currentOption  =  options.getRequiredOptions();	  if(options.getOptionGroups()!=    null)    {    currentOption    =    options.getRequiredOptions();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
180	[BUG]  [BUGGY]  if(currentToken!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(currentToken!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
181	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptions();	  OptionGroup    group    =    options.getRequiredOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
182	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  arguments);	  Option    currentToken    =    options.getRequiredOption(currentToken,    argument);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
183	[BUG]  [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  else  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  else  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  else  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  expectedOpts    =    new    ArrayList(options.getOptionOPts());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
184	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  expectOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
185	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options.getRequiredOptions();  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  this.options  =  options.getRequiredOptions();  }	  if(options.getOptionGroups()    ==    null)    {    currentOption    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
186	[BUG]  [BUGGY]  OptionGroup  group  =  options.getRequiredOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getRequiredOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getRequiredOptionGroup();	  OptionGroup    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
187	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);	  expectedOpts    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
188	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(options);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(options);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(options);	  OptionGroup    group    =    options.getGroup(null);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
189	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  0);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  0);	  Option    currentToken    =    options.getRequiredOption(argument);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
190	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitParsing();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getImplicitParsing();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getImplicitParsing();	  Option    currentToken    =    options.getImplicitRequiredOption();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
191	[BUG]  [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption(argument);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getImplicitRequiredOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getImplicitRequiredOption(argument);	  Option    currentToken    =    options.getImplicitRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
192	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
193	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroups(currentOption);	  OptionGroup    group    =    options.getOptionGroup(currentOption);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
194	[BUG]  [BUGGY]  currentOption  =  options.getOption(arguments)+  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOption(arguments)+  1;  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOption(arguments)+  1;	  currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
195	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  stopAtNonOption);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  stopAtNonOption);	  Option    currentToken    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
196	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  optionGroup  =  options.getOptionGroups();	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
197	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken,  null);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
198	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  options.getOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  options.getOptionGroup();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
199	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
200	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
201	[BUG]  [BUGGY]  AnnotatedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  AnnotatedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	AnnotatedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
202	[BUG]  [BUGGY]  Option  group  =  options.getGroup(true,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroup(true,  0);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroup(true,  0);	  Option    group    =    options.getGroup(true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
203	[BUG]  [BUGGY]  currentOption  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOptions();	  currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
204	[BUG]  [BUGGY]  OptionGroup  group  =  options.getCurrentOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getCurrentOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getCurrentOptionGroups();	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
205	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  for(OptionGroup  group  :  options.getGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()    ==    null)    {    for(Option    group    :    options.getGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
206	[BUG]  [BUGGY]  Option  options  =  options.getOptionOpts();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  options.getOptionOpts();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  options.getOptionOpts();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
207	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
208	[BUG]  [BUGGY]  options  =  options.getOptionGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  options.getOptionGroups();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	options  =  options.getOptionGroups();	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
209	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(),  currentToken);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(),  currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroups(),  currentToken);	  OptionGroup    group    =    options.getGroups(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
210	[BUG]  [BUGGY]  if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }	  expectedOpts    =    new    ArrayList(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
211	[BUG]  [BUGGY]  OptionGroup  group  =  options.getArgumentGroup(arguments);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getArgumentGroup(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getArgumentGroup(arguments);	  OptionGroup    group    =    options.getArgumentGroups();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
212	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
213	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  LinkedList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  LinkedList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  LinkedList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    LinkedList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
214	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getOptionGroup(null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getOptionGroup(null);	  Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
215	[BUG]  [BUGGY]  Option  currentToken  =  options.getSelectedOption(argument);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getSelectedOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getSelectedOption(argument);	  Option    currentToken    =    options.getSelectedOption();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
216	[BUG]  [BUGGY]  if(options!=  null)  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
217	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList  <  OptionGroup>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList  <  OptionGroup>();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  LinkedList  <  OptionGroup>();	  expectedOpts    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
218	[BUG]  [BUGGY]  this.expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  this.expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	this.expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
219	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  0);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts.checkState(options.getOptions().size()  >  0);	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
220	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionOpts());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionOpts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  LinkedList(options.getOptionOpts());	  expectedOpts    =    new    LinkedList(options.getOptionPositions());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
221	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
222	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(arguments,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(arguments,  null);	  Option    currentToken    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
223	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOptionGroup();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOptionGroup();	  Option    currentToken    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
224	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken(argument,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getToken(argument,  true);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getToken(argument,  true);	  Option    currentToken    =    options.getToken(argument);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
225	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
226	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  ArrayList  <  Option>(options.getOptionGroups());	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
227	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
228	[BUG]  [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
229	[BUG]  [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
230	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
231	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(null);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup(null);	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
232	[BUG]  [BUGGY]  ||  options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
233	[BUG]  [BUGGY]  expectOpts  =  new  ArrayList(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectOpts  =  new  ArrayList(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectOpts  =  new  ArrayList(options.getOptionGroups());	  expectOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
234	[BUG]  [BUGGY]  Option  options  =  options.getOptionTools();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  options  =  options.getOptionTools();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  options  =  options.getOptionTools();	  Option    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
235	[BUG]  [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
236	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroups(currentToken);	  OptionGroup    group    =    options.getOptionGroup(currentOption);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
237	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());	  OptionGroup    group    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
238	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionOPts());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionOPts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	expectedOpts  =  new  LinkedList(options.getOptionOPts());	  expectedOpts    =    new    ArrayList(options.getOptionOPts());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
239	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments)+  1;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(arguments)+  1;	  OptionGroup    group    =    options.getOptionGroup(arguments);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
240	[BUG]  [BUGGY]  Option  group  =  options.getGroup(true,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getGroup(true,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getGroup(true,  null);	  Option    group    =    options.getGroup(true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
241	[BUG]  [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(currentToken!=  null)  {  OptionGroup  group  =  options.getOptionGroup(null);  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }	  OptionGroup    group    =    options.getOptionGroup(null);    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
242	[BUG]  [BUGGY]  ||  options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  if(options.getOptionPositions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionPositions());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
243	[BUG]  [BUGGY]  if(options!=  null)  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options!=  null)  {  expectedOpts.addAll(options.getOptions());  }	  if(options!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
244	[BUG]  [BUGGY]  ||  options.getAllOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getAllOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getAllOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  }	  if(options.getAllOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
245	[BUG]  [BUGGY]  ||  options.getOptionPositions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionPositions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getOptionPositions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  if(options.getOptionPositions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getOptionPositions());    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
246	[BUG]  [BUGGY]  OptionGroup  group  =  options.getArgumentGroup(arguments[0]);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getArgumentGroup(arguments[0]);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getArgumentGroup(arguments[0]);	  OptionGroup    group    =    options.getArgumentGroups();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
247	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    LinkedList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
248	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
249	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getRequiredOption(argument,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getRequiredOption(argument,  null);	  Option    currentToken    =    options.getRequiredOption(argument);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
250	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOpts());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOpts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOpts());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getTokens());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
251	[BUG]  [BUGGY]  pendingOpts  =  new  ArrayList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  pendingOpts  =  new  ArrayList(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	pendingOpts  =  new  ArrayList(options.getRequiredOptions());	  if(options.getOptionGroups()!=    null)    {    currentOption    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
252	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken,  argument);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken,  argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken,  argument);	  OptionGroup    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
253	[BUG]  [BUGGY]  Option  currentToken  =  option.getToken();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  option.getToken();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  option.getToken();	  Option    currentToken    =    options.getToken()    -    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
254	[BUG]  [BUGGY]  if(options.getOptions()!=  null  ||  arguments.length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null  ||  arguments.length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptions()!=  null  ||  arguments.length  ==  0)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
255	[BUG]  [BUGGY]  currentOption  =  options.getOption(arguments,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getOption(arguments,  null);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getOption(arguments,  null);	  currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
256	[BUG]  [BUGGY]  if(options.getOptionArguments()!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionArguments()!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionArguments()!=  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptionGroups()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
257	[BUG]  [BUGGY]  if(options.getOptionArguments()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionArguments()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	if(options.getOptionArguments()  ==  null)  {  for(Option  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptionGroups()    ==    null)    {    for(Option    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
258	[BUG]  [BUGGY]  CurrentToken  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  CurrentToken  group  =  options.getOptionGroups();  currentToken  =  group.getToken();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	CurrentToken  group  =  options.getOptionGroups();  currentToken  =  group.getToken();	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
259	[BUG]  [BUGGY]  CurrentToken  group  =  options.getOptionGroup();  currentToken  =  group.getToken();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  CurrentToken  group  =  options.getOptionGroup();  currentToken  =  group.getToken();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	CurrentToken  group  =  options.getOptionGroup();  currentToken  =  group.getToken();	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
260	[BUG]  [BUGGY]  currentToken  =  option.getToken();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentToken  =  option.getToken();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentToken  =  option.getToken();	  OptionGroup    group    =    options.getOptionGroups();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
261	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  expectedOpts);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken,  expectedOpts);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
262	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  argument);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken,  argument);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
263	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(true);	  OptionGroup    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
264	[BUG]  [BUGGY]  currentOption  =  options.getRequiredOption(arguments[0]);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  options.getRequiredOption(arguments[0]);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	currentOption  =  options.getRequiredOption(arguments[0]);	  currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
265	[BUG]  [BUGGY]  Option  group  =  options.getArgumentGroup(arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  group  =  options.getArgumentGroup(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	Option  group  =  options.getArgumentGroup(arguments);	  Option    group    =    options.getArgumentGroup();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
266	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getArguments());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getArguments());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getArguments());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
267	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(true,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroup(true,  null);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	OptionGroup  group  =  options.getGroup(true,  null);	  OptionGroup    group    =    options.getGroup(true);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
268	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getArguments());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getArguments());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getArguments());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
