bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isRequired()  ||!expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  if(options.isEmpty()  ||  expectedOpts.isRequired())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isEmpty()  ||  expectedOpts.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isEmpty()  ||  expectedOpts.isRequired())  {	  if(!expectedOpts.isEmpty()    ||    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  if(!options.isEmpty()  ||  expectedOpts.isRequired())  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!options.isEmpty()  ||  expectedOpts.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!options.isEmpty()  ||  expectedOpts.isRequired())  {	  if(!expectedOpts.isEmpty()    ||    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  getOptions(option);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  getOptions(option);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  getOptions(option);	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  currentOption.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  currentOption.getOptions();	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  getSelectedOptions();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  getSelectedOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  getSelectedOptions();	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
7	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOption(currentToken);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOption(currentToken);	      Option    expectedOpts    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOption(value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOption(value);	      Option    expectedOpts    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOption(currentOption);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOption(currentOption);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOption(currentOption);	      Option    expectedOpts    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  List  expectedOpts  =  getOptions(option);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  expectedOpts  =  getOptions(option);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  expectedOpts  =  getOptions(option);	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  List  expectedOpts  =  getOptions().values();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  expectedOpts  =  getOptions().values();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  expectedOpts  =  getOptions().values();	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  List  expectedOpts  =  getOptions().size();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  expectedOpts  =  getOptions().size();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  expectedOpts  =  getOptions().size();	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  if(!expectedOpts.isEmpty()  &&  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!expectedOpts.isEmpty()  &&  expectedOpts.size()  >  0)  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!expectedOpts.isEmpty()  &&  expectedOpts.size()  >  0)  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  ==  0)  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  ==  0)  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  >  1)  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!expectedOpts.isEmpty()  ||  expectedOpts.size()  >  1)  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  if  (!option.isRequired()  &&!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if  (!option.isRequired()  &&!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if  (!option.isRequired()  &&!expectedOpts.isEmpty())  {	  if    (!expectedOpts.isEmpty()    &&!option.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  if  (!expectedOpts.isEmpty()  ||!option.isRequired())  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if  (!expectedOpts.isEmpty()  ||!option.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if  (!expectedOpts.isEmpty()  ||!option.isRequired())  {	  if    (!expectedOpts.isEmpty()    &&!option.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  if(!expectedOpts.isEmpty()  &&  expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!expectedOpts.isEmpty()  &&  expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!expectedOpts.isEmpty()  &&  expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  if(!option.isEmpty()  ||  expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!option.isEmpty()  ||  expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!option.isEmpty()  ||  expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(expectedOpts.isEmpty()  ||!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(expectedOpts.isEmpty()  ||!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(expectedOpts.isEmpty()  ||!expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)this.options.get(option);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =(Option)this.options.get(option);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =(Option)this.options.get(option);	      Option    expectedOpts    =(Option)options.get(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)options.get(currentOption);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =(Option)options.get(currentOption);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =(Option)options.get(currentOption);	      Option    expectedOpts    =(Option)options.get(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)options.get(value);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =(Option)options.get(value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =(Option)options.get(value);	      Option    expectedOpts    =(Option)options.get(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Option  expectedOpts  =  cmd.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  cmd.getOption(currentToken);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  cmd.getOption(currentToken);	      Option    expectedOpts    =    cmd.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  Option  expectedOpts  =  cmd.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  cmd.getOption(option,  value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  cmd.getOption(option,  value);	      Option    expectedOpts    =    cmd.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Options  options  =  currentOption.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Options  options  =  currentOption.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  options  =  currentOption.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  Options  options  =  this.options.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Options  options  =  this.options.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Options  options  =  this.options.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(expectedOpts!=  null  ||!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(expectedOpts!=  null  ||!expectedOpts.isEmpty())  {	  if(expectedOpts!=    null    &&!expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
30	[BUG]  [BUGGY]  if(opt!=  null  &&!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(opt!=  null  &&!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(opt!=  null  &&!expectedOpts.isEmpty())  {	  if(expectedOpts!=    null    &&!expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
31	[BUG]  [BUGGY]  Option  expectedOpts  =  currentOption.getOption(opt);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  currentOption.getOption(opt);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  currentOption.getOption(opt);	      Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOptions();	      Option    expectedOpts    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  Option  expectedOpts  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  currentOption.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  currentOption.getOptions();	      Option    expectedOpts    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  Option  expectedOpts  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  opt.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  opt.getOptions();	      Option    expectedOpts    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  final  Option  expectedOpts  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  final  Option  expectedOpts  =  options.getOption(currentToken);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	final  Option  expectedOpts  =  options.getOption(currentToken);	      final    Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  final  Option  expectedOpts  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  final  Option  expectedOpts  =  options.getOption(option);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	final  Option  expectedOpts  =  options.getOption(option);	      final    Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  final  Option  expectedOpts  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  final  Option  expectedOpts  =  options.getOption(value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	final  Option  expectedOpts  =  options.getOption(value);	      final    Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  final  Option  expectedOpts  =  currentOption.getOption(opt);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  final  Option  expectedOpts  =  currentOption.getOption(opt);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	final  Option  expectedOpts  =  currentOption.getOption(opt);	      final    Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  if(options.isRequired()  &&!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isRequired()  &&!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isRequired()  &&!expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    &&    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  options.isRequired())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  options.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  options.isRequired())  {	  if(!expectedOpts.isEmpty()    &&    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  cmd  =  options.getOption(option);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  cmd  =  options.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  cmd  =  options.getOption(opt);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  cmd  =  options.getOption(opt);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(option);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  cmd  =  currentOption.getOption(option);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  cmd  =  currentOption.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(option);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  cmd  =  option.getOption(option);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  cmd  =  option.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(!opt.isEmpty()  ||  expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!opt.isEmpty()  ||  expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!opt.isEmpty()  ||  expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  Option  expectedOpts  =  option.getOption(value);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  option.getOption(value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  option.getOption(value);	      Option    expectedOpts    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(option  ==  null  ||  expectedOpts!=  null  &&!expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(option  ==  null  ||  expectedOpts!=  null  &&!expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(option  ==  null  ||  expectedOpts!=  null  &&!expectedOpts.isEmpty())  {	  if(expectedOpts!=    null    &&!expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  if(option!=  null  &&!option.isRequired())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(option!=  null  &&!option.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(option!=  null  &&!option.isRequired())  {	  if(expectedOpts!=    null    &&!expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  final  Option  expectedOpts  =  options.getOption(opt,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  final  Option  expectedOpts  =  options.getOption(opt,  value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	final  Option  expectedOpts  =  options.getOption(opt,  value);	      final    Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  Option  expectedOpts  =  cmd.getOption(value);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  cmd.getOption(value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  cmd.getOption(value);	      Option    expectedOpts    =    cmd.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  opt.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  opt.getOptions();	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  getOptions().value;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  getOptions().value;  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  getOptions().value;	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  if(!opt.isEmpty()  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!opt.isEmpty()  ||  expectedOpts.size()  >  0)  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!opt.isEmpty()  ||  expectedOpts.size()  >  0)  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  if(!option.isEmpty()  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!option.isEmpty()  ||  expectedOpts.size()  >  0)  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!option.isEmpty()  ||  expectedOpts.size()  >  0)  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  option  =  options.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  if(options.isRequired())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isRequired())  {	  if(!expectedOpts.isEmpty()    &&    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
57	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)options.get(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =(Option)options.get(currentToken);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =(Option)options.get(currentToken);	      Option    expectedOpts    =(Option)options.get(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  if  (!option.isEmpty()  &&!option.isRequired())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if  (!option.isEmpty()  &&!option.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if  (!option.isEmpty()  &&!option.isRequired())  {	  if    (!expectedOpts.isEmpty()    &&!option.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  List  expectedOpts  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  expectedOpts  =  opt.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  expectedOpts  =  opt.getOptions();	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  ArrayList  expectedOpts  =  getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  ArrayList  expectedOpts  =  getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	ArrayList  expectedOpts  =  getOptions();	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOption(opt,  value);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOption(opt,  value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOption(opt,  value);	      Option    expectedOpts    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  Option  expectedOpts  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  options.getOption(option,  value);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  options.getOption(option,  value);	      Option    expectedOpts    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  if(!options.isEmpty()  ||  options.isRequired())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(!options.isEmpty()  ||  options.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(!options.isEmpty()  ||  options.isRequired())  {	  if(!expectedOpts.isEmpty()    ||    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
64	[BUG]  [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  expectedOpts.isRequired())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  expectedOpts.isRequired())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(options.isRequired()  ||!expectedOpts.isEmpty()  &&  expectedOpts.isRequired())  {	  if(!expectedOpts.isEmpty()    &&    options.isRequired())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  currentOption  =  options.getOption(option);  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  currentOption  =  options.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  List  <  String>  expectedOpts  =  getOptions().size();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  <  String>  expectedOpts  =  getOptions().size();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  <  String>  expectedOpts  =  getOptions().size();	      List    <    String>    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
67	[BUG]  [BUGGY]  List  expectedOpts  =  getOptions(opt);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  List  expectedOpts  =  getOptions(opt);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	List  expectedOpts  =  getOptions(opt);	      List    expectedOpts    =    getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  Option  expectedOpts  =  option.stopAtNonOption?  options.getOptions()  :  null;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  option.stopAtNonOption?  options.getOptions()  :  null;  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  option.stopAtNonOption?  options.getOptions()  :  null;	      Option    expectedOpts    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  options  =  options.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
70	[BUG]  [BUGGY]  if(option  ==  null  ||!expectedOpts.isEmpty()  ||  expectedOpts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  if(option  ==  null  ||!expectedOpts.isEmpty()  ||  expectedOpts.isEmpty())  {  [BUGGY]    {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	if(option  ==  null  ||!expectedOpts.isEmpty()  ||  expectedOpts.isEmpty())  {	  if(!expectedOpts.isEmpty()    ||    expectedOpts.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)options.get(argument);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =(Option)options.get(argument);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =(Option)options.get(argument);	      Option    expectedOpts    =(Option)options.get(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  Option  expectedOpts  =  option.getOption(cmd);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {      [BUGGY]  Option  expectedOpts  =  option.getOption(cmd);  [BUGGY]    if  (!expectedOpts.isEmpty())  {  {  throw  new  MissingOptionException(expectedOpts);  }  }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	197	198	1	replace	Option  expectedOpts  =  option.getOption(cmd);	      Option    expectedOpts    =    cmd.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
