bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  return;  }	  Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentToken,  value);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(currentToken,  value);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(currentToken,  value);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
3	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  opt);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(value,  opt);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value,  opt);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
4	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(options,  value);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(options,  value);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option,  value,  expectedOpts);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);	  Option    cmd    =    options.getOption(value);    if(cmd!=    null    &&    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd    ==    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(opt);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd    ==    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  currentOption.getOption(value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOption(value);	  Option    cmd    =    currentOption.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  currentOption.getOption(option,  value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOption(option,  value);	  Option    cmd    =    currentOption.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.isRequired())  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  ||  option.isRequired())  {  return;  }	  Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.isRequired())  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  &&  option.isRequired())  {  return;  }	  Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd    ==    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd    ==    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option  ==  null)  {  return;  }	  Option    option    =    options.getOption(option);    if(option    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  return;  }	  Option    cmd    =    options.getOption(value);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentToken);  if(cmd!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(currentToken);  if(cmd!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(currentToken);  if(cmd!=  null)  {  return;  }	  Option    cmd    =    options.getOption(value);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  cmd.getOption(option);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  cmd.getOption(option);	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.removeOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
19	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  cmd.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  cmd.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.removeOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(argument);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(argument);	  Option    option    =    options.getOption(value);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(argument);  if(option!=  null)  {  return;  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  if(option  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(argument);  if(option  ==  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(argument);  if(option  ==  null)  {  return;  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd  ==  null)  {  return;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);  if(cmd  ==  null)  {  return;  }	  Option    cmd    =    options.getOption(value);    if(cmd    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(currentOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  option.getOption(currentOption);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  option.getOption(currentOption);	  Option    cmd    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
25	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  currentOption.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  currentOption.getOption(option);  if(option!=  null)  {  return;  }	  Option    options    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
26	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  currentOption.getOption(option);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  currentOption.getOption(option);	  Option    options    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
27	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  cmd.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  cmd.getOption(option);  if(option!=  null)  {  return;  }	  Option    options    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
28	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option);  if(option  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  currentOption.getOption(option);  if(option  ==  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  currentOption.getOption(option);  if(option  ==  null)  {  return;  }	  Option    options    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(options);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  value);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(options,  value);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(options,  value);  if(option!=  null)  {  return;  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(currentToken);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(currentToken);	  Option    option    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(options,  expectedOpts);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(options,  expectedOpts);	  Option    option    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
33	[BUG]  [BUGGY]  Option  opt  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  opt  =  options.getOption(value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  opt  =  options.getOption(value);	  Option    opt    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  opt  =  options.getOption(currentToken);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  opt  =  options.getOption(currentToken);	  Option    opt    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
35	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  opt  =  options.getOption(option,  expectedOpts);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  opt  =  options.getOption(option,  expectedOpts);	  Option    opt    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
36	[BUG]  [BUGGY]  option  =  options.getOption(value);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  option  =  options.getOption(value);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	option  =  options.getOption(value);  if(option!=  null)  {  return;  }	  option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd    ==    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
38	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd    ==    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
39	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null    &&    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
40	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null    &&    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option,  expectedOpts);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  stopAtNonOption);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  stopAtNonOption);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
43	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(currentOption,  expectedOpts);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(currentOption,  expectedOpts);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(this.options);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.removeOption(opt);  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.removeOption(opt);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.removeOption(opt);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.removeOption(opt);  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  skipParsing  =  true;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  skipParsing  =  true;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    skipParsing    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  skipParsing  =  true;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  skipParsing  =  true;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    skipParsing    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
50	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  cmd.removeOption(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  cmd.removeOption(option);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(argument);  if(option!=  null)  {  cmd.removeOption(option);  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    cmd.removeOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
51	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  cmd.removeOption(option);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  cmd.removeOption(option);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  cmd.removeOption(option);  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    cmd.removeOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
52	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  currentOption.getParent();  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getParent();	  Option    cmd    =    currentOption.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }	  Option    option    =    options.getOption(option);    if(option    ==    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }	  Option    option    =    options.getOption(option);    if(option    ==    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.checkRequiredOptions();  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  cmd.checkRequiredOptions();  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  throw  new  MissingOptionException( " ");  }	  if(option.isRequired())    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
57	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(option,  expectedOpts);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
58	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(option);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  cmd.getOption(option);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  cmd.getOption(option);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	  Option    cmd    =    options.getOption(value);    if(cmd!=    null    &&    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
61	[BUG]  [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.checkRequiredOptions();  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.checkRequiredOptions();  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(value,  expectedOpts);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value,  expectedOpts);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
63	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option,  value);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  Option  options  =  options.getOption(value);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  options.getOption(value);  if(option!=  null)  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(value);  if(option!=  null)  {  return;  }	  Option    options    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
65	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }	  Option    cmd    =    options.getOption(value);    if(cmd!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
66	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  option.getOption(value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  option.getOption(value);	  Option    cmd    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(argument);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }	  Option    cmd    =    options.getOption(value);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(option,  value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option,  value);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  Option  options  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  options.getOption(value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(value);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
71	[BUG]  [BUGGY]  Option  options  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  options.getOption(currentToken);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(currentToken);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(defaultToken);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(defaultToken);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  options.getOption(opt,  expectedOpts);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(opt,  expectedOpts);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  if(option.isOptional())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(option.isOptional())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option.isOptional())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }	  if(option.isRequired())    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  option  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }	  if(options!=    null)    {    Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
76	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(opt,  value);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(opt,  value);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
78	[BUG]  [BUGGY]  Option  <?>  cmd  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  <?>  cmd  =  options.getOption(value);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  <?>  cmd  =  options.getOption(value);	  Option    cmd    =    options.getOption(value);    if(cmd!=    null    &&    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  Option  options  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  options  =  options.getOption(argument);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(argument);	  Option    cmd    =    options.getOption(value);    if(cmd!=    null)    {    cmd.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
80	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOptionValue(option);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  currentOption.getOptionValue(option);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOptionValue(option);	  Option    cmd    =    currentOption.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(argument);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  cmd  =  currentOption.getOption(argument);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOption(argument);	  Option    cmd    =    currentOption.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.option);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }      [BUGGY]  Option  option  =  options.getOption(this.option);  [BUGGY]        [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(this.option);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
