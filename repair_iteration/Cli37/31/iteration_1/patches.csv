bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(currentToken);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(currentToken);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  currentOption.getOption(opt);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOption(opt);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(opt);	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  return;  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  return;  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);	  if(option    ==    null)    {    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }	  if(option    ==    null)    {    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	option  =  options.getOption(option);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.removeOption(opt);  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.removeOption(opt);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.removeOption(opt);  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
15	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option  ==  null)  {  throw  new  MissingOptionException( " ");  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  skipParsing  =  true;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  skipParsing  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  currentOption.getOption(option);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  currentOption.getOption(option);	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.addOption(opt,    value);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(options!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.checkRequiredOptions();  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option,  expectedOpts);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option  ==  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  if(option.isRequired())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option.isRequired())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option.isRequired())  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.isRequired())  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.isRequired())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.addOption(option);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.addOption(option);  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  cmd.addOption(option);  }	  Option    cmd    =    options.getOption(opt);    if(cmd!=    null)    {    cmd.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(value);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);	  Option    cmd    =    options.getOption(opt);    if(cmd!=    null)    {    cmd.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentOption);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(currentOption);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(currentOption);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(options);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(options);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(option);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  option.getOption(option);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  option.getOption(option);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null  &&  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.removeOption(option);  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  cmd.removeOption(option);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  cmd.removeOption(option);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  option  =  options.getOption(value);  if(option!=  null)  {  cmd.removeOption(option);  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.removeOption(opt);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd!=  null)  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(value);  if(cmd  ==  null)  {  return;  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(value);  if(cmd  ==  null)  {  return;  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  throw  new  MissingOptionException( " ");  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  options  =  options.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(option);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  if(option!=  null)  {  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option!=  null)  {  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  option  =  options.getOption(option);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(opt);  if(option!=  null)  {  return;  }	  if(option    ==    null)    {    Option    option    =    options.getOption(opt);    if(option!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(opt,  value);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingOptionException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingOptionException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null  ||  cmd.isRequired())  {  throw  new  MissingException( " ");  }	      Option    cmd    =    options.getOption(option);    if(cmd!=    null    ||    cmd.isRequired())    {    throw    new    MissingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  opt  =  options.getOption(option);	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.addOption(opt,    value);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  checkRequiredOptions()  throws  MissingOptionException  {  if  (!expectedOpts.isEmpty())  {  throw  new  MissingOptionException(expectedOpts);  }    [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      [CLASS]  DefaultParser  [METHOD]  checkRequiredOptions  [RETURN_TYPE]  void  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  value  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	201	201	1	replace	Option  options  =  options.getOption(option);	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    cmd.checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
