bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  if(!stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	if(!stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  this.options  =  properties;  this.stopAtNonOption  =  stopAtNonOption;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  this.options  =  properties;  this.stopAtNonOption  =  stopAtNonOption;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	this.options  =  properties;  this.stopAtNonOption  =  stopAtNonOption;	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	options  =  options;  this.stopAtNonOption  =  stopAtNonOption;	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(argument);  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(argument);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(true);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(true);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(true);	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(false);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(false);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(false);	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  skippeParsing  =  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skippeParsing  =  false;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skippeParsing  =  false;	  skipParsing    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  Option  currentToken  =  this.options.getRequiredOption();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  this.options.getRequiredOption();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  this.options.getRequiredOption();	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  Option  currentToken  =  option.getRequiredOption();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  option.getRequiredOption();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  option.getRequiredOption();	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  Option  currentToken  =  options.getRequiredOption(),  stopAtNonOption);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  options.getRequiredOption(),  stopAtNonOption);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  options.getRequiredOption(),  stopAtNonOption);	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(currentToken);	      Option    currentOption    =    options.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(options);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(options);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(options);	      Option    currentOption    =    options.getRequiredOption();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  skippeParsing  =  null;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skippeParsing  =  null;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skippeParsing  =  null;	  skippeParsing    =    true;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption);	      Option    currentOption    =    options.getSelectedOption();    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getSelectedOption(),  stopAtNonOption;	      Option    currentOption    =    options.getSelectedOption();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
16	[BUG]  [BUGGY]  Option  currentOption  =  option.getSelectedOption();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  option.getSelectedOption();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  option.getSelectedOption();	      Option    currentOption    =    options.getSelectedOption();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  skipParsing  =  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skipParsing  =  stopAtNonOption;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skipParsing  =  stopAtNonOption;	  skipParsing    =    null;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
18	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getOptionGroups();	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
19	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(currentToken);	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  Option  group  =  options.getGroups();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  group  =  options.getGroups();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  group  =  options.getGroups();	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  skippingParsing  =  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skippingParsing  =  false;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skippingParsing  =  false;	  skippingParsing    =    true;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  skiingppingParsing  =  false;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skiingppingParsing  =  false;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skiingppingParsing  =  false;	  skippingParsing    =    true;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments[0]);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(arguments[0]);	      Option    currentOption    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  expectedOpts);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  expectedOpts);	      Option    currentOption    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentToken);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(argumentToken);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(argumentToken);	      Option    currentOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  Option  currentOption  =  options,  options.getSelectedOption();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options,  options.getSelectedOption();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options,  options.getSelectedOption();	      Option    currentOption    =    options.getSelectedOption();    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  options  currentOption  =  options.getSelectedOption();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  options  currentOption  =  options.getSelectedOption();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	options  currentOption  =  options.getSelectedOption();	      Option    currentOption    =    options.getSelectedOption();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(options.getRequiredOptions());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(options.getRequiredOptions());  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(options.getRequiredOptions());	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(options.getOptionGroups());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(options.getOptionGroups());  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(options.getOptionGroups());	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  skippingParsing  =  null;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skippingParsing  =  null;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skippingParsing  =  null;	  skippingParsing    =    true;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  skipParsing  =  this.stopAtNonOption;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skipParsing  =  this.stopAtNonOption;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skipParsing  =  this.stopAtNonOption;	  skipParsing    =    null;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  skipParsing  =  this;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  skipParsing  =  this;  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	skipParsing  =  this;	  skipParsing    =    null;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	if(options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentOption  =  options.getRequiredOption(arguments,  stopAtNonOption);	      Option    currentOption    =    options.getRequiredOption(arguments);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
37	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getOptionGroup();	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
38	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
39	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	this.stopAtNonOption  =  stopAtNonOption;	      this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
40	[BUG]  [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  null;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  null;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  null;	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
41	[BUG]  [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  argument;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  argument;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  argument;	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
42	[BUG]  [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  option;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  option;  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  options.hasRequiredOption()?  options.getRequiredOption()  :  option;	      Option    currentToken    =    options.getRequiredOption();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
43	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getGroup(argument);	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
44	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [BUGGY]    skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	OptionGroup  group  =  options.getOptionGroup(argument);	      OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
45	[BUG]  [BUGGY]  Option  currentToken  =  options.getToken();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;    [BUGGY]  Option  currentToken  =  options.getToken();  [BUGGY]    currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	104	104	1	replace	Option  currentToken  =  options.getToken();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
