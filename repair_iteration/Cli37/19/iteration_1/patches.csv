bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	      Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  Group  group  =  options.getGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Group  group  =  options.getGroups();  expectedOpts.add(group);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getGroups();  expectedOpts.add(group);	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroups();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();	      OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken);	      OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup();	      OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  Option  group  =  options.getGroups();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getGroups();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups();	      Option    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
11	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getOptionGroup(currentToken);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(currentToken);	      Option    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  Option  group  =  options.getSelectedOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getSelectedOptionGroup();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getSelectedOptionGroup();	      Option    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  for(Option  group  :  options.getAllOptionGroups())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getAllOptionGroups())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getAllOptionGroups())  {	  for(OptionGroup    group    :    options.getAllOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  for(OptionGroup  group  :  currentOption.getAllOptionGroups())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  currentOption.getAllOptionGroups())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  currentOption.getAllOptionGroups())  {	  for(OptionGroup    group    :    options.getAllOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }	      Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()  ==  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }	      Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);	      Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  Options  options  =  options.getOptionOptions();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  options  =  options.getOptionOptions();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  options.getOptionOptions();	      Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptionGroups();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  options  =  currentOption.getOptionGroups();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  currentOption.getOptionGroups();	      Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  options  =  currentOption.getOptions();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  currentOption.getOptions();	      Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  Options  options  =  options.getOptionOpts();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  options  =  options.getOptionOpts();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  options.getOptionOpts();	      Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts);	      Option    optionGroup    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(arguments);	      Option    optionGroup    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(expectedOpts);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(expectedOpts);	      Option    optionGroup    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.add(group);  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();  expectedOpts.add(group);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroup();  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  group.setSelected(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  group.setSelected(null);  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group.setSelected(null);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  expectedOpts);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  expectedOpts);	      Option    optionGroup    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
33	[BUG]  [BUGGY]  for(Option  group  :  options.getOpts())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getOpts())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOpts())  {	  for(OptionGroup    group    :    options.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  for(OptionGroup  group  :  currentOption.getOpts())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  currentOption.getOpts())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  currentOption.getOpts())  {	  for(OptionGroup    group    :    options.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  for(OptionGroup  group  :  options.getOptions())  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  options.getOptions())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  options.getOptions())  {	  for(OptionGroup    group    :    options.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  currentOption.getOptionGroups())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getOptionGroups())  {	  for(Option    group    :    options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  for(Option  group  :  this.options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  this.options.getOptionGroups())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getOptionGroups())  {	  for(Option    group    :    options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  for(Option  group  :  options.getOptionGroups(),  expectedOpts)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getOptionGroups(),  expectedOpts)  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOptionGroups(),  expectedOpts)  {	  for(Option    group    :    options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  for(Option  group  :  options.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getAllOpts())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getAllOpts())  {	  for(OptionGroup    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  for(OptionGroup  group  :  currentOption.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  currentOption.getAllOpts())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  currentOption.getAllOpts())  {	  for(OptionGroup    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.options.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  this.options.getAllOpts())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.options.getAllOpts())  {	  for(OptionGroup    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts);	      OptionGroup    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options);	      OptionGroup    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  currentOption.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups());	      Option    optionGroup    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  expectedOpts);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups(),  expectedOpts);	      Option    optionGroup    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  Options  group  =  options.getGroup();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  group  =  options.getGroup();  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  options.getGroup();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  Option  group  =  options.getGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getGroup();  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  optionGroup.setSelected(null);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  optionGroup.setSelected(null);  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup.setSelected(null);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);	      Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  for(Option  group  :  options.getOptions())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getOptions())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOptions())  {	  for(Option    group    :    options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions());	      Option    optionGroup    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options.getOptions()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  Option  options  =  options.getOptionOptions();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  options.getOptionOptions();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionOptions();	      Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions());	      OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroups();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroups();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroups();	      OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options);	      Option    optionGroup    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(null);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(null);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(null);	      OptionGroup    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultToken);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultToken);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(defaultToken);	      OptionGroup    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getOptionGroup(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getRequiredOptions());	      Option    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
63	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup());	      Option    optionGroup    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.add(group);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups();  expectedOpts.add(group);	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(currentToken);	      Option    optionGroup    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Options  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);	      OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(null);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  group  =  options.getOptionGroup(null);  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(null);	      Option    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  for(OptionGroup  group  :  options.getArguments())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(OptionGroup  group  :  options.getArguments())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  options.getArguments())  {	  for(OptionGroup    group    :    options.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  options  =  options.getOptionGroups();  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionGroups();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts());	      Option    optionGroup    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]    for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());	      Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
77	[BUG]  [BUGGY]  for(Option  group  :  options.getGroups())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  for(Option  group  :  options.getGroups())  {  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getGroups())  {	  for(Option    group    :    options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());      [BUGGY]  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  [BUGGY]    {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
