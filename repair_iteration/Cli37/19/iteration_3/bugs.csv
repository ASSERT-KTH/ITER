bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  }	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  expectedOpts.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOption(currentToken);  expectedOpts.add(option.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOption(currentToken);  expectedOpts.add(option.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
3	[BUG]  [BUGGY]  options.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.add(option.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.add(option.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
4	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptionOpts();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  options  =  currentOption.getOptionOpts();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  currentOption.getOptionOpts();	  Options    options    =    options.getOptionOpts();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptionOpts();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  currentOption.getOptionOpts();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  currentOption.getOptionOpts();	  Options    options    =    options.getOptionOpts();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  Option  options  =  options.getOptionOpts();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptionOpts();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionOpts();	  Options    options    =    options.getOptionOpts();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  optionGroup.setSelected(expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup.setSelected(expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup.setSelected(expectedOpts);	  optionGroup.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
8	[BUG]  [BUGGY]  optionGroup.setSelected(options);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup.setSelected(options);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup.setSelected(options);	  optionGroup.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
9	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(null,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(null,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(null,  expectedOpts);	  Option    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
10	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options);	  Option    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
11	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getAllOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getAllOpts())  {	  for(Option    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
12	[BUG]  [BUGGY]  for(Option  group  :  this.options.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getAllOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getAllOpts())  {	  for(Option    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
13	[BUG]  [BUGGY]  for(Option  group  :  options.getAllOpts(),  expectedOpts)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getAllOpts(),  expectedOpts)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getAllOpts(),  expectedOpts)  {	  for(Option    group    :    options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
14	[BUG]  [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  currentOption.getGroup();  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
15	[BUG]  [BUGGY]  Group  group  =  options.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Group  group  =  options.getGroup();  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getGroup();  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
16	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(currentOption);  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
17	[BUG]  [BUGGY]  options.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.addAll(options.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }	  Options    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
19	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()  ==  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }	  Options    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
20	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {  expectedOpts.add(optionGroup);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {  expectedOpts.add(optionGroup);  }	  Options    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
21	[BUG]  [BUGGY]  currentToken  =  options.getToken();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  currentToken  =  options.getToken();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	currentToken  =  options.getToken();	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
22	[BUG]  [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
23	[BUG]  [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(currentToken);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(currentToken);  }  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(currentToken);  }	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
24	[BUG]  [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getGroup()!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  else  {  expectedOpts.add(group);  }	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
25	[BUG]  [BUGGY]  group  =  options.getGroups();  expectedOpts.add(currentOption);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group  =  options.getGroups();  expectedOpts.add(currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group  =  options.getGroups();  expectedOpts.add(currentOption);	  Group    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  group  =  options.getGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group  =  options.getGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group  =  options.getGroups();  expectedOpts.add(group);	  Group    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  for(Option  group  :  this.options.getGroups())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getGroups())  {	  for(Option    group    :    options.getGroups())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
28	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getGroups())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getGroups())  {	  for(Option    group    :    options.getGroups())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
29	[BUG]  [BUGGY]  for(Option  group  :  options.keySet())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.keySet())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.keySet())  {	  for(Option    group    :    options.getGroups())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
30	[BUG]  [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	  Option    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOption();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOption();  expectedOpts.addAll(options.getRequiredOptions());	  Option    option    =    options.getOptionGroup();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
32	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  expectedOpts,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups(),  expectedOpts,  currentToken);	  Option    optionGroup    =    options.getOptionGroups(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
33	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups(),  currentOption);	  Option    optionGroup    =    options.getOptionGroups(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
34	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups(),  currentToken);	  Option    optionGroup    =    options.getOptionGroups(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
35	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups(),  currentOption,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups(),  currentOption,  expectedOpts);	  Option    optionGroup    =    options.getOptionGroups(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
36	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup(),  expectedOpts);	  OptionGroup    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup();	  OptionGroup    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(currentToken,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(currentToken,  expectedOpts);	  Option    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(arguments);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(arguments);	  Option    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  Option  group  =  options.getGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(currentToken);	  Option    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
42	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentOption);	  OptionGroup    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
43	[BUG]  [BUGGY]  Option  options  =  options.getOptions(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptions(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptions(),  expectedOpts);	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
44	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  expectedOpts,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  expectedOpts,  currentToken);	  Option    optionGroup    =    options.getOptionGroup(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
45	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  currentToken);	  Option    optionGroup    =    options.getOptionGroup(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
46	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentOption);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  currentOption);	  Option    optionGroup    =    options.getOptionGroup(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
47	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  currentOption,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  currentOption,  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
48	[BUG]  [BUGGY]  Option  group  =  options.getSelectedOptionGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getSelectedOptionGroup(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getSelectedOptionGroup(),  expectedOpts);	  Option    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup();	  Option    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }	  Option    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
51	[BUG]  [BUGGY]  if(options.getGroups()!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getGroups()!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getGroups()!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }	  Option    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
52	[BUG]  [BUGGY]  if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }	  Option    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
53	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }	  if(options.getOptionGroups()!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
54	[BUG]  [BUGGY]  OptionsGroup  group  =  options.getGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionsGroup  group  =  options.getGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionsGroup  group  =  options.getGroups();  expectedOpts.add(group);	  if(options.getOptionGroups()!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
55	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getAllOptionGroups())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getAllOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getAllOptionGroups())  {	  for(Option    group    :    options.getAllOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  for(OptionGroup  group  :  expectedOpts.getAllOpts())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  expectedOpts.getAllOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  expectedOpts.getAllOpts())  {	  for(OptionGroup    group    :    currentOption.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
57	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(currentToken);	  OptionGroup    group    =    options.getOptionGroups(null);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
58	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(options);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups(options);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(options);	  OptionGroup    group    =    options.getOptionGroups(null);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
59	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(null,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups(null,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(null,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroups(null);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  options.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.add(options.getRequiredOptions());	  if(options.getOptions()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
61	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
62	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  preferredOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  preferredOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  preferredOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
63	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentOption.getOptionGroup());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentOption.getOptionGroup());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentOption.getOptionGroup());	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
64	[BUG]  [BUGGY]  for(Option  group  :  options.getOptionGroups(),  expectedOpts,  currentToken)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getOptionGroups(),  expectedOpts,  currentToken)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOptionGroups(),  expectedOpts,  currentToken)  {	  for(Option    group    :    options.getOptionGroups(),    expectedOpts)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
65	[BUG]  [BUGGY]  for(Option  group  :  options.getOptionGroups(),  preferredOpts)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getOptionGroups(),  preferredOpts)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOptionGroups(),  preferredOpts)  {	  for(Option    group    :    options.getOptionGroups(),    expectedOpts)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
66	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getOptionGroups(),  expectedOpts)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getOptionGroups(),  expectedOpts)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getOptionGroups(),  expectedOpts)  {	  for(Option    group    :    options.getOptionGroups(),    expectedOpts)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
67	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	  Option    option    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
68	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOption(currentToken);  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOption(currentToken);  expectedOpts.addAll(options.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
69	[BUG]  [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	  Option    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
70	[BUG]  [BUGGY]  for(Option  group  :  expectedOpts.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  expectedOpts.getOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  expectedOpts.getOptionGroups())  {	  for(Option    group    :    currentOption.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
71	[BUG]  [BUGGY]  for(Option  group  :  this.currentOption.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.currentOption.getOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.currentOption.getOptionGroups())  {	  for(Option    group    :    currentOption.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
72	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentOption,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
73	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
74	[BUG]  [BUGGY]  OptionGroup  group  =  currentOption.getOptionGroup(null,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  currentOption.getOptionGroup(null,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  currentOption.getOptionGroup(null,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
75	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(currentOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(currentOption,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(currentOption,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
76	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(arguments,  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(arguments);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
77	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups(),  expectedOpts);	  OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(currentToken);	  OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups(),  expectedOpts;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups(),  expectedOpts;  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups(),  expectedOpts;	  OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  skipParsing);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  skipParsing);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  skipParsing);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  true);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  true);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  0);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  0);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
83	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  false);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  false);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptionOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  currentOption.getOptionOptions();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  currentOption.getOptionOptions();	  Option    options    =    options.getOptionOptions();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
85	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(currentToken,  expectedOpts);	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
86	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken  +  1);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(currentToken  +  1);	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
87	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOption(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOption(currentToken);	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
88	[BUG]  [BUGGY]  for(Option  group  :  this.options.getOptions())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getOptions())  {	  for(Option    group    :    options.getOptions())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
89	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getOptions())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getOptions())  {	  for(Option    group    :    options.getOptions())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
90	[BUG]  [BUGGY]  Option  group  =  options.getGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroups(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups(),  expectedOpts);	  Option    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  Option  group  =  options.getGroups(),  expectedOpts;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroups(),  expectedOpts;  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups(),  expectedOpts;	  Option    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentOption);	  Option    optionGroup    =    options.getOptionGroup(expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(expectedOpts,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(expectedOpts,  currentToken);	  Option    optionGroup    =    options.getOptionGroup(expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
94	[BUG]  [BUGGY]  for(Option  group  :  this.options.getOptionGroups(),  expectedOpts)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getOptionGroups(),  expectedOpts)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getOptionGroups(),  expectedOpts)  {	  for(Option    group    :    this.options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  currentOption.getGroup();	  OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
96	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(),  expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(),  expectedOpts);	  OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
97	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  currentOption.getOptions(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  currentOption.getOptions(),  expectedOpts);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
98	[BUG]  [BUGGY]  Option  options  =  this.currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  this.currentOption.getOptions();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  this.currentOption.getOptions();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
99	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.options.getAllOpts(),  expectedOpts)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.options.getAllOpts(),  expectedOpts)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.options.getAllOpts(),  expectedOpts)  {	  for(OptionGroup    group    :    this.options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
100	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
101	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
102	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  optionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
104	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroups(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroups(),  expectedOpts);	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
105	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup(currentToken);	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptionOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  options  =  currentOption.getOptionOptions();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  currentOption.getOptionOptions();	  Options    options    =    options.getOptionOptions();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
107	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.options.getOptions())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.options.getOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.options.getOptions())  {	  for(OptionGroup    group    :    options.getOptions())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
108	[BUG]  [BUGGY]  for(OptionGroup  group  :  expectedOpts.getOpts())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  expectedOpts.getOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  expectedOpts.getOpts())  {	  for(OptionGroup    group    :    currentOption.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
109	[BUG]  [BUGGY]  for(Option  group  :  currentOption.getOpts())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  currentOption.getOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  currentOption.getOpts())  {	  for(Option    group    :    options.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
110	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  OptionGroup    group    =    options.getOptionGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
111	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  OptionGroup    group    =    options.getOptionGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
112	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken);  expectedOpts.add(group);	  OptionGroup    group    =    options.getOptionGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
113	[BUG]  [BUGGY]  if(options.getOptionGroup(currentToken)!=  null)  {  Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroup(currentToken)!=  null)  {  Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroup(currentToken)!=  null)  {  Option  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  }	  Option    optionGroup    =    options.getOptionGroup(currentToken);    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  =  options.getOptionGroup(currentToken);  expectedOpts.add(optionGroup);	  Option    optionGroup    =    options.getOptionGroup(currentToken);    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
115	[BUG]  [BUGGY]  Options  group  =  currentOption.getGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  group  =  currentOption.getGroup();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  currentOption.getGroup();	  Options    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
116	[BUG]  [BUGGY]  Options  group  =  options.getGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  group  =  options.getGroup(),  expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  options.getGroup(),  expectedOpts);	  Options    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
117	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultToken,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(defaultToken,  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(defaultToken);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
118	[BUG]  [BUGGY]  Group  group  =  options.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Group  group  =  options.getGroup();  expectedOpts.addAll(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getGroup();  expectedOpts.addAll(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
119	[BUG]  [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  expectedOpts.addAll(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  currentOption.getGroup();  expectedOpts.addAll(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  Option  group  =  options.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup();  expectedOpts.addAll(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup();  expectedOpts.addAll(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
121	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  preferredOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  preferredOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  preferredOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts(),  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
123	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptionGroups();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  currentOption.getOptionGroups();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  currentOption.getOptionGroups();	  Option    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
124	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
125	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptions());	  OptionGroup    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
126	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options,  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options,  expectedOpts);	  Option    optionGroup    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
127	[BUG]  [BUGGY]  Option  group  =  options.getGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(),  expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(),  expectedOpts);	  Option    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
128	[BUG]  [BUGGY]  Option  group  =  currentOption.getGroup();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  currentOption.getGroup();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  currentOption.getGroup();	  Option    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
129	[BUG]  [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(currentToken!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(currentToken!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  }	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
130	[BUG]  [BUGGY]  Group  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Group  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
131	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  name);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  name);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  name);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
132	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getRequiredOptions(),  expectedOpts);	  Option    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
133	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getSelectedOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getSelectedOptions());	  Option    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
134	[BUG]  [BUGGY]  if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
135	[BUG]  [BUGGY]  group.setSelected(expectedOpts);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group.setSelected(expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group.setSelected(expectedOpts);	  group.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
136	[BUG]  [BUGGY]  group.setSelected(false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group.setSelected(false);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group.setSelected(false);	  group.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
137	[BUG]  [BUGGY]  group.setSelected(options);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group.setSelected(options);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group.setSelected(options);	  group.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
138	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(expectedOpts);	  OptionGroup    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken  +  1);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken  +  1);	  OptionGroup    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
141	[BUG]  [BUGGY]  for(Option  group  :  options.getArguments())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getArguments())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getArguments())  {	  for(OptionGroup    group    :    options.getArguments())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
142	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.options.getArguments())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.options.getArguments())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.options.getArguments())  {	  for(OptionGroup    group    :    options.getArguments())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
143	[BUG]  [BUGGY]  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);	  if(options.getOptionGroups()!=    null)    {    Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
144	[BUG]  [BUGGY]  options.getOptionGroups();  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.getOptionGroups();  expectedOpts.add(optionGroup);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.getOptionGroups();  expectedOpts.add(optionGroup);	  if(options.getOptionGroups()!=    null)    {    Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
145	[BUG]  [BUGGY]  options.setOptionGroup(optionGroup);  expectedOpts.add(optionGroup);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.setOptionGroup(optionGroup);  expectedOpts.add(optionGroup);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.setOptionGroup(optionGroup);  expectedOpts.add(optionGroup);	  if(options.getOptionGroups()!=    null)    {    Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
146	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
147	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  }	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
148	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptions());	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
149	[BUG]  [BUGGY]  for(Option  group  :  options.getAllOptions())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getAllOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getAllOptions())  {	  for(Option    group    :    options.getGroups())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
150	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOpts());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOpts());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getOpts());	  OptionGroup    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
151	[BUG]  [BUGGY]  OptsGroup  group  =  options.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptsGroup  group  =  options.getGroup();  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptsGroup  group  =  options.getGroup();  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
152	[BUG]  [BUGGY]  Option  group  =  options.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup();  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup();  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
153	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.add(group,  currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.add(group,  currentToken);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();  expectedOpts.add(group,  currentToken);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
154	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(defaultOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups(defaultOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(defaultOpts);	  OptionGroup    group    =    options.getOptionGroups(null);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
155	[BUG]  [BUGGY]  for(Option  group  :  this.options.getRequiredOptions())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getRequiredOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getRequiredOptions())  {	  for(Option    group    :    this.options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
156	[BUG]  [BUGGY]  for(Option  group  :  this.options.getOpts())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getOpts())  {	  for(Option    group    :    this.options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
157	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group.getRequiredOptions());	  if(options.getOptionGroups()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
158	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentOption  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentOption  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());	  if(options.getOptionGroups()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
159	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentOption  =  options.getRequiredOptions();	  if(options.getOptionGroups()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
160	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());	  Option    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
161	[BUG]  [BUGGY]  Options  options  =  options.getOptionOptionGroups();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  options  =  options.getOptionOptionGroups();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  options.getOptionOptionGroups();	  Options    options    =    currentOption.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
162	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroups  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroups  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
163	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
164	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    else    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentOption);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentOption);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentOption);  }  else  {  expectedOpts.add(currentOption);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    else    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
166	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.remove(currentOption);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.remove(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.remove(currentOption);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    else    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
167	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup(null);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup(null);	  OptionGroup    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
168	[BUG]  [BUGGY]  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options.getOptionGroups();  expectedOpts.add(group);	  if(options.getOptionGroups()!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
169	[BUG]  [BUGGY]  group.addOption(this);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  group.addOption(this);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	group.addOption(this);	  group.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
170	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Options  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  else  {	  Options    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
171	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(defaultToken);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(defaultToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(defaultToken);	  Option    group    =    options.getOptionGroup(null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
172	[BUG]  [BUGGY]  Group  group  =  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Group  group  =  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getOptionGroups();  expectedOpts.add(group);	  Group    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
173	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options)+  1;  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options)+  1;	  Option    optionGroup    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
174	[BUG]  [BUGGY]  for(Option  group  :  options.getOptionGroups(),  currentOption)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  options.getOptionGroups(),  currentOption)  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  options.getOptionGroups(),  currentOption)  {	  for(Option    group    :    options.getOptionGroups(),    expectedOpts)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
175	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());	  Option    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
176	[BUG]  [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  }	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
177	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
178	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroups(),  options.getRequiredOptions());	  Option    optionGroup    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
179	[BUG]  [BUGGY]  Option  group  =  options.getGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(options.getRequiredOptions());	  Option    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
180	[BUG]  [BUGGY]  Option  group  =  options.getGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(options.getOptionGroups());	  Option    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
181	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(null);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(null);	  OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
182	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getRequiredOptions());	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
183	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup()  +  1);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup()  +  1);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
184	[BUG]  [BUGGY]  OptsGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptsGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptsGroup  group  =  options.getGroup();  expectedOpts.addAll(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  for(OptionGroup  group  :  currentOption.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  currentOption.getOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  currentOption.getOptionGroups())  {	  for(OptionGroup    group    :    currentOption.getAllOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
186	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptions();  expectedOpts.add(currentOption.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentOption  =  options.getOptions();  expectedOpts.add(currentOption.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentOption  =  options.getOptions();  expectedOpts.add(currentOption.getRequiredOptions());	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
188	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  else  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  else  {  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  else  {	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
189	[BUG]  [BUGGY]  Options  group  =  options.getGroups();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  group  =  options.getGroups();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  options.getGroups();	  Options    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
190	[BUG]  [BUGGY]  Options  group  =  options.getGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  group  =  options.getGroup(currentToken);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  options.getGroup(currentToken);	  Options    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptions();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
192	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  OptionGroup    group    =    options.getOptionGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
193	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroups();  expectedOpts.add(group);	  OptionGroup    group    =    options.getOptionGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
194	[BUG]  [BUGGY]  options  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());	  Option    option    =    options.getOptionGroup();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
195	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroup();  expectedOpts.add(options.getRequiredOptions());	  Option    option    =    options.getOptionGroup();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
196	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentOption  =  options.getOptionGroups();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentOption  =  options.getOptionGroups();	  if(options.getOptions()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
197	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(arguments);	  OptionGroup    group    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
198	[BUG]  [BUGGY]  for(Option  option  :  options.getOptions())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  option  :  options.getOptions())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  option  :  options.getOptions())  {	  for(OptionGroup    group    :    options.getOptions())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
199	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getOptionGroups());	  Option    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
200	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getOpts());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getOpts());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getOpts());	  Option    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
201	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptionGroups());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getRequiredOptionGroups());	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
202	[BUG]  [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
203	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(defaultOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(defaultOpts);	  OptionGroup    group    =    options.getOptionGroup(defaultToken);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
204	[BUG]  [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionGroup  group  =  options.getGroup();  currentToken  =  group.getToken();  }	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
205	[BUG]  [BUGGY]  Group  group  =  options.getGroup();  currentToken  =  group.getToken();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Group  group  =  options.getGroup();  currentToken  =  group.getToken();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Group  group  =  options.getGroup();  currentToken  =  group.getToken();	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
206	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  0);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  0);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
207	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skipParsing);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skipParsing);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skipParsing);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
208	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
209	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentOption  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentOption  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
210	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  else  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  else  {  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptions()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  else  {	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
211	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  stopAtNonOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  stopAtNonOption);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
212	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups();  expectedOpts.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionGroups();  expectedOpts.add(option.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroups();  expectedOpts.add(option.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
213	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions(),  option);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions(),  option);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions(),  option);	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
214	[BUG]  [BUGGY]  Options  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  option  =  options.getOptions();  expectedOpts.add(option.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
215	[BUG]  [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptionGroups();  expectedOpts.add(group);	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
216	[BUG]  [BUGGY]  if(options!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
217	[BUG]  [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroups();  expectedOpts.add(group,  currentToken);	  Option    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
218	[BUG]  [BUGGY]  Option  group  =  options.getSelectedOptionGroup(null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getSelectedOptionGroup(null);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getSelectedOptionGroup(null);	  Option    group    =    options.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
219	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptions();  expectedOpts.addAll(options.getOptionGroups());	  Option    option    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
220	[BUG]  [BUGGY]  Opts  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Opts  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Opts  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
221	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken);  expectedOpts.add(currentOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(currentToken);  expectedOpts.add(currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(currentToken);  expectedOpts.add(currentOption);	  Option    optionGroup    =    options.getOptionGroup(currentToken);    expectedOpts.add(optionGroup);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
222	[BUG]  [BUGGY]  optionGroup.setSelected(new  OptionGroup());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup.setSelected(new  OptionGroup());  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup.setSelected(new  OptionGroup());	  optionGroup.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
223	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(options.getRequiredOptions());	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
224	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    else    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()  ==  null)  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  else  {  expectedOpts.add(currentOption);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    else    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
226	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(null,  expectedOpts,  currentToken);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
227	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  currentToken);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(null,  currentToken);	  OptionGroup    group    =    options.getOptionGroup(null,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
228	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts()  +  1);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionOpts()  +  1);	  Option    optionGroup    =    options.getOptionGroup(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
229	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(options.getGroup());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(options.getGroup());  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(options.getGroup());	  OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
230	[BUG]  [BUGGY]  Opts  group  =  options.getGroups();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Opts  group  =  options.getGroups();  expectedOpts.add(group);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Opts  group  =  options.getGroups();  expectedOpts.add(group);	  Option    group    =    options.getGroups();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
231	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group,  expectedOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup();  expectedOpts.addAll(group,  expectedOpts);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  optionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  group  =  options.getGroup();  expectedOpts.addAll(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.addAll(group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
233	[BUG]  [BUGGY]  Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());	  if(options.getOptions()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
234	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Option  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  if(options.getOptions()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
235	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.addAll(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
236	[BUG]  [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
237	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());	  OptionGroup    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
238	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
239	[BUG]  [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());	  options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
240	[BUG]  [BUGGY]  this.options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  this.options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	this.options  =  options.getOptionGroups();  expectedOpts.add(options.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
241	[BUG]  [BUGGY]  optionGroup.setSelected(defaultOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup.setSelected(defaultOpts);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup.setSelected(defaultOpts);	  optionGroup.setSelected(null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getGroups());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getGroups());	  Option    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
243	[BUG]  [BUGGY]  Option  option  =  options.getOptionOption(currentToken);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionOption(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionOption(currentToken);	  Option    options    =    options.getOptionOptions();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
244	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.add(option.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionGroup();  expectedOpts.add(option.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroup();  expectedOpts.add(option.getRequiredOptions());	  Option    option    =    options.getOptions();    expectedOpts.add(option.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
245	[BUG]  [BUGGY]  optionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  group  =  options.getGroups();  expectedOpts.addAll(options.getOptionGroups());	  OptionGroup    group    =    options.getGroups();    expectedOpts.addAll(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
246	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.currentOption.getOpts())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.currentOption.getOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.currentOption.getOpts())  {	  for(OptionGroup    group    :    currentOption.getOpts())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
247	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getOpts());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getOpts());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(options.getOptionGroup(),  options.getOpts());	  Option    optionGroup    =    options.getOptionGroup(options.getOptionGroup());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
248	[BUG]  [BUGGY]  if(options.getOptionGroup()!=  null)  {  Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroup()!=  null)  {  Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroup()!=  null)  {  Option  option  =  options.getOptionGroup();  expectedOpts.addAll(options.getRequiredOptions());  }	  Option    option    =    options.getOptionGroup();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
249	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  Option    option    =    options.getOptionGroup();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
250	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.options.getOpts())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.options.getOpts())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.options.getOpts())  {	  for(OptionGroup    group    :    this.options.getAllOpts())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
251	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  option  =  options.getOptionGroups();  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  option  =  options.getOptionGroups();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
252	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());	  Option    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
253	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments,  currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(arguments,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(arguments,  currentToken);	  Option    optionGroup    =    options.getOptionGroup(arguments);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
254	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(arguments);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(arguments);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(arguments);	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
255	[BUG]  [BUGGY]  Option  currentToken  =  options.getOptionGroup(this.currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  currentToken  =  options.getOptionGroup(this.currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  currentToken  =  options.getOptionGroup(this.currentToken);	  Option    currentToken    =    options.getOptionGroup(currentToken);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
256	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  currentOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  currentOption);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  currentOption);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
257	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  null);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(currentToken,  expectedOpts,  null);	  Option    optionGroup    =    options.getOptionGroup(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
258	[BUG]  [BUGGY]  for(Option  group  :  this.options.getAllOptionGroups())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.options.getAllOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.options.getAllOptionGroups())  {	  for(Option    group    :    this.options.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
259	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  preferredOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  optionGroup  =  options.getOptionGroup(),  preferredOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  optionGroup  =  options.getOptionGroup(),  preferredOpts);	  Option    optionGroup    =    options.getOptionGroup(),    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
260	[BUG]  [BUGGY]  CurrentToken  group  =  options.getGroup();  currentToken  =  group.getToken();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  CurrentToken  group  =  options.getGroup();  currentToken  =  group.getToken();  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	CurrentToken  group  =  options.getGroup();  currentToken  =  group.getToken();	  OptionGroup    group    =    options.getGroup();    currentToken    =    group.getToken();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
261	[BUG]  [BUGGY]  Option  options  =  options.getOptionOption(currentToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  options  =  options.getOptionOption(currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  options  =  options.getOptionOption(currentToken);	  Option    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
262	[BUG]  [BUGGY]  for(Option  group  :  this.optionGroups.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(Option  group  :  this.optionGroups.getOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(Option  group  :  this.optionGroups.getOptionGroups())  {	  for(Option    group    :    currentOption.getOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
263	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(group.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(group.getRequiredOptions());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts.addAll(group.getRequiredOptions());	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
264	[BUG]  [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  Option  option  =  options.getOptionGroups();  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
265	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentToken);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts.add(group,  currentToken);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
266	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skippeParsing);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skippeParsing);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroups();  expectedOpts.add(group,  currentToken,  skippeParsing);	  OptionGroup    group    =    options.getGroups();    expectedOpts.add(group,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
267	[BUG]  [BUGGY]  if(optionGroup!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(optionGroup!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(optionGroup!=  null)  {  Option  optionGroup  =  options.getOptionGroups();  expectedOpts.add(optionGroup);  }	  if(options.getOptionGroups()!=    null)    {    Option    optionGroup    =    options.getOptionGroups();    expectedOpts.add(optionGroup);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
268	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getOptionGroup(options.getOptionGroups(),  expectedOpts);	  Option    group    =    options.getOptionGroup(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
269	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(group))  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(group))  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(group))  {  OptionGroup  group  =  options.getGroups();  expectedOpts.add(group);  }	  if(options.getOptionGroups()!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
270	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options.getOptionGroups()!=  null)  {  Option  options  =  options.getOptions();  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    Options    options    =    options.getOptions();    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
271	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getGroups());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getGroups());	  OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
272	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getGroup(options.getOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getGroup(options.getOptionGroups());	  OptionGroup    group    =    options.getGroups();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
273	[BUG]  [BUGGY]  optionGroup  group  =  options.getGroup();  expectedOpts.add(group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  optionGroup  group  =  options.getGroup();  expectedOpts.add(group);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	optionGroup  group  =  options.getGroup();  expectedOpts.add(group);	  OptionGroup    group    =    options.getGroup();    expectedOpts.add(group);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
274	[BUG]  [BUGGY]  if(options!=  null)  {  OptionsGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  if(options!=  null)  {  OptionsGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	if(options!=  null)  {  OptionsGroup  group  =  options.getOptionGroups();  expectedOpts.add(group);  }	  if(options!=    null)    {    OptionGroup    group    =    options.getGroups();    expectedOpts.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
275	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(this);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroups(this);  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroups(this);	  OptionGroup    group    =    options.getOptionGroups(null);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
276	[BUG]  [BUGGY]  for(OptionGroup  group  :  this.currentOption.getAllOptionGroups())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  for(OptionGroup  group  :  this.currentOption.getAllOptionGroups())  {  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	for(OptionGroup  group  :  this.currentOption.getAllOptionGroups())  {	  for(OptionGroup    group    :    currentOption.getAllOptionGroups())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
277	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptionGroups());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptionGroups());  [BUGGY]      for  (OptionGroup  group  :  options.getOptionGroups())  {  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getSelectedOptionGroups());	  OptionGroup    group    =    options.getSelectedOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
278	[BUG]  [BUGGY]  Option  group  =  options.getGroup(options.getGroup());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(options.getGroup());  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(options.getGroup());	  Option    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
279	[BUG]  [BUGGY]  Option  group  =  options.getGroup(arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(arguments);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(arguments);	  Option    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  Option  group  =  options.getGroup(true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Option  group  =  options.getGroup(true);  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Option  group  =  options.getGroup(true);	  Option    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
281	[BUG]  [BUGGY]  Options  group  =  options.getGroup(options.getGroup());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());        [BUGGY]  Options  group  =  options.getGroup(options.getGroup());  [BUGGY]      {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  {  for  (String  argument  :  arguments)  {  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	109	110	1	replace	Options  group  =  options.getGroup(options.getGroup());	  Options    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
