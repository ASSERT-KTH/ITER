bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(options!=  null  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options!=  null  ||  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options!=  null  ||  expectedOpts.size()  >  0)  {	  if(options!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
2	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  options.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  options.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  options.size()  >  0)  {	  if(options!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
3	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
4	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  ||  expectedOpts.size()  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  cmd.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  cmd.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  cmd.size()  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  if(expectedOpts  ==  null  &&  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  &&  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  &&  expectedOpts.size()  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(cmd!=  null  ||  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||  expectedOpts.length  >  0)  {	  if(cmd!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
8	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  cmd.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  cmd.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  cmd.length  >  0)  {	  if(cmd!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
9	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.length  >  0)  {	  if(cmd!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  expectedOpts,  currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  expectedOpts,  currentToken);	  Option    option    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(group,  expectedOpts);	  Option    option    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
13	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  currentOption.getOptions();	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  Option  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  group.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  group.getOptions();	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  cmd.getOption(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  cmd.getOption(group);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(argument  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(argument  ==  null)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(argument  ==  null)  {	  if(argument!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
17	[BUG]  [BUGGY]  if(argument.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(argument.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(argument.length  ==  0)  {	  if(argument!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
18	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup(group,  expectedOpts);	  OptionGroup    currentOption    =    cmd.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
19	[BUG]  [BUGGY]  OptionGroup  currentOption  =  group.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  group.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  group.getOptionGroup(cmd);	  OptionGroup    currentOption    =    cmd.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
20	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup(currentToken);	  OptionGroup    currentOption    =    cmd.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
21	[BUG]  [BUGGY]  Option  options  =(Option)options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =(Option)options.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =(Option)options.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
22	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  arguments.length  ==  0)  {	  if(arguments!=    null    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
23	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  arguments.length  <  2)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  arguments.length  <  2)  {	  if(arguments!=    null    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
24	[BUG]  [BUGGY]  if(arguments!=  null  &&  cmd.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  &&  cmd.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  &&  cmd.length  >  0)  {	  if(cmd!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
25	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null    &&    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
26	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOptionGroup(cmd);	  Option    currentOption    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroup(group,  cmd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOptionGroup(group,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOptionGroup(group,  cmd);	  Option    currentOption    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOptionGroup(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOptionGroup(group);	  Option    currentOption    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(group);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(group);	  Option    currentOption    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(group,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(group,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(group,  cmd);	  Option    currentOption    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(options,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup(options,  expectedOpts);	  OptionGroup    currentOption    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(options,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup(options,  group);	  OptionGroup    currentOption    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
33	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  stopAtNonOption);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
34	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  skipParsing);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  skipParsing);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  skipParsing);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  0);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  0);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  true);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  true);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
37	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  cmd.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  cmd.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  cmd.size()  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
38	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.size()!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.size()!=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.size()!=  0)  {	  if(cmd    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
39	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||  cmd.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  ||  cmd.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  ||  cmd.size()  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
40	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  group);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  group);	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
41	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts);	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  expectedOpts);	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
44	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  cmd.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  cmd.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  cmd.length  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
45	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length!=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.length!=  0)  {	  if(cmd    ==    null    ||    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
46	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.length  >=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.length  >=  0)  {	  if(cmd    ==    null    ||    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(currentToken,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken,  cmd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(currentToken,  cmd);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
50	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	||  stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
52	[BUG]  [BUGGY]  Option[]  arguments  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option[]  arguments  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
53	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(group,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(group);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
54	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getRequiredOption(group);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getRequiredOption(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getRequiredOption(group);	  Option    currentOption    =    options.getRequiredOption(group);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  &&  arguments.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  &&  arguments.size()  >  0)  {	  if(expectedOpts!=    null    &&    arguments.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getAllArguments();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getAllArguments();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getAllArguments();	  List    <    String>    arguments    =    options.getRequiredArguments();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
58	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
59	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(group,  expectedOpts);	  OptionGroup    currentOption    =    options.getOptionGroup(group,    cmd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
60	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(group,  cmd,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(group,    cmd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
61	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  0);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(group,  0);	  OptionGroup    currentOption    =    options.getOptionGroup(group,    cmd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
62	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getArguments());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getArguments());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getArguments());	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
63	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptions());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptions());	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
64	[BUG]  [BUGGY]  if(arguments  ==  null  ||  expectedOpts.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  expectedOpts.length  >=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  expectedOpts.length  >=  0)  {	  if(arguments    ==    null    ||    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  ||  expectedOpts.length  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  expectedOpts.length  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(group,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(group,  cmd);	  Option    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
68	[BUG]  [BUGGY]  if(arguments  ==  null  ||  expectedOpts.size()!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  expectedOpts.size()!=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  expectedOpts.size()!=  0)  {	  if(arguments    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
69	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  arguments.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  arguments.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  arguments.size()  ==  0)  {	  if(arguments    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
70	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(options,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(options,  expectedOpts);	  Option    currentOption    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken,  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(currentToken,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(currentToken,  cmd);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  currentToken,  expectedOpts);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
73	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(cmd,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  currentOption.getOption(cmd,  options);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  currentOption.getOption(cmd,  options);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
74	[BUG]  [BUGGY]  List  <  String>  arguments  =  cmd.getArguments();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  cmd.getArguments();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  cmd.getArguments();	  List    <    String>    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
75	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getArguments(cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getArguments(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getArguments(cmd);	  List    <    String>    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  options.getArguments();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  options.getArguments();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  options.getArguments();	  List    <    String>    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArguments());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
78	[BUG]  [BUGGY]  if(options.getRequiredArguments()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredArguments()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredArguments()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArguments());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
79	[BUG]  [BUGGY]  Set  <  String>  arguments  =  new  HashSet  <  String>(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Set  <  String>  arguments  =  new  HashSet  <  String>(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Set  <  String>  arguments  =  new  HashSet  <  String>(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArguments());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(currentToken,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(currentToken,  expectedOpts);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
81	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getOptionArgs();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getOptionArgs();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getOptionArgs();	  List    <    String>    arguments    =    options.getRequiredArgs();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  if(cmd!=  null  ||!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||!stopAtNonOption)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||!stopAtNonOption)  {	  if(cmd    ==    null    ||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
83	[BUG]  [BUGGY]  if(cmd  ==  null  ||!skipParsing)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||!skipParsing)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||!skipParsing)  {	  if(cmd    ==    null    ||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
84	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption();	  Option    currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOptionGroup();	  Option    currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
86	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  stopAtNonOption);	  Option    currentOption    =    options.getOption(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  cmd);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currentToken,  expectedOpts,  cmd);	  Option    currentOption    =    options.getOption(currentToken,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  stopAtNonOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  stopAtNonOption,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  stopAtNonOption,  expectedOpts);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  group);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
90	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  block);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  block);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  block);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
91	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
92	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
93	[BUG]  [BUGGY]  OptionGroup  currentOption  =  group.getOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  group.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  group.getOptionGroup();	  OptionGroup    currentOption    =    option.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
94	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup();	  OptionGroup    currentOption    =    option.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
95	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||  arguments.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  ||  arguments.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  ||  arguments.size()  ==  0)  {	  if(arguments!=    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  group  =  options.getOptionGroup(cmd);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
97	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  group  =  cmd.getOptionGroup(group);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
98	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
99	[BUG]  [BUGGY]  Options  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  group.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Options  options  =  group.getOptions();	  Options    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  if(options.getRequiredArgs()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredArgs()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredArgs()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArgs());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
101	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArgs());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
102	[BUG]  [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArguments()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArguments()  +  1);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  new  ArrayList(options.getArguments()  +  1);	  List    <    String>    arguments    =    new    ArrayList(options.getArguments());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
103	[BUG]  [BUGGY]  if(arguments  ==  null  ||  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  expectedOpts.length  >  0)  {	  if(arguments!=    null    ||    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  if(arguments!=  null  ||  expectedOpts.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  expectedOpts.length  <  2)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  expectedOpts.length  <  2)  {	  if(arguments!=    null    ||    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  expectedOpts,  stopAtNonOption);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  skipParsing);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  skipParsing);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  expectedOpts,  skipParsing);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
107	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(group,  expectedOpts);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
108	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null  ||  options.getRequiredOptions().length  ==  0)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null  ||  options.getRequiredOptions().length  ==  0)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null  ||  options.getRequiredOptions().length  ==  0)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()    ==    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
109	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
110	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(group,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
111	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  group);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
112	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  expectedOpts);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    group);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
113	[BUG]  [BUGGY]  if(arguments!=  null  ||  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  expectedOpts.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
114	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  arguments.contains(argument))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  arguments.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  arguments.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
115	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
116	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
117	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(true);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(true);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(true);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
118	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArgs());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
119	[BUG]  [BUGGY]  if(cmd!=  null  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||  expectedOpts.size()  >  0)  {	  if(cmd!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
120	[BUG]  [BUGGY]  if(cmd  ==  null  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  expectedOpts.size()  >  0)  {	  if(cmd!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
121	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
122	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
123	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
124	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  group;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  group;  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  group;	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
125	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts;  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  expectedOpts;	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
126	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOption(group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOption(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOption(group);	  OptionGroup    currentOption    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
127	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOption(cmd,  expectedOpts);	  OptionGroup    currentOption    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
128	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOption(cmd,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
129	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  arguments.length  ==  0)  {	  if(expectedOpts!=    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
130	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
131	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
132	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
133	[BUG]  [BUGGY]  if(arguments  ==  null  ||  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments  ==  null  ||  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments  ==  null  ||  expectedOpts.size()  >  0)  {	  if(arguments!=    null    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
134	[BUG]  [BUGGY]  if(arguments!=  null  ||  expectedOpts.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  expectedOpts.size()  >=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  expectedOpts.size()  >=  0)  {	  if(arguments!=    null    ||    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
135	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  stopAtNonOption,  expectedOpts);	  Option    currentOption    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
136	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  blockAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  blockAtNonOption);	  Option    currentOption    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
137	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  group);	  Option    currentOption    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
138	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(group);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  cmd.getOption(group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  cmd.getOption(group);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
139	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  cmd.getOption(options,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  cmd.getOption(options,  expectedOpts);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
140	[BUG]  [BUGGY]  Options  options  =  options.getOptionOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  options.getOptionOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Options  options  =  options.getOptionOptions();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
141	[BUG]  [BUGGY]  Options  options  =  cmd.getOptionOptions();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  cmd.getOptionOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Options  options  =  cmd.getOptionOptions();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
142	[BUG]  [BUGGY]  Options  options  =  currentOption.getOptionOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  currentOption.getOptionOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Options  options  =  currentOption.getOptionOptions();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
143	[BUG]  [BUGGY]  List  <  String>  arguments  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  cmd.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  cmd.getOptions();	  List    <    String>    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
144	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  options.getOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  options.getOptions();	  List    <    String>    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
145	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
146	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  stopAtNonOption,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  stopAtNonOption,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  stopAtNonOption,  expectedOpts);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
147	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(group,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(group,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
148	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currToken,  cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currToken,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currToken,  cmd);	  Option    currentOption    =    options.getOption(currToken);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
149	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currToken,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currToken,  expectedOpts);	  Option    currentOption    =    options.getOption(currToken);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
150	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  currentToken);	  Option    currentOption    =    options.getOption(currentToken,    cmd);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
151	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(currentToken);	  Option    currentOption    =    options.getOption(currentToken,    cmd);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
152	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  cmd,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  cmd,  expectedOpts);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currentToken,  cmd,  expectedOpts);	  Option    currentOption    =    options.getOption(currentToken,    cmd);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
153	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
154	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
155	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
156	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArguments());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArguments());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
157	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  null);	  Option    currentOption    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
158	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  null);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
159	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  skipParsing);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  skipParsing);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  skipParsing);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
160	[BUG]  [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  cmd.getOptionGroup(group,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  cmd.getOptionGroup(group,  stopAtNonOption);	  OptionGroup    currentOption    =    cmd.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
161	[BUG]  [BUGGY]  Option  options  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  options.getOptionGroups();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  options.getOptionGroups();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
162	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptionArgs());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptionArgs());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getOptionArgs());	  List    <    String>    arguments    =    new    ArrayList(options.getOptionArgs());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
163	[BUG]  [BUGGY]  if(cmd  ==  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  arguments.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  arguments.length  >  0)  {	  if(arguments    ==    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
164	[BUG]  [BUGGY]  if(parameters!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(parameters!=  null)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(parameters!=  null)  {	  if(cmd!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
165	[BUG]  [BUGGY]  if(cmd  ==  null  ||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  ||  stopAtNonOption)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  ||  stopAtNonOption)  {	  if(cmd    ==    null    ||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
166	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  else  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  else  {  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  stopAtNonOption);  }  else  {	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
167	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOptionGroup(options);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOptionGroup(options);	  OptionGroup    currentOption    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
168	[BUG]  [BUGGY]  if(cmd  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  &&  arguments.length  >  0)  {	  if(cmd!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
169	[BUG]  [BUGGY]  if(cmd!=  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||  arguments.length  >  0)  {	  if(cmd!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
170	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  currentToken,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
171	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  currentToken,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  currentToken,  null);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
172	[BUG]  [BUGGY]  if(options  ==  null  ||  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options  ==  null  ||  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options  ==  null  ||  expectedOpts.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
173	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  expectedOpts.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  expectedOpts.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  expectedOpts.length  ==  0)  {	  if(arguments!=    null    &&    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
174	[BUG]  [BUGGY]  if(cmd!=  null  &&  expectedOpts.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  &&  expectedOpts.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  &&  expectedOpts.length  ==  0)  {	  if(arguments!=    null    &&    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
175	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(currToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(currToken);	  Option    currentOption    =    options.getRequiredOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
176	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
177	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken);  if(currentOption!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(currentToken);  if(currentOption!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(currentToken);  if(currentOption!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
179	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  Collection  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  Collection  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  Collection  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
180	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  list  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
181	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(md);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(md);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(md);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
182	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions()).expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions()).expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions()).expectedOpts.addAll(cmd);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
183	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getAllOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getAllOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getAllOptions());  expectedOpts.addAll(cmd);  }	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
184	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
185	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
186	[BUG]  [BUGGY]  if(options!=  null  &&  options.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options!=  null  &&  options.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options!=  null  &&  options.size()  >  0)  {	  if(options!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
187	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(options,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(options,  stopAtNonOption);	  Option    currentOption    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
188	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(null);	  Option    currentOption    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
189	[BUG]  [BUGGY]  if(parameters!=  null  &&  arguments.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(parameters!=  null  &&  arguments.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(parameters!=  null  &&  arguments.size()  >  0)  {	  if(expectedOpts!=    null    &&    arguments.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
190	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  cmd.getOptions(true);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  cmd.getOptions(true);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
191	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(	  if(options.getRequiredOptions()    ==    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
192	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getOptions()!=  null)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener	  if(options.getRequiredOptions()    ==    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
193	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(group,  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(group,  cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(group,  cmd);	  Option    currentOption    =    options.getRequiredOption(group);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
194	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  cmd.getOption(currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  cmd.getOption(currentToken);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
195	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  currentToken);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  cmd.getOption(options,  currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  cmd.getOption(options,  currentToken);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
196	[BUG]  [BUGGY]  OptionOption  currentOption  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionOption  currentOption  =  options.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionOption  currentOption  =  options.getOptionGroup();	  OptionGroup    currentOption    =    option.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
197	[BUG]  [BUGGY]  OptionGroup  currentOption  =  option.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  option.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  option.getOptionGroup(cmd);	  OptionGroup    currentOption    =    option.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
198	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.addChangeListener(this);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArgs());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
199	[BUG]  [BUGGY]  if(cmd!=  null  ||  expectedOpts.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||  expectedOpts.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||  expectedOpts.size()  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
200	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currentToken,  cmd,  stopAtNonOption);	  Option    currentOption    =    options.getOption(currentToken,    cmd);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
201	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(currentToken,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(currentToken,  null);	  Option    currentOption    =    options.getOption(currentToken,    cmd);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
202	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  stopAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  stopAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    group);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
203	[BUG]  [BUGGY]  if(cmd  ==  null  &&  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  &&  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  &&  expectedOpts.size()  >  0)  {	  if(cmd!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
204	[BUG]  [BUGGY]  if(arguments!=  null  &&  expectedOpts.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  &&  expectedOpts.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  &&  expectedOpts.size()  ==  0)  {	  if(arguments!=    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
205	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  blockAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(cmd,  blockAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
206	[BUG]  [BUGGY]  if(cmd  ==  null  &&  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd  ==  null  &&  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd  ==  null  &&  expectedOpts.length  >  0)  {	  if(cmd!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
207	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(stopAtNonOption)  {  List  <  String>  arguments  =  new  ArrayList(options.getRequiredArgs());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredArgs());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
208	[BUG]  [BUGGY]  if(currentToken!=  null  &&  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(currentToken!=  null  &&  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(currentToken!=  null  &&  expectedOpts.length  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
209	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption;  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  cmd,  stopAtNonOption;	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
210	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getArgs();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getArgs();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getArgs();	  List    <    String>    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
211	[BUG]  [BUGGY]  if(cmd!=  null  ||  expectedOpts.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  ||  expectedOpts.length  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  ||  expectedOpts.length  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
212	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  group  =  options.getOptionGroup(currentOption);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
213	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups(cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  group  =  options.getOptionGroups(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  group  =  options.getOptionGroups(cmd);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
214	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  group  =  options.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  group  =  options.getOptionGroup(cmd);	  OptionGroup    group    =    options.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
215	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getRequiredOptions();	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
216	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOptions();  expectedOpts.addAll(currentOption);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getRequiredOptions();  expectedOpts.addAll(currentOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getRequiredOptions();  expectedOpts.addAll(currentOption);	  if(stopAtNonOption)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
217	[BUG]  [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArguments()).clone();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArguments()).clone();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  new  ArrayList(options.getArguments()).clone();	  List    <    String>    arguments    =    new    ArrayList(options.getArguments());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
218	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getOptionArguments();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getOptionArguments();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getOptionArguments();	  List    <    String>    arguments    =    options.getRequiredArguments();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
219	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  currentToken);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  currentToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd,  currentToken);	  List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
220	[BUG]  [BUGGY]  Option  currentOption  =  group.getOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  group.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  group.getOptionGroup();	  Option    currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
221	[BUG]  [BUGGY]  Option  currentOption  =  option.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  option.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  option.getOptionGroup();	  Option    currentOption    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
222	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken,  defaultToken);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(currentToken,  defaultToken);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  option  =  options.getOption(currentToken,  defaultToken);	  Option    option    =    options.getOption(cmd,    currentToken);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
223	[BUG]  [BUGGY]  if(expectedOpts!=  null  &&  expectedOpts.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  &&  expectedOpts.size()  >  1)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  &&  expectedOpts.size()  >  1)  {	  if(expectedOpts!=    null    &&    expectedOpts.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
224	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  expectedOpts,  null);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
225	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(options,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(options,  group);	  Option    currentOption    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
226	[BUG]  [BUGGY]  Option  currentOption  =  cmd.getOption(options)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  cmd.getOption(options)+  1;  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  cmd.getOption(options)+  1;	  Option    currentOption    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
227	[BUG]  [BUGGY]  if(expectedOpts  ==  null  &&  expectedOpts.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  &&  expectedOpts.length  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  &&  expectedOpts.length  >  0)  {	  if(expectedOpts!=    null    &&    expectedOpts.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
228	[BUG]  [BUGGY]  OptionGroup  currentOption  =  optionGroup.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  optionGroup.getOptionGroup(options);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  optionGroup.getOptionGroup(options);	  OptionGroup    currentOption    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
229	[BUG]  [BUGGY]  if(cmd!=  null  &&  cmd.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(cmd!=  null  &&  cmd.length()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(cmd!=  null  &&  cmd.length()  >  0)  {	  if(cmd!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
230	[BUG]  [BUGGY]  if(arguments!=  null  ||  expectedOpts.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(arguments!=  null  ||  expectedOpts.length!=  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(arguments!=  null  ||  expectedOpts.length!=  0)  {	  if(arguments    ==    null    ||    expectedOpts.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
231	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getArgumentArgs();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getArgumentArgs();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getArgumentArgs();	  List    <    String>    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
232	[BUG]  [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getOptionGroups());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  new  ArrayList(options.getOptionGroups());	  List    <    String>    arguments    =    new    ArrayList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
233	[BUG]  [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArgumentOpts());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getArgumentOpts());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  new  ArrayList(options.getArgumentOpts());	  List    <    String>    arguments    =    new    ArrayList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  group);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOption(cmd,  group);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOption(cmd,  group);	  OptionGroup    currentOption    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
235	[BUG]  [BUGGY]  if(md  ==  null  ||  expectedOpts.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(md  ==  null  ||  expectedOpts.size()  ==  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(md  ==  null  ||  expectedOpts.size()  ==  0)  {	  if(cmd    ==    null    ||    expectedOpts.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
236	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  blockAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  blockAtNonOption);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
237	[BUG]  [BUGGY]  Option  options  =  options.getOptionOptions();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  options.getOptionOptions();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  options  =  options.getOptionOptions();	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
238	[BUG]  [BUGGY]  Options  options  =  options.getOptionOption(cmd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  options.getOptionOption(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Options  options  =  options.getOptionOption(cmd);	  Options    options    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
239	[BUG]  [BUGGY]  if(argument!=  null  &&  expectedOpts.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(argument!=  null  &&  expectedOpts.size()  >  0)  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(argument!=  null  &&  expectedOpts.size()  >  0)  {	  if(argument!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
240	[BUG]  [BUGGY]  if(argument!=  null  &&  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(argument!=  null  &&  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(argument!=  null  &&  expectedOpts.contains(argument))  {	  if(argument!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
241	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  blockAtNonOption);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  blockAtNonOption);	  Option    currentOption    =    options.getRequiredOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
242	[BUG]  [BUGGY]  if(expectedOpts  ==  null  ||  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts  ==  null  ||  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts  ==  null  ||  expectedOpts.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
243	[BUG]  [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.contains(argument))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(expectedOpts!=  null  ||  expectedOpts.contains(argument))  {  [BUGGY]      {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(expectedOpts!=  null  ||  expectedOpts.contains(argument))  {	  if(arguments    ==    null    ||    expectedOpts.contains(argument))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
244	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  null);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  expectedOpts,  null);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
245	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  block);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  block);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  expectedOpts,  block);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
246	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getOption(cmd,  expectedOpts,  true);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getOption(cmd,  expectedOpts,  true);	  Option    currentOption    =    options.getOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
247	[BUG]  [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()    ==    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
248	[BUG]  [BUGGY]  OptionGroup  currentOption  =(OptionGroup)options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =(OptionGroup)options.getOptionGroup();  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =(OptionGroup)options.getOptionGroup();	  OptionGroup    currentOption    =    option.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
249	[BUG]  [BUGGY]  List  <  String>  arguments  =  options.getArguments(options.getArguments());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  List  <  String>  arguments  =  options.getArguments(options.getArguments());  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	List  <  String>  arguments  =  options.getArguments(options.getArguments());	  List    <    String>    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
250	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  block);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  block);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  block);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
251	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  null);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	Option  currentOption  =  options.getRequiredOption(cmd,  expectedOpts,  null);	  Option    currentOption    =    options.getRequiredOption(cmd,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
252	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	if(options.getRequiredOptions()!=  null)  {  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(false);  }	  ArrayList    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(false);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
253	[BUG]  [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	ArrayList  <  String>  arguments  =  new  ArrayList(options.getRequiredOptions());  expectedOpts.addAll(cmd);  }	  if(options.getRequiredOptions()!=    null)    {    List    <    String>    arguments    =    new    ArrayList(options.getRequiredOptions());    expectedOpts.addAll(cmd);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
254	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  this.cmd;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(),  this.cmd;  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(),  this.cmd;	  OptionGroup    currentOption    =    options.getOptionGroup(),    cmd;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
255	[BUG]  [BUGGY]  OptionGroup  currentOption  =  groups.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  groups.getOptionGroup(cmd);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  groups.getOptionGroup(cmd);	  OptionGroup    currentOption    =    cmd.getOptionGroup(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
256	[BUG]  [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();      [BUGGY]  OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  0);  [BUGGY]      if  (arguments  !=  null)  {  {  for  (String  argument  :  arguments)  {  handleToken(argument);  }  }  checkRequiredArgs();  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli37/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	116	117	1	replace	OptionGroup  currentOption  =  options.getOptionGroup(cmd,  group,  0);	  OptionGroup    currentOption    =    options.getOptionGroup(cmd,    group);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
