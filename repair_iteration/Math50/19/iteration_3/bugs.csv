bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
2	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
3	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
4	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
5	[BUG]  [BUGGY]  x0  =  x1  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  x1  +  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  x1  +  1;	  x0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
7	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
8	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
9	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
10	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(len    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
11	[BUG]  [BUGGY]  x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;	  x0    =    f0    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
12	[BUG]  [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  f0  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;	  x0    =    f0    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
13	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x1    +    f1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
14	[BUG]  [BUGGY]  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
15	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1  -  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1    -    FastMath.min(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
16	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
21	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
22	[BUG]  [BUGGY]  x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
23	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
24	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
25	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
26	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
27	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
28	[BUG]  [BUGGY]  x1  =  fx  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  /  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  /  1;	  x1    =    fx    -    1;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
29	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
30	[BUG]  [BUGGY]  x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)));	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
31	[BUG]  [BUGGY]  x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)),  atol);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1)),  atol);	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
32	[BUG]  [BUGGY]  x0  =  Math.min(x0,  f1,  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  Math.min(x0,  f1,  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  Math.min(x0,  f1,  atol);	  x0    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  x0  =  Math.max(x0,  f1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  Math.max(x0,  f1);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  Math.max(x0,  f1);	  x0    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
34	[BUG]  [BUGGY]  x1  =  Math.min(x1,  x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(x1,  x0);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(x1,  x0);	  x1    =    Math.min(x0,    x1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
35	[BUG]  [BUGGY]  x1  =  Math.max(x0,  x1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.max(x0,  x1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.max(x0,  x1);	  x1    =    Math.min(x0,    x1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
36	[BUG]  [BUGGY]  x1  =  Math.min(x1,  x1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(x1,  x1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(x1,  x1);	  x1    =    Math.min(x0,    x1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
37	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
38	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
39	[BUG]  [BUGGY]  f0  =  x;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  x;  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  x;  f1  =  fx;	  if(f0    ==    null)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
40	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
41	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  relativeAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(rtol  *  Math.abs(x1),  relativeAccuracy);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
42	[BUG]  [BUGGY]  x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  relativeAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.min(relativeAccuracy  *  Math.abs(x1),  relativeAccuracy);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
43	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
44	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
45	[BUG]  [BUGGY]  f0  =  fx;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  fx;  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  fx;  f1  =  fx;	  if(f0!=    null)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
46	[BUG]  [BUGGY]  f1  =  x;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f1  =  x;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f1  =  x;	  f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  f1  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f1  =  fx  +  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f1  =  fx  +  1;	  f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  f1  =  f0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f1  =  f0;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f1  =  f0;	  f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
50	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
51	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  if(FastMath.abs(f1)    <    =    f2)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
52	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  if(FastMath.abs(f1)    <    =    f2)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
53	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
54	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
55	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
56	[BUG]  [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *    Math.max(x0    +    x1    -    FastMath.max(LengthMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
57	[BUG]  [BUGGY]  x1  =  x0  +  Math.abs(x1)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.abs(x1)-  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.abs(x1)-  1;	  x1    =    x0    +    Math.abs(x1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
58	[BUG]  [BUGGY]  x1  =  x0  +  Math.abs(x1)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.abs(x1)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.abs(x1)+  1;	  x1    =    x0    +    Math.abs(x1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
59	[BUG]  [BUGGY]  x1  =  x0  +  Math.abs(rtol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.abs(rtol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.abs(rtol);	  x1    =    x0    +    Math.abs(x1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
60	[BUG]  [BUGGY]  x0  =  x2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  x2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  x2;	  x0    =    x1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  FALSE)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  FALSE)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  FALSE)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
62	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
63	[BUG]  [BUGGY]  f0  =  computeFunctionValue(x0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeFunctionValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeFunctionValue(x0);	  f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeObjectiveValue(x1);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeObjectiveValue(x1);	  f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  f0  =  computeLightValue(x0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeLightValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeLightValue(x0);	  f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
66	[BUG]  [BUGGY]  f0  =  computeLocalValue(x0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeLocalValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeLocalValue(x0);	  f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
67	[BUG]  [BUGGY]  x1  =  Math.min(x1,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(x1,  f1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(x1,  f1);	  x1    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  x1  =  Math.min(f1,  x0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(f1,  x0);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(f1,  x0);	  x1    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  x1  =  Math.min(max,  f1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(max,  f1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(max,  f1);	  x1    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  if(f0    >    max)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
71	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  x0  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  f1)  {  x0  =  x;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  f1)  {  x0  =  x;  f1  =  fx;  }	  if(f0    >    f1)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
72	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
73	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
74	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
75	[BUG]  [BUGGY]  x1  =  x1,  rtol  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x1,  rtol  +  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x1,  rtol  +  1;	  x1    =    rtol    +    1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
76	[BUG]  [BUGGY]  x1  =  fx  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  +  Math.max(relativeAccuracy  *  Math.abs(x1),  atol);	  x1    =    fx    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
77	[BUG]  [BUGGY]  x1  =  fx  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  +  Math.max(rtol  *  Math.abs(x1),  absoluteAccuracy);	  x1    =    fx    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
78	[BUG]  [BUGGY]  x1  =  x  +  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x  +  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x  +  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	  x1    =    fx    +    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
79	[BUG]  [BUGGY]  x0  =  x  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  x  +  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  x  +  2;	  x0    =    x    +    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
80	[BUG]  [BUGGY]  x0  =  x  +  3;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  x  +  3;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  x  +  3;	  x0    =    x    +    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
81	[BUG]  [BUGGY]  f0  =  x;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  x;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  x;	  f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
82	[BUG]  [BUGGY]  f0  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  fx  +  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  fx  +  1;	  f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
83	[BUG]  [BUGGY]  f0  =  fx  -  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  fx  -  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  fx  -  1;	  f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
84	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
85	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
86	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f1  =  fx;	  x0    =    0.5    *    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  f1  =  fx;	  x0    =    0.5    *    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
89	[BUG]  [BUGGY]  x1  =  x0  +  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  2;	  x1    =    x0    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
90	[BUG]  [BUGGY]  x1  =  x0  +  3;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  3;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  3;	  x1    =    x0    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
91	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(x0  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
92	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
93	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
94	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
95	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
96	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
97	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
98	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)-  FastMath.min(max,  rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.min(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
99	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x1    +    f1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
100	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
101	[BUG]  [BUGGY]  x1  =  Math.max(x1,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.max(x1,  f1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.max(x1,  f1);	  x1    =    Math.max(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
102	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
105	[BUG]  [BUGGY]  x1  =  fx  +  1L;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  +  1L;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  +  1L;	  x1    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  x1  =  fx  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  +  2;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  +  2;	  x1    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(rtol,  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(rtol,  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(rtol,  atol);	  x1    =    x0    +    Math.max(x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
108	[BUG]  [BUGGY]  x1  =  x0  +  Math.min(x1,  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.min(x1,  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.min(x1,  atol);	  x1    =    x0    +    Math.max(x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
109	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(MaximumValueFactory.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(MaximumValueFactory.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(MaximumValueFactory.abs(x1),  atol);	  x1    =    x0    +    Math.max(x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
110	[BUG]  [BUGGY]  if(f0  <  =  fx)  {  x0  =  fx;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  fx)  {  x0  =  fx;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  fx)  {  x0  =  fx;  f1  =  fx;  }	  if(f0    >    fx)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
111	[BUG]  [BUGGY]  if(f0  >  fx)  {  x0  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  >  fx)  {  x0  =  x;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  >  fx)  {  x0  =  x;  f1  =  fx;  }	  if(f0    >    fx)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
112	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
113	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
114	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
116	[BUG]  [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
117	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
118	[BUG]  [BUGGY]  x0  =  Math.min(f0,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  Math.min(f0,  f1);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  Math.min(f0,  f1);	  x0    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  x0  =  Math.min(max,  f1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  Math.min(max,  f1);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  Math.min(max,  f1);	  x0    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    allowed)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute	  if(FastMath.abs(f1)    <    =    allowed)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
122	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    allowed)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
123	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowed)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    allowed)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
124	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  2;	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
125	[BUG]  [BUGGY]  f0  =  ftol;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  ftol;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  ftol;	  f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
126	[BUG]  [BUGGY]  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
127	[BUG]  [BUGGY]  f0  =  computeObjectiveValue;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeObjectiveValue;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeObjectiveValue;	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
128	[BUG]  [BUGGY]  if(f0!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
129	[BUG]  [BUGGY]  if(f0  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
130	[BUG]  [BUGGY]  x1  =  Math.min(f0,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(f0,  f1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(f0,  f1);	  x1    =    Math.min(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
131	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
133	[BUG]  [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
134	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1  -  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1    -    FastMath.min(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Invalid  starting  expression: "  +  f1.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  AssertionError  e  =  new  AssertionError( "Invalid  starting  expression: "  +  f1.getName());  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	AssertionError  e  =  new  AssertionError( "Invalid  starting  expression: "  +  f1.getName());	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
136	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
137	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
138	[BUG]  [BUGGY]  x1  =  x0  +  0.5;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  0.5;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  0.5;	  x1    =    x0    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
139	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
140	[BUG]  [BUGGY]  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
141	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
142	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
143	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.max(len    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
144	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
145	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
146	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
147	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
148	[BUG]  [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(len    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
149	[BUG]  [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(allowedSolution)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
150	[BUG]  [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
151	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
152	[BUG]  [BUGGY]  if(f0  >=  f1)  {  x0  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  >=  f1)  {  x0  =  x;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  >=  f1)  {  x0  =  x;  f1  =  fx;  }	  if(f0    >    f1)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
153	[BUG]  [BUGGY]  f0  =  computeFullValue(x0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeFullValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeFullValue(x0);	  f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
154	[BUG]  [BUGGY]  x1  =  max;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  max;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  max;	  x1    =    startValue;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
155	[BUG]  [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(len    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
156	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
157	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
158	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
159	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
160	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  x1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
161	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
162	[BUG]  [BUGGY]  if(f1!=  null)  {  x0  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  null)  {  x0  =  x;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f1!=  null)  {  x0  =  x;  f1  =  fx;  }	  if(f0!=    null)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
163	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
164	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
165	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
166	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
167	[BUG]  [BUGGY]  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
168	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)-  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
169	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  x1)-  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  x1)-  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  x1)-  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
170	[BUG]  [BUGGY]  x1  =  startValue  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  startValue  +  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  startValue  +  1;	  x1    =    rtol    +    1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
171	[BUG]  [BUGGY]  x1  =  f0  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  f0  +  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  f0  +  1;	  x1    =    rtol    +    1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
172	[BUG]  [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.abs(x1),  atol);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.abs(x1),  atol);	  x1    =    0.5    *    Math.max(x0    +    x1    -    FastMath.max(LengthMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
173	[BUG]  [BUGGY]  x1  =  Math.min(x0,  x1)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.min(x0,  x1)-  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.min(x0,  x1)-  1;	  x1    =    Math.min(x0,    x1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
174	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  x1    =    0.5    *(x0    +    x1)-    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
175	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
176	[BUG]  [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f1!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
177	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    >=    null)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
178	[BUG]  [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  f0  *(x1  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol);	  x0    =    f0    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
179	[BUG]  [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(allowedSolution)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
180	[BUG]  [BUGGY]  f0  =  0.5  *(x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *(x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *(x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
181	[BUG]  [BUGGY]  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
182	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
183	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(FastMath.abs(x1),  atol);	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
184	[BUG]  [BUGGY]  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
185	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
186	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
187	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
188	[BUG]  [BUGGY]  if(f0  >=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  >=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  >=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >    max)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
189	[BUG]  [BUGGY]  if(f0!=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >    max)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
190	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(rtol  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.min(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
191	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  x1;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  x1;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  x1;  f1  =  fx;  }	  if(f0    ==    null)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
192	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  x1    =    0.5    *(x0    +    x1    -    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
193	[BUG]  [BUGGY]  f0  =  0.5  *  fx;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  fx;	  x0    =    0.5    *    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
194	[BUG]  [BUGGY]  x0  =  0.5  *  f1;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  f1;  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  f1;  f1  =  fx;	  x0    =    0.5    *    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
195	[BUG]  [BUGGY]  if(f0  ==  null)  {  f0  =  fx;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  f0  =  fx;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  f0  =  fx;  f1  =  fx;  }	  if(f0    ==    null)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
196	[BUG]  [BUGGY]  x1  =  0.5  *  fx  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  fx  +  1;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  fx  +  1;	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
197	[BUG]  [BUGGY]  x1  =  0.5  *  f0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  f0;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  f0;	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
198	[BUG]  [BUGGY]  x1  =  0.5  *  fx0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  fx0;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  fx0;	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
199	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x2),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x2),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x2),  atol));	  x1    =    0.5    *(x0    +    x1    -    FastMath.max(super.rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
200	[BUG]  [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
201	[BUG]  [BUGGY]  if(f0!=  null)  {  f0  =  fx;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  f0  =  fx;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  f0  =  fx;  f1  =  fx;  }	  if(f0!=    null)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
202	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
203	[BUG]  [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  Math.max(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  x1    =    0.5    *    Math.max(x0    +    x1    -    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
204	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
205	[BUG]  [BUGGY]  x1  =  x0  +  Math.min(x1,  x1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.min(x1,  x1);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.min(x1,  x1);	  x1    =    x0    +    Math.abs(x1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
206	[BUG]  [BUGGY]  x1  =  Math.max(f1,  x0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.max(f1,  x0);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.max(f1,  x0);	  x1    =    Math.max(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
207	[BUG]  [BUGGY]  x1  =  Math.max(f0,  f1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  Math.max(f0,  f1);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  Math.max(f0,  f1);	  x1    =    Math.max(x0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
208	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  2;	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(len    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
209	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)/  1;	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(len    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
210	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Invalid  start  of  expression: "  +  fx);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  AssertionError  e  =  new  AssertionError( "Invalid  start  of  expression: "  +  fx);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	AssertionError  e  =  new  AssertionError( "Invalid  start  of  expression: "  +  fx);	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
211	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5;  f1  =  fx;  }	  x0    =    0.5;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
212	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  0.5;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  0.5;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  0.5;  f1  =  fx;  }	  x0    =    0.5;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
213	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
214	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
215	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
216	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x1  +  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
217	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
218	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(f0  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
219	[BUG]  [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f1!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
220	[BUG]  [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
221	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
222	[BUG]  [BUGGY]  x0  =  fx  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  fx  +  2;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  fx  +  2;	  x0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
223	[BUG]  [BUGGY]  x0  =  fx  +  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  fx  +  3;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  fx  +  3;	  x0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
224	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	  x1    =    x0    +    Math.max(relativeAccuracy    *    Math.abs(x1),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
225	[BUG]  [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(f0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)+  1;	  x0    =    f0    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
226	[BUG]  [BUGGY]  x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  f0  *(x0  +  f1)/  FastMath.max(rtol  *  FastMath.abs(x1),  atol)/  1;	  x0    =    f0    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
227	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
228	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  compute	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
230	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
231	[BUG]  [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(allowedSolution)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
232	[BUG]  [BUGGY]  x1  =  fx  -  1L;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  fx  -  1L;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  fx  -  1L;	  x1    =    fx    -    1;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
233	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
234	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
235	[BUG]  [BUGGY]  if(f0  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
236	[BUG]  [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  f0  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  f0  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    f0    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
237	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)/  FastMath.max(len  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.max(len    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
238	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
239	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
240	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
241	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
242	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
243	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
244	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
245	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
246	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x1  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x1    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
247	[BUG]  [BUGGY]  x1  =  inverted;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  inverted;  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  inverted;	  x1    =    startValue;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
248	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
249	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
250	[BUG]  [BUGGY]  x0  =  0.5  *  fx;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  fx;	  x0    =    0.5;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
251	[BUG]  [BUGGY]  x0  =  0.5  *  Math.min(x0,  f1);  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  Math.min(x0,  f1);  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  Math.min(x0,  f1);  f1  =  fx;	  x0    =    0.5;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
252	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
253	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
254	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    f1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
255	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  x1;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  x1;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  x1;  f1  =  fx;  }	  if(f0!=    null)    {    x0    =    x;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
256	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    f1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
257	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x1    +    x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValu    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
258	[BUG]  [BUGGY]  if(f0  <  =  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  max)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    >    max)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
259	[BUG]  [BUGGY]  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f1  =  ftol;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f1  =  ftol;	  f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
260	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
261	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
262	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  if(f0!=    null)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
263	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
264	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
265	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
266	[BUG]  [BUGGY]  if(f0!=  null)  {  x0  =  f0;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0!=  null)  {  x0  =  f0;  f1  =  fx;  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0!=  null)  {  x0  =  f0;  f1  =  fx;  }	  if(f0!=    null)    {    x0    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
267	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
268	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveVal	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
269	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObject	  if(FastMath.abs(f1)    <    =    ftol)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveVal    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
270	[BUG]  [BUGGY]  x0  =  0.5  *  fx  +  1;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  fx  +  1;  f1  =  fx;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  fx  +  1;  f1  =  fx;	  x0    =    0.5    *    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
271	[BUG]  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);	  x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
272	[BUG]  [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.max(relativeAccuracy  *  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.max(relativeAccuracy  *  atol);	  x1    =    x0    +    Math.max(x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
273	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
274	[BUG]  [BUGGY]  x1  =  0.5  *  fx  +(inverted?  1  :  0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *  fx  +(inverted?  1  :  0);  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *  fx  +(inverted?  1  :  0);	  x1    =    0.5    *    fx;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
275	[BUG]  [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]      f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  0.5  *(x0  +  x1)-  FastMath.min(max(x0  *  FastMath.abs(x1),  atol));	  x1    =    0.5    *(x0    +    x1)-    FastMath.min(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
276	[BUG]  [BUGGY]  if(f0  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  allowedSolution)  {  x0  =  0.5  *  (x1  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(allowed)    {    x0    =    0.5    *    (x1    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
277	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
278	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(f0  <  =  f1)  {  x0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }	  if(f0    <    =    allowedSolution)    {    x0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
279	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  f2)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(FastMath.abs(f1)  <  =  f2)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	if(FastMath.abs(f1)  <  =  f2)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  f0  =  computeObjectiveValu	  if(FastMath.abs(f1)    <    =    f2)    {    x0    =    0.5    *    (x0    +    x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    f0    =    computeObjectiveValue(x0);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
280	[BUG]  [BUGGY]  x1  =  x0  +  Math.abs(x1)/;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x1  =  x0  +  Math.abs(x1)/;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x1  =  x0  +  Math.abs(x1)/;	  x1    =    x0    +    Math.abs(x1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
281	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  x0    =    0.5    *(x0    +    x1)-    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
282	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;  [BUGGY]      x1  =  x;  f1  =  fx;    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	198	198	1	replace	x0  =  0.5  *(x0  +  f1)/  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol)+  1;	  x0    =    0.5    *(x0    +    f1)/    FastMath.max(rtol    *    FastMath.abs(x1),    atol)+    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
