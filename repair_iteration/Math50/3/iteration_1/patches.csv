bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  ?  x1  :  x0;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  x1  :  x0;	      inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  inverted?  x1  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  inverted?  x1  :  x1,  atol;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x1  :  x1,  atol;	      inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  inverted?  x0  :  x0;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x0;	      inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  inverted?  x0  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  inverted?  x0  :  x1,  atol);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x1,  atol);	      inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x0  :  x0;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x1;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x0  :  x1;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  return  inverted?  x1,  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x1,  x0  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1,  x0  :  x0;	  return    inverted?    x1,    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x0  :  x1,  atol);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1,  atol);	      return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x0  :  x1,  atol;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1,  atol;	      return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  if(f1  >=  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  if(f1  >=  0)  {  return  x0;  }  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f1  >=  0)  {  return  x0;  }	      if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  if(f1  ==  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  if(f1  ==  0)  {  return  x0;  }  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f1  ==  0)  {  return  x0;  }	      if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  if(f1!=  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  if(f1!=  0)  {  return  x0;  }  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f1!=  0)  {  return  x0;  }	      if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f1  <  =  0)?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  return  inverted?  x1  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x1  :  x1,  atol;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x1,  atol;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  return  f1?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  f1?  x0  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f1?  x0  :  x0;	  return    f1?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  return  f0?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  f0?  x0  :  x1;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f0?  x0  :  x1;	  return    f1?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  return  inverted?  x0  :  x2;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x0  :  x2;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x2;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  return  inverted?  f1  :  x0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  f1  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  f1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  return  inverted?  x0  :  x3;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  x0  :  x3;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x3;	      return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  inverted?  f1  :  x0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  inverted?  f1  :  x0;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  f1  :  x0;	      inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  f1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  f1  :  x0;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	f1  :  x0;	      inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  return  inverted?  f0  :  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  inverted?  f0  :  x1;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  f0  :  x1;	  return    f1?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);  break;  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);  break;	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  return  (f1  <  =  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  (f1  <  =  0)?  x0  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  =  0)?  x0  :  x0;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);	      x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
35	[BUG]  [BUGGY]  if(x0  <  =  0)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  if(x0  <  =  0)  {  return  f1;  }  [BUGGY]    return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(x0  <  =  0)  {  return  f1;  }	      if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  return  (f1  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  (f1  <  =  0)?  x1  :  x0;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  =  0)?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  return  (f1  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:    [BUGGY]  return  (f1  <  =  0)?  x0  :  x1;  [BUGGY]    case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  =  0)?  x0  :  x1;	  return    f1?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
