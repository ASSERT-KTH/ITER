bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x0  :  x1;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1;	return  x1;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x0;	return  x1;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  return  inverted?  x1,  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x1,  x0  :  x1;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1,  x0  :  x1;	return  x1;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  return  f1?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  f1?  x0  :  x1;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f1?  x0  :  x1;	return  x1;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	  	return  x1;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]    inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    inverted?  x0  :  x1;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    inverted?  x0  :  x1;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]    return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return  inverted?  x0  :  x0;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return  inverted?  x0  :  x0;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
8	[BUG]  [BUGGY]    inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    inverted?  x1  :  x0;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    inverted?  x1  :  x0;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]    if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    if(f1  <  =  0)  {  return  x0;  }  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    if(f1  <  =  0)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]    return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return  inverted?  x0  :  x;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return  inverted?  x0  :  x;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
12	[BUG]  [BUGGY]    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
