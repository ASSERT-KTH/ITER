bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol  +  1);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol  +  1);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  return  inverted?  x1  :  x0,  atol;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  x0,  atol;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x0,  atol;	  return    inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
8	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
9	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy  +  1);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
10	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy  +  1);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy  +  1);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
11	[BUG]  [BUGGY]  return  inverted?  x1,  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1,  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1,  x1  :  x0;	  return    inverted?    x1,    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x0  :  x1,  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1,  x0;	  return    inverted?    x1,    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  return  (f1  >=  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  >=  0)?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  >=  0)?  x0  :  x0;	  return    (f1    <    =    0)?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
14	[BUG]  [BUGGY]  return  (f1  <  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  <  0)?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  0)?  x0  :  x0;	  return    (f1    <    =    0)?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
15	[BUG]  [BUGGY]  return  (f1  ==  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  ==  0)?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  ==  0)?  x0  :  x0;	  return    (f1    <    =    0)?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
16	[BUG]  [BUGGY]  f1  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  f1  :  x1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	f1  :  x1;	  f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
17	[BUG]  [BUGGY]  f1  :  f1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  f1  :  f1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	f1  :  f1;	  f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  f1  :  x0  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  f1  :  x0  +  1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	f1  :  x0  +  1;	  f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
19	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;	  x0    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;	  x0    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  x0  =  Math.min(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  x0    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  return  inverted?  x0  :  f1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x0  :  f1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  f1;	  return    inverted?    f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
23	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    relativeAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
24	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    relativeAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
25	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol,  absoluteAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  atol  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x0  :  x1,  atol  +  1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1,  atol  +  1;	  return    inverted?    x0    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  break;	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  inverted?  x0  :  f1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  f1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  f1;	  inverted?    f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
34	[BUG]  [BUGGY]  ?  f1  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  f1  :  x0;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  f1  :  x0;	  inverted?    f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
35	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  case  ANY_SIDE:  return  inverted?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x1  :  x0;	  case    ANY_SIDE:    return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x2;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x0  :  x2;	  case    ANY_SIDE:    return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  return  inverted?  x1  :  x0,  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  x0,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x0,  atol);	  return    inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
38	[BUG]  [BUGGY]  return  inverted?  x1  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  x1,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x1,  atol);	  return    inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  inverted?  x0  :  x1,  atol,  allowed);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  x1,  atol,  allowed);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x1,  atol,  allowed);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  inverted?  x0  :  x1,  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  x1,  atol  +  1);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x1,  atol  +  1);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  inverted?  x1  :  x0,  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x1  :  x0,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x1  :  x0,  atol);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  inverted?  x1  :  x0,  atol;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x1  :  x0,  atol;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x1  :  x0,  atol;	  inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  inverted?  x0  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  x1,  atol;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x1,  atol;	  inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  inverted?  x1  :  x1,  atol  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x1  :  x1,  atol  +  1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x1  :  x1,  atol  +  1;	  inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  inverted?  x0  :  x2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  x2;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x2;	  inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x1,  atol);  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x0  :  x1,  atol);	  case    ANY_SIDE:    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  return  inverted?  f0  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  f0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  f0  :  x0;	  return    inverted?    f0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
48	[BUG]  [BUGGY]  return  inverted?  x1  :  f0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  f0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  f0;	  return    inverted?    f0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
49	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  return  inverted?  x1  :  x2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  x2;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x2;	  return    inverted?    x0    :    x2;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
53	[BUG]  [BUGGY]  ?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  x0  :  x1;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  x0  :  x1;	  ?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  ?  x1  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  x1  :  x1,  atol;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  x1  :  x1,  atol;	  ?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  return  f1  >=  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  f1  >=  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f1  >=  0)?  x1  :  x0;	  return    f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  if(f1  >  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(f1  >  0)  {  return  x0;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f1  >  0)  {  return  x0;  }	  if(f1    ==    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
57	[BUG]  [BUGGY]  if(x0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(x0  <  =  0)  {  return  x1;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(x0  <  =  0)  {  return  x1;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
58	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f0  <  =  0)  {  return  x0;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
59	[BUG]  [BUGGY]  if(x0  ==  0)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(x0  ==  0)  {  return  f1;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(x0  ==  0)  {  return  f1;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
60	[BUG]  [BUGGY]  return  f0?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  f0?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f0?  x0  :  x0;	  return    f0?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  return  (f1  >=  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  >=  0)?  x0  :  x1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  >=  0)?  x0  :  x1;	  return    (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
62	[BUG]  [BUGGY]  return  (f1  ==  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  ==  0)?  x0  :  x1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  ==  0)?  x0  :  x1;	  return    (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
63	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy,  allowed);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy,  allowed);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy,  allowed);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(rtol  *  FastMath.abs(x1,  atol),  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  return  (f1  >=  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  >=  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  >=  0)?  x1  :  x0;	  return    (f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
67	[BUG]  [BUGGY]  return  (f1  ==  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  ==  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  ==  0)?  x1  :  x0;	  return    (f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
68	[BUG]  [BUGGY]  return  (f1  <  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  <  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  0)?  x1  :  x0;	  return    (f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
69	[BUG]  [BUGGY]  return  (f0  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f0  <  =  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f0  <  =  0)?  x1  :  x0;	  return    (f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
70	[BUG]  [BUGGY]  return  (f1  <  =  0)?  x0  :  f1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  <  =  0)?  x0  :  f1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  =  0)?  x0  :  f1;	  return    (f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
71	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(f1  <  =  0)  {  return  f0;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f1  <  =  0)  {  return  f0;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
72	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(f0  <  =  0)  {  return  f1;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f0  <  =  0)  {  return  f1;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
73	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  return  f0?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  f0?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f0?  x1  :  x0;	  return    f0?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
75	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  return  inverted?  x1  :  x3;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x1  :  x3;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x3;	  return    inverted?    x0    :    x3;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
77	[BUG]  [BUGGY]  return  inverted?  x0  :  x2,  atol;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  inverted?  x0  :  x2,  atol;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x2,  atol;	  return    inverted?    x0    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  ?  x0  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  x0  :  x1,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  x0  :  x1,  atol);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  return  (f0  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f0  <  =  0)?  x0  :  x1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f0  <  =  0)?  x0  :  x1;	  return    (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
80	[BUG]  [BUGGY]  return  (f1  <  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f1  <  0)?  x0  :  x1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f1  <  0)?  x0  :  x1;	  return    (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
81	[BUG]  [BUGGY]  Case  ANY_SIDE:  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  Case  ANY_SIDE:  return  inverted?  x0  :  x1;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	Case  ANY_SIDE:  return  inverted?  x0  :  x1;	  case    ANY_SIDE:    return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  f1  :  f0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  f1  :  f0;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	f1  :  f0;	  f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
83	[BUG]  [BUGGY]  return  f1?  x1  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  f1?  x1  :  x1,  atol;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f1?  x1  :  x1,  atol;	  return    inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
84	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy,  atol);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy,    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
85	[BUG]  [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  1);  break;	  x0    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  ?  ANY_SIDE  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  ANY_SIDE  :  x0;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  ANY_SIDE  :  x0;	  ?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  ?  rtol  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  rtol  :  x0;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  rtol  :  x0;	  ?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  return  f0  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  f0  <  =  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  f0  <  =  0)?  x1  :  x0;	  return    f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
91	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  2);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy  +  2);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
92	[BUG]  [BUGGY]  ?  x1  :  x0,  atol;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  ?  x1  :  x0,  atol;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	?  x1  :  x0,  atol;	  inverted?    x1    :    x1,    atol;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
93	[BUG]  [BUGGY]  inverted?  f0  :  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  f0  :  x0;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  f0  :  x0;	  inverted?    f1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
94	[BUG]  [BUGGY]  if(f0!=  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(f0!=  0)  {  return  x0;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(f0!=  0)  {  return  x0;  }	  if(f1!=    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
95	[BUG]  [BUGGY]  Case  ANY_SIDE:  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  Case  ANY_SIDE:  return  inverted?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	Case  ANY_SIDE:  return  inverted?  x0  :  x0;	  case    ANY_SIDE:    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
97	[BUG]  [BUGGY]  return  x0  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  x0  <  =  0)?  x1  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  x0  <  =  0)?  x1  :  x0;	  return    f1    <    =    0)?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
98	[BUG]  [BUGGY]  inverted?  x0  :  x1,  atol,  allowedSolution);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x0  :  x1,  atol,  allowedSolution);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x0  :  x1,  atol,  allowedSolution);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  inverted?  x1  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  inverted?  x1  :  x1,  atol);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	inverted?  x1  :  x1,  atol);	  inverted?    x0    :    x1,    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  case  ANY_SIDE:  return  inverted?  x0  :  x;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	case  ANY_SIDE:  return  inverted?  x0  :  x;	  case    ANY_SIDE:    return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  if(x0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(x0  <  =  0)  {  return  x0;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(x0  <  =  0)  {  return  x0;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
102	[BUG]  [BUGGY]  if(x0  >=  0)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  if(x0  >=  0)  {  return  f1;  }  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	if(x0  >=  0)  {  return  f1;  }	  if(x0    <    =    0)    {    return    f1;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
103	[BUG]  [BUGGY]  x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(x1  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  x0    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  2,  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  2,  absoluteAccuracy);  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  2,  absoluteAccuracy);	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
106	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
107	[BUG]  [BUGGY]  return  (f0  <  =  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  return  (f0  <  =  0)?  x0  :  x0;  [BUGGY]      case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  (f0  <  =  0)?  x0  :  x0;	  return    (f1    <    =    0)?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
108	[BUG]  [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:      [BUGGY]  x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;  [BUGGY]      return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	x0  =  Math.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;	  x0    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
