bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  inverted  +  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  inverted  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  inverted  +  1)  {	  switch(method.getRelatedSolution(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  inverted,  allowedSolution)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  inverted,  allowedSolution)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  inverted,  allowedSolution)  {	  switch(method.getRelatedSolution(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
3	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(x0  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(x0  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(x0  *  FastMath.abs(fx)));	  f0    =    0.5    *(Factory.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(Factory.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));	  f0    =    0.5    *(Factory.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  fx)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  fx)  {	  switch(method.getRelatedSolution(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
13	[BUG]  [BUGGY]  switch(f0.getRelatedSolution(),  method)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0.getRelatedSolution(),  method)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0.getRelatedSolution(),  method)  {	  switch(method.getRelatedSolution(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
14	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(f0  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(f0  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(f0  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(f0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
15	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);  break;	  f0    =    f1    -    FastMath.max(f0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
16	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(f1    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
17	[BUG]  [BUGGY]  switch(method.getSolutionClass(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getSolutionClass(),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolutionClass(),  inverted)  {	  switch(method.getSolutionClass())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
18	[BUG]  [BUGGY]  switch(method.getRawSolutionClass())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawSolutionClass())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawSolutionClass())  {	  switch(method.getSolutionClass())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
19	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
22	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
23	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
24	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
25	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
26	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
27	[BUG]  [BUGGY]  switch(method.getAllowedSolutions(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getAllowedSolutions(),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions(),  inverted)  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
28	[BUG]  [BUGGY]  switch(method.getAllowedSolutions(),  allowedSolution)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getAllowedSolutions(),  allowedSolution)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions(),  allowedSolution)  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
29	[BUG]  [BUGGY]  switch(method.getAllowedSolutions(),  atol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getAllowedSolutions(),  atol)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions(),  atol)  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
30	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
32	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
33	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
34	[BUG]  [BUGGY]  f0  =  f1  *  FastMath.max(0.5  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  *  FastMath.max(0.5  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  *  FastMath.max(0.5  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
35	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
36	[BUG]  [BUGGY]  f0  =  f1  *  FastMath.max(f1  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  *  FastMath.max(f1  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  *  FastMath.max(f1  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
37	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
38	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
39	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
40	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
41	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.min(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
42	[BUG]  [BUGGY]  f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
43	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY),  inverted)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY),  inverted)  {	  switch(method.getRelativeAccuracy(),    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
44	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
45	[BUG]  [BUGGY]  switch(f1.getMask(),  method)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1.getMask(),  method)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1.getMask(),  method)  {	  switch(method.getMask(),    f1)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
46	[BUG]  [BUGGY]  switch(method.getMask(),  fx)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getMask(),  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  fx)  {	  switch(method.getMask(),    f1)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
47	[BUG]  [BUGGY]  switch(f1.getMask(),  method.getMask())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1.getMask(),  method.getMask())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1.getMask(),  method.getMask())  {	  switch(method.getMask(),    f1)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
48	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
49	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  allowedSolution),  inverted)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  allowedSolution),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  allowedSolution),  inverted)  {	  switch(method.getRelatedSolution(),    allowedSolution)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
50	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    inverted);    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
51	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(rtol  *  FastMath.abs(fx),  f1);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(rtol  *  FastMath.abs(fx),  f1);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(rtol  *  FastMath.abs(fx),  f1);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    inverted);    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
52	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(inverted  *  FastMath.abs(fx),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(inverted  *  FastMath.abs(fx),  rtol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(inverted  *  FastMath.abs(fx),  rtol);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    inverted);    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
53	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0  +  1));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
54	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
55	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(rtol  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(rtol  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(rtol  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
56	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol  +  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
57	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(fastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
58	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(fastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
59	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol,  inverted);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol,  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol,  inverted);	  Method    rtol    =    FastMath.max(fastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
60	[BUG]  [BUGGY]  f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(fx    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(fx  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(fx  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(fx  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(fx    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  switch(method.getRawClass(),  fx)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  fx)  {	  switch(method.getRawClass(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
63	[BUG]  [BUGGY]  switch(f0.getRawClass(),  method)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0.getRawClass(),  method)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0.getRawClass(),  method)  {	  switch(method.getRawClass(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
64	[BUG]  [BUGGY]  switch(f0.getRawClass())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0.getRawClass())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0.getRawClass())  {	  switch(method.getRawClass(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
65	[BUG]  [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
66	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
67	[BUG]  [BUGGY]  switch(method.getMask(),  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getMask(),  0)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  0)  {	  switch(method.getMask(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
68	[BUG]  [BUGGY]  switch(f0  *  fx)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0  *  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0  *  fx)  {	  switch(f1    *    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
69	[BUG]  [BUGGY]  switch(f1  /  fx)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1  /  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1  /  fx)  {	  switch(f1    *    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
70	[BUG]  [BUGGY]  switch(f1  *  fx  +  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1  *  fx  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1  *  fx  +  1)  {	  switch(f1    *    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
71	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(super.rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
72	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(rtol  -  FastMath.max(FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
76	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
77	[BUG]  [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
78	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);  break;	  f0    =    0.5    *    f1    -    FastMath.max(FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
81	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(f0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f1  *  FastMath.abs(f0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(f0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(f0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(f0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(f0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
86	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x1)));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x1)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x1)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x0));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
88	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(atol  *  FastMath.abs(x1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(f1));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(f1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(atol  *  FastMath.abs(f1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(atol));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
92	[BUG]  [BUGGY]  f0  =  0.5  *(len  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(len  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(len  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(len    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
93	[BUG]  [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(rtol  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(len    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
94	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
95	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
96	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
97	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
98	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.min(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.min(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
99	[BUG]  [BUGGY]  f0  =  0.5  *  (fastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (fastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (fastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
100	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *(FastMath.max(x0    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
101	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.min(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.min(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.min(rtol  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(FastMath.max(x0    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
102	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(rtol  *  FastMath.abs(f1),  atol));	  f0    =    0.5    *(FastMath.max(x0    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
103	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
104	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
105	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
106	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(f1  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
107	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
108	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
109	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
110	[BUG]  [BUGGY]  switch(f1.getMask())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1.getMask())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1.getMask())  {	  switch(method.getMask()    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
111	[BUG]  [BUGGY]  switch(f0.getMask())  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0.getMask())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0.getMask())  {	  switch(method.getMask()    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
112	[BUG]  [BUGGY]  switch(method.getRawClass(),  inverted  +  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  inverted  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  inverted  +  1)  {	  switch(method.getRawClass(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
113	[BUG]  [BUGGY]  switch(f1.getRawClass(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1.getRawClass(),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1.getRawClass(),  inverted)  {	  switch(method.getRawClass(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
114	[BUG]  [BUGGY]  switch(method.getRawClass(),  inverted,  false)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  inverted,  false)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  inverted,  false)  {	  switch(method.getRawClass(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
115	[BUG]  [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
116	[BUG]  [BUGGY]  f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
117	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(x0  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(x0  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(x0  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
118	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(inverted    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
119	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1,  atol));  break;	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(super.rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted));	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
121	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
122	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
123	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.abs(f1),  atol);	  f0    =    0.5    *    (rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
124	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  *  FastMath.abs(rtol),  atol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  *  FastMath.abs(rtol),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  *  FastMath.abs(rtol),  atol);	  f0    =    0.5    *    (rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
125	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  inverted  +  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  inverted  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  inverted  +  1)  {	  switch(method.getRelativeAccuracy(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
126	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  double)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  double)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  double)  {	  switch(method.getRelativeAccuracy(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
127	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  inverted,  atol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  inverted,  atol)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  inverted,  atol)  {	  switch(method.getRelativeAccuracy(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
128	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(rtol));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
129	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
130	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
131	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1));  break;	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
132	[BUG]  [BUGGY]  f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  /  FastMath.max(x0  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
134	[BUG]  [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (rtol  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
135	[BUG]  [BUGGY]  switch(f0  -  fx)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0  -  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0  -  fx)  {	  switch(f1    -    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
136	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
137	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx),  inverted);	  f0    =    f1    -    FastMath.max(FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
138	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx  +  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx  +  1));	  f0    =    f1    -    FastMath.max(FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
139	[BUG]  [BUGGY]  f0  =  inverted  -  FastMath.max(FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  inverted  -  FastMath.max(FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  inverted  -  FastMath.max(FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
140	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  inverted);  break;	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
141	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx  +  1));  break;	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
142	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol);  break;	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
143	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  absoluteAccuracy)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  absoluteAccuracy)  {	  switch(method.getRelativeAccuracy(),    relativeAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
144	[BUG]  [BUGGY]  switch(relativeAccuracy.getRelativeAccuracy(),  method)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(relativeAccuracy.getRelativeAccuracy(),  method)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(relativeAccuracy.getRelativeAccuracy(),  method)  {	  switch(method.getRelativeAccuracy(),    relativeAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
145	[BUG]  [BUGGY]  switch(f0.getMask(),  method)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f0.getMask(),  method)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0.getMask(),  method)  {	  switch(method.getMask(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
146	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
147	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
148	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
149	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
150	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
151	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
152	[BUG]  [BUGGY]  f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FactoryMath.max(f0  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
153	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  atol,  inverted)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  atol,  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  atol,  inverted)  {	  switch(method.getRelativeAccuracy(),    atol)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
154	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  fx)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  fx)  {	  switch(method.getRelativeAccuracy(),    atol)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
155	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));	  f0    =    0.5    *(x0    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
156	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx),  inverted);	  f0    =    f1    -    FastMath.max(f0    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
157	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(atol  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(atol  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(atol  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
158	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
159	[BUG]  [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
160	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
161	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  +  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  +  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  +  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
162	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(fx),  atol);	  f0    =    0.5    *    f1    -    FastMath.max(FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
163	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol,  inverted);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol,  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol,  inverted);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
164	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (Factory.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
165	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.min(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.min(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.min(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (Factory.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
166	[BUG]  [BUGGY]  switch(method.getSolution(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getSolution(),  inverted)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolution(),  inverted)  {	  switch(method.getSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
167	[BUG]  [BUGGY]  switch(method.getRawSolution())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawSolution())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawSolution())  {	  switch(method.getSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
168	[BUG]  [BUGGY]  switch(method.getSolution(),  atol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getSolution(),  atol)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolution(),  atol)  {	  switch(method.getSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
169	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  atol);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
170	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
171	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
172	[BUG]  [BUGGY]  f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(f1    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
173	[BUG]  [BUGGY]  f0  =  0.5  *(f0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(f1    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
174	[BUG]  [BUGGY]  switch(method.getMethod())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getMethod())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMethod())  {	  switch(method.getMask()    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
175	[BUG]  [BUGGY]  switch(method.getFunctionValue())  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getFunctionValue())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getFunctionValue())  {	  switch(method.getMask()    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
176	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(f0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(f0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
177	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
178	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.abs(f1),  atol);	  f0    =    0.5    *    (rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
179	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
180	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
181	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
182	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
183	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(f0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(f0),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(f0),  atol);	  Method    rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
184	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
185	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
186	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
187	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  f0  +  fx)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  f0  +  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  f0  +  fx)  {	  switch(method.getRelatedSolution(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
188	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(f1  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
189	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    inverted);    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
190	[BUG]  [BUGGY]  switch(method.getRawClass(),  f1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  f1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  f1)  {	  switch(method.getRawClass(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
191	[BUG]  [BUGGY]  switch(method.getRawClass(),  f0  +  fx)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  f0  +  fx)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  f0  +  fx)  {	  switch(method.getRawClass(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
192	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
193	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(FastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
194	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(fastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(fastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(fastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
195	[BUG]  [BUGGY]  f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(f1    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
196	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  f0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  f0)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  f0)  {	  switch(method.getRelativeAccuracy(),    atol)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
197	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  f1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  f1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  f1)  {	  switch(method.getRelativeAccuracy(),    atol)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
198	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  0)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  0)  {	  switch(method.getRelativeAccuracy(),    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
199	[BUG]  [BUGGY]  switch(method.getSolutions())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getSolutions())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolutions())  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
200	[BUG]  [BUGGY]  switch(method.getRelatedSolutions())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolutions())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolutions())  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
201	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
202	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
203	[BUG]  [BUGGY]  switch(method.getRawClass(),  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  0)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  0)  {	  switch(method.getRawClass(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
204	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(atol));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
205	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx)+  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx)+  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx)+  1);	  f0    =    f1    -    FastMath.max(FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
206	[BUG]  [BUGGY]  f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(f1    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
207	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
208	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
209	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(len  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(len  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(len  *  FastMath.abs(fx)));	  f0    =    0.5    *(Factory.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
210	[BUG]  [BUGGY]  f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
211	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  break;	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
212	[BUG]  [BUGGY]  f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
213	[BUG]  [BUGGY]  f0  =  0.5  *(inverted  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(inverted  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(inverted  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
214	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx),  atol));  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
215	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
216	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.max(lon  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.max(lon  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.max(lon  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (Factory.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
217	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
218	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx)+  1);  break;	  f0    =    f1    -    FastMath.max(0.5    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
219	[BUG]  [BUGGY]  f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  *  FastMath.max(fx  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
220	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
221	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
222	[BUG]  [BUGGY]  f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FactoryMath.max(f1  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(f1    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
223	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx),  inverted);	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
224	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx  +  1)));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx  +  1)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx  +  1)));	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
225	[BUG]  [BUGGY]  switch(method.getMask(),  0.5)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getMask(),  0.5)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  0.5)  {	  switch(method.getMask(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
226	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1),  atol);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
227	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(rtol  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
228	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  0)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  0)  {	  switch(method.getRelatedSolution(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
229	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx),  atol);  break;	  f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
230	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  f1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  f1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  f1)  {	  switch(method.getRelatedSolution(),    allowedSolution)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
231	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(len  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(len    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
232	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
233	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(0.5  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(0.5  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(0.5  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(inverted    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
234	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
235	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(f0  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
236	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
237	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
238	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(f1),  atol);	  Method    rtol    =    FastMath.max(fastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
239	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
240	[BUG]  [BUGGY]  switch(method.getAllowedSolutions(),  false)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getAllowedSolutions(),  false)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions(),  false)  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
241	[BUG]  [BUGGY]  switch(method.getAllowedSolutions(),  f1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getAllowedSolutions(),  f1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions(),  f1)  {	  switch(method.getAllowedSolutions())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
242	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  fx  +  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  fx  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  fx  +  1)  {	  switch(method.getRelatedSolution(),    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
243	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx)/  2);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx)/  2);	  f0    =    f1    -    FastMath.max(FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
244	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  -  1));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  -  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  -  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
245	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(fx  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(fx  +  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(fx  +  1));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol    +    1));    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
246	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
247	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
248	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
249	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  +  fx));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  +  fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f0  +  fx));	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
250	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(Rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(Rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(Rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
251	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)+  1));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)+  1));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)+  1));	  f0    =    0.5    *(f1    -    FastMath.max(FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
252	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx  +  1)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(f0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
253	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
254	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
255	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;	  f0    =    0.5    *    f1    -    FastMath.max(FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
256	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ILLINOIS)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ILLINOIS)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  DEFAULT_ILLINOIS)  {	  switch(method.getRelativeAccuracy(),    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
257	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1));  break;	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
258	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted);  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted);  break;	  f0    =    f1    -    FastMath.max(f1    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
259	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(f1    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
260	[BUG]  [BUGGY]  f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (inverted  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (f1    -    FastMath.max(x0    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
261	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted);	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
262	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
263	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  DEFAULT_ABSOLUTE_ACCURACY)  {	  switch(method.getRelatedSolution(),    allowedSolution)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
264	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(f0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(f0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(f0));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
265	[BUG]  [BUGGY]  switch(method.getLocale())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getLocale())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getLocale())  {	  switch(method.getSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
266	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
267	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
268	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
269	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(strTol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(strTol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(strTol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
270	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol);	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
271	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
272	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  inverted,  doubleValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelatedSolution(),  inverted,  doubleValueAccuracy)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  inverted,  doubleValueAccuracy)  {	  switch(method.getRelatedSolution(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
273	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *    (x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
274	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol));  break;	  f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
275	[BUG]  [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  -  FastMath.max(f1  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(x0    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
276	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x0  +  inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  inverted  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *(x0    +    f1    -    FastMath.max(inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
277	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx  +  1)));	  f0    =    0.5    *(f1    -    FastMath.max(f1    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
278	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx),  inverted));	  f0    =    0.5    *(f1    -    FastMath.max(f1    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
279	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(len  *  FastMath.abs(fx));	  f0    =    f1    -    FastMath.max(fx    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
280	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(x0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
281	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
282	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.max(lon  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (FastMath.max(lon  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.max(lon  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
283	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
284	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx),  inverted));	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
285	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  x)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRelativeAccuracy(),  x)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  x)  {	  switch(method.getRelativeAccuracy(),    atol)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
286	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
287	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(f1    -    FastMath.max(x0    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
288	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(relativeAccuracy  *  FastMath.abs(f1),  atol));  break;	  f0    =    0.5    *(FastMath.max(x0    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
289	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(atol  *  FastMath.abs(fx));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(atol  *  FastMath.abs(fx));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(atol));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
290	[BUG]  [BUGGY]  switch(method.getLeastSuperclass())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getLeastSuperclass())  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getLeastSuperclass())  {	  switch(method.getSolutionClass())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
291	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (Factory.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  f0    =    0.5    *    (Factory.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
292	[BUG]  [BUGGY]  switch(f1  -  fx  +  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(f1  -  fx  +  1)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1  -  fx  +  1)  {	  switch(f1    -    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
293	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x0));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x0));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x0));	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
294	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;	  f0    =    0.5    *(x1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
295	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(fx),  atol);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
296	[BUG]  [BUGGY]  switch(method.getRawClass(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  switch(method.getRawClass(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  DEFAULT_ABSOLUTE_ACCURACY)  {	  switch(method.getRawClass(),    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
297	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx));  break;  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx));  break;	  f0    =    f1    -    FastMath.max(f0    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
298	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(FastMath.abs(x1),  atol));	  f0    =    0.5    *    (x0    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
299	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {      [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(inverted    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
