bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  illegal  start  of  expression	34	None	add
2	[BUG]  [BUGGY]    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *(x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
3	[BUG]  [BUGGY]    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);		non-compiled	[CE]  illegal  start  of  expression	34	None	add
4	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]  switch(method.getRelativeAccuracy())  {  [BUGGY]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy())  {	switch  (method)  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  switch(f1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]  switch(f1)  {  [BUGGY]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1)  {	switch  (method)  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  switch(method.getRelatedSolution())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]  switch(method.getRelatedSolution())  {  [BUGGY]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution())  {	switch  (method)  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol));  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol));  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol));		non-compiled	[CE]  illegal  start  of  expression	34	None	add
8	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  illegal  start  of  expression	34	None	add
9	[BUG]  [BUGGY]    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
10	[BUG]  [BUGGY]    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
11	[BUG]  [BUGGY]    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  illegal  start  of  expression	34	None	add
12	[BUG]  [BUGGY]    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));		non-compiled	[CE]  illegal  start  of  expression	34	None	add
13	[BUG]  [BUGGY]    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx));  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
14	[BUG]  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
15	[BUG]  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;		non-compiled	[CE]  illegal  start  of  expression	34	None	add
16	[BUG]  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  [BUGGY]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	    f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx)));		non-compiled	[CE]  illegal  start  of  expression	34	None	add
17	[BUG]  [BUGGY]  switch(method.getRawClass())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]  switch(method.getRawClass())  {  [BUGGY]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass())  {	switch  (method)  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
18	[BUG]  [BUGGY]  switch(method.getMask())  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  [BUGGY]  switch(method.getMask())  {  [BUGGY]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask())  {	switch  (method)  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
