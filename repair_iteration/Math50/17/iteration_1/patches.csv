bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0));	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1));	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(atol));	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(f0));	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(fx  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(fx  *  FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(fx  *  FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx)));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(Factory.max(rtol  *  FastMath.abs(fx)));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
16	[BUG]  [BUGGY]  switch(method.getRawClass(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRawClass(),  inverted)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  inverted)  {	  switch(method.getRawClass())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  switch(method.getRawClass(),  f0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRawClass(),  f0)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRawClass(),  f0)  {	  switch(method.getRawClass())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(fx)));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(fx)));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelatedSolution(),  inverted)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  inverted)  {	  switch(method.getRelatedSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  allowedSolution)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelatedSolution(),  allowedSolution)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  allowedSolution)  {	  switch(method.getRelatedSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  atol)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelatedSolution(),  atol)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  atol)  {	  switch(method.getRelatedSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelativeAccuracy(),  inverted)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  inverted)  {	  switch(method.getRelativeAccuracy())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  atol)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelativeAccuracy(),  atol)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  atol)  {	  switch(method.getRelativeAccuracy())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  relativeAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelativeAccuracy(),  relativeAccuracy)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  relativeAccuracy)  {	  switch(method.getRelativeAccuracy())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  switch(f0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(f0)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f0)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  switch(f1  *  fx)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(f1  *  fx)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1  *  fx)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  switch(fx)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(fx)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(fx)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(inverted  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(len  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(super.rtol  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol);  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(x0  *  FastMath.abs(fx));  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  atol));  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  switch(method.getMask(),  inverted)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getMask(),  inverted)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  inverted)  {	  switch(method.getMask())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  switch(method.getMask(),  f0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getMask(),  f0)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  f0)  {	  switch(method.getMask())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  switch(method.getMask(),  f1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getMask(),  f1)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask(),  f1)  {	  switch(method.getMask())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
40	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  break;	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  f0  =  0.5  *  (FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (FastMath.max(x0  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (x0  +  f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  f0  =  0.5  *  (rtol  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (rtol  *  FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (rtol  *  FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x1  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  -  FastMath.max(rtol  *  FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(fastMath.abs(x1),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));  break;	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
63	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(0.5  *  FastMath.abs(fx));  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f0  *  FastMath.abs(fx));  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  switch(method.getSolution())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getSolution())  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolution())  {	  switch(method.getRawClass())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(len  *  FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  f0  =  0.5  *(FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(FastMath.max(x0  *  FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  switch(method.getRelatedSolution(),  f0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelatedSolution(),  f0)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelatedSolution(),  f0)  {	  switch(method.getRelatedSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  switch(f1  -  fx)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(f1  -  fx)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f1  -  fx)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  switch(f2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(f2)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(f2)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (f1  -  FastMath.max(x0  *  FastMath.abs(f1),  atol);  break;	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
75	[BUG]  [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  f1  -  FastMath.max(FastMath.abs(f1),  atol);  break;	      f0    =    0.5    *    f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
78	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(rtol  +  1));	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(rtol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
79	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f0  *  FastMath.abs(fx)));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(fx)));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
81	[BUG]  [BUGGY]  f0  =  0.5  *  (Factory.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *  (Factory.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *  (Factory.max(x0  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *    (f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
83	[BUG]  [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getRelativeAccuracy(),  DEFAULT_ABSOLUTE_ACCURACY)  {	  switch(method.getRelativeAccuracy())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(f1),  atol));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(FastMath.abs(f1),  atol));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(f1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);	      Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(rtol  *  FastMath.abs(fx),  inverted);  break;	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(f1  -  FastMath.max(f1  *  FastMath.abs(fx)));  break;	      f0    =    0.5    *(f1    -    FastMath.max(rtol    *    FastMath.abs(fx)));    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
89	[BUG]  [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  0.5  *(x0  +  f1  -  FastMath.max(f1  *  FastMath.abs(x1),  atol));	      f0    =    0.5    *(x0    +    f1    -    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));  [BUGGY]    switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	f0  =  f1  -  FastMath.max(f1  *  FastMath.abs(fx));	      f0    =    f1    -    FastMath.max(rtol    *    FastMath.abs(fx));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
91	[BUG]  [BUGGY]  switch(method.getSolutionClass())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getSolutionClass())  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getSolutionClass())  {	  switch(method.getRawClass())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  switch(method.getAllowedSolutions())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getAllowedSolutions())  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getAllowedSolutions())  {	  switch(method.getRelatedSolution())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
93	[BUG]  [BUGGY]  switch(method.getMask()  -  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {    [BUGGY]  switch(method.getMask()  -  1)  {  [BUGGY]    case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	178	178	1	replace	switch(method.getMask()  -  1)  {	  switch(method.getMask())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
