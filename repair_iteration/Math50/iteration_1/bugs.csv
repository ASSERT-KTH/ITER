bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);		non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,double,AllowedSolution)	8	None	add
2	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits();  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits();  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumFractionDigits();		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
3	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumSize();  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumSize();  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumSize();		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
4	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits(min,  startValue);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits(min,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumFractionDigits(min,  startValue);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
5	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits(min,  max);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFractionDigits(min,  max);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumFractionDigits(min,  max);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  x  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	  	final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  	non-compiled	[CE]  cannot  find  symbol  x	19	None	replace
22	[BUG]  [BUGGY]  final  boolean  inverted  =  false;  [CE]  cannot  assign  a  value  to  final  variable  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  final  boolean  inverted  =  false;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	final  boolean  inverted  =  false;	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverted	17	None	replace
23	[BUG]  [BUGGY]  final  boolean  inverted  =  true;  [CE]  cannot  assign  a  value  to  final  variable  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  final  boolean  inverted  =  true;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	final  boolean  inverted  =  true;	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverted	17	None	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	  	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  find  symbol  inverted	17	None	replace
31	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x0,  atol);  [CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0,  atol);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeObjectiveValue(x0,  atol);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;	3	None	replace
32	[BUG]  [BUGGY]  f0  =  computeRelativeAccuracy(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeRelativeAccuracy(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeRelativeAccuracy(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
35	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	add	  	f0  =  computeObjectiveValue(x0);  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	3	1
36	[BUG]  [BUGGY]    [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	  	f0  =  computeObjectiveValue(x0);  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	3	1	replace
42	[BUG]  [BUGGY]  final  double  ftol  =  getTotalFunctionValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getTotalFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getTotalFunctionValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
43	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	add	final  double  ftol  =  getAbsoluteAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	11	1
44	[BUG]  [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getAbsoluteAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	11	1	replace
44	[BUG]  [BUGGY]  final  double  ftol  =  getFullAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFullAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getFullAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  ftol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	  	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol  ftol	11	None	replace
51	[BUG]  [BUGGY]    atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	2	None	add
52	[BUG]  [BUGGY]    double  rtol  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    double  rtol  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    double  rtol  =  Math.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	2	None	add
53	[BUG]  [BUGGY]    double  rtol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    double  rtol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    double  rtol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	2	None	add
54	[BUG]  [BUGGY]    double  atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    double  atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    double  atol  =  Math.max(rtol  -  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	2	None	add
55	[BUG]  [BUGGY]    double  rtol  =  Math.max(rtol  /  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    double  rtol  =  Math.max(rtol  /  FastMath.abs(x1),  atol));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    double  rtol  =  Math.max(rtol  /  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	2	None	add
62	[BUG]  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAttributeAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
63	[BUG]  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAtomicAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
64	[BUG]  [BUGGY]  final  double  atol  =  getAttributesAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttributesAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAttributesAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  atol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	  	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol  atol	13	None	replace
72	[BUG]  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)	7	None	replace
73	[BUG]  [BUGGY]  return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  ')'  expected  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  ')'  expected	7	None	replace
74	[BUG]  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)	7	None	replace
81	[BUG]  [BUGGY]    x0  =  computeRelativeAccuracy(x1);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeRelativeAccuracy(x1);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeRelativeAccuracy(x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
82	[BUG]  [BUGGY]    f1  =  computeRelativeAccuracy(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    f1  =  computeRelativeAccuracy(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    f1  =  computeRelativeAccuracy(x0);		non-compiled	[CE]  cannot  find  symbol	4	None	add
83	[BUG]  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x0),  atol));  [CE]  ';'  expected  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x0),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  Math.max(rtol  *  FastMath.abs(x0),  atol));		non-compiled	[CE]  ';'  expected	4	None	add
84	[BUG]  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	4	None	add
85	[BUG]  [BUGGY]    x0  =  calculateRelativeAccuracy(x1);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  calculateRelativeAccuracy(x1);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  calculateRelativeAccuracy(x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
91	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
92	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
93	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
94	[BUG]  [BUGGY]    final  double  f0  =  computeRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  computeRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
95	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(ftol);  atol  =  computeRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeFunctionValue(ftol);  atol  =  computeRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  computeFunctionValue(ftol);  atol  =  computeRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
101	[BUG]  [BUGGY]    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  incompatible  types	10	None	add
102	[BUG]  [BUGGY]    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    AllowedSolution  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	10	None	add
103	[BUG]  [BUGGY]    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol);  [CE]  ';'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  ';'  expected	10	None	add
104	[BUG]  [BUGGY]    allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [CE]  ';'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  ';'  expected	10	None	add
105	[BUG]  [BUGGY]    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol;  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    AllowedSolution  allowed  =  rtol  *  FastMath.abs(x1),  atol;		non-compiled	[CE]  incompatible  types	10	None	add
111	[BUG]  [BUGGY]  switch(atol)  {  [CE]  possible  loss  of  precision  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(atol)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(atol)  {	switch  (allowed)  {  	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
112	[BUG]  [BUGGY]  switch(inverted)  {  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(inverted)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(inverted)  {	switch  (allowed)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
113	[BUG]  [BUGGY]  switch(null)  {  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(null)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(null)  {	switch  (allowed)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
114	[BUG]  [BUGGY]  switch(optional)  {  [CE]  cannot  find  symbol  optional  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(optional)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(optional)  {	switch  (allowed)  {  	non-compiled	[CE]  cannot  find  symbol  optional	9	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	return  inverted?  x1  :  x0;	return  x1;  	compilable	  [FE]  AssertionError  testIssue631	5	1
122	[BUG]  [BUGGY]  return  inverted?  x1  :  x0;  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x1  :  x0;	return  x1;  	compilable	  [FE]  AssertionError  testIssue631	5	1	replace
122	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	return  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1
123	[BUG]  [BUGGY]  return  x0;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1	replace
123	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x0  :  x1;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	return  inverted?  x0  :  x1;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1
124	[BUG]  [BUGGY]  return  inverted?  x0  :  x1;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted?  x0  :  x1;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted?  x0  :  x1;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1	replace
124	[BUG]  [BUGGY]  return(x0  -  x1)?  x1  :  x0;  [CE]  incompatible  types  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return(x0  -  x1)?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return(x0  -  x1)?  x1  :  x0;	return  x1;  	non-compiled	[CE]  incompatible  types	5	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	  	return  x1;  	compilable	  [FE]  AssertionError  testIssue631	5	1
126	[BUG]  [BUGGY]    [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	  	return  x1;  	compilable	  [FE]  AssertionError  testIssue631	5	1	replace
131	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
132	[BUG]  [BUGGY]  x0  =  0.5  *(x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x1  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(atol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	add	x0  =  0.5  *(x0  +  x1  -  FastMath.max(atol  *  FastMath.abs(x1),  atol));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	compilable	  [FE]  AssertionError  testIssue631	1	1
134	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(atol  *  FastMath.abs(x1),  atol));  [FE]  AssertionError  testIssue631  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(atol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(atol  *  FastMath.abs(x1),  atol));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	compilable	  [FE]  AssertionError  testIssue631	1	1	replace
142	[BUG]  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRadiusAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
143	[BUG]  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRrelativeAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
144	[BUG]  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRawAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
145	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  rtol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	  	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol  rtol	15	None	replace
151	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
152	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
153	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
154	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
155	[BUG]  [BUGGY]    if(x1  >  x0)  {  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(x1  >  x0)  {  if(!inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(x1  >  x0)  {  if(!inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
161	[BUG]  [BUGGY]    double  f0  =  computeFunctionValue(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  computeFunctionValue(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  computeFunctionValue(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
162	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =  computeFunctionValue(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
163	[BUG]  [BUGGY]    double  f0  =  computeFunctionValue(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  computeFunctionValue(atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  computeFunctionValue(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
164	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =  computeFunctionValue(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
165	[BUG]  [BUGGY]    double  f0  =  atol  *(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  atol  *(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  atol  *(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
171	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	14	None	add
172	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	14	None	add
173	[BUG]  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getFunctionValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	14	None	add
174	[BUG]  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [CE]  variable  rtol  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  rtol  =  getRelativeAccuracy();		non-compiled	[CE]  variable  rtol  is  already  defined  in  method  doSolve()	14	None	add
175	[BUG]  [BUGGY]    final  double  fx  =  getRelativeAccuracy();  [CE]  variable  fx  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  fx  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  fx  =  getRelativeAccuracy();		non-compiled	[CE]  variable  fx  is  already  defined  in  method  doSolve()	14	None	add
183	[BUG]  [BUGGY]    return(f1  <=  0)?  x1  :  x0;  [CE]  unreachable  statement  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return(f1  <=  0)?  x1  :  x0;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return(f1  <=  0)?  x1  :  x0;		non-compiled	[CE]  unreachable  statement	6	None	add
184	[BUG]  [BUGGY]    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <=  0)?  x1  :  x0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <=  0)?  x1  :  x0;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <=  0)?  x1  :  x0;		non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	6	None	add
185	[BUG]  [BUGGY]    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <<  0)?  x1  :  x0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <<  0)?  x1  :  x0;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return  inverted?  x0  :  x1;  case  STANDARD_SIDE:  return(f1  <<  0)?  x1  :  x0;		non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	6	None	add
191	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
192	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
193	[BUG]  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAttributeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
194	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
195	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  computeAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
1	[BUG]  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  incompatible  types	10	None	add
2	[BUG]  [BUGGY]    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  incompatible  types	10	None	add
3	[BUG]  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);		non-compiled	[CE]  incompatible  types	10	None	add
4	[BUG]  [BUGGY]    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  allowed  =  Math.max(rtol  *  FastMath.abs(x0),  atol);		non-compiled	[CE]  incompatible  types	10	None	add
5	[BUG]  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  case  f0:  return  inverted;  [CE]  ';'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  case  f0:  return  inverted;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    boolean  allowed  =  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  case  f0:  return  inverted;		non-compiled	[CE]  ';'  expected	10	None	add
21	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
22	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  x1)-  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  ';'  expected	1	None	replace
23	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  atol  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  atol  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  atol  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
24	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  x1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
44	[BUG]  [BUGGY]  final  double  atol  =  getAbsoluteAccessuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccessuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAbsoluteAccessuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]  f0  =  computeFastValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeFastValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeFastValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  f0  =  computeFactoryValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeFactoryValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeFactoryValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
64	[BUG]  [BUGGY]  f0  =  computeFactory(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeFactory(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeFactory(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
81	[BUG]  [BUGGY]    return(x0  ==  0)?  x0  :  x1;  [CE]  unreachable  statement  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return(x0  ==  0)?  x0  :  x1;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return(x0  ==  0)?  x0  :  x1;		non-compiled	[CE]  unreachable  statement	6	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);		compilable	  [FE]  AssertionError  testIssue631	6	1
84	[BUG]  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    x0  =  Math.max(rtol  *  FastMath.abs(x1),  atol);		compilable	  [FE]  AssertionError  testIssue631	6	1	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =(x1  ==  0)?  x0  :  x1;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	    x0  =(x1  ==  0)?  x0  :  x1;		compilable	  [FE]  AssertionError  testIssue631	6	1
85	[BUG]  [BUGGY]    x0  =(x1  ==  0)?  x0  :  x1;  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    x0  =(x1  ==  0)?  x0  :  x1;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    x0  =(x1  ==  0)?  x0  :  x1;		compilable	  [FE]  AssertionError  testIssue631	6	1	add
85	[BUG]  [BUGGY]    return(x0  ==  0)?  x0  :  x1);  [CE]  ';'  expected  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    return(x0  ==  0)?  x0  :  x1);  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    return(x0  ==  0)?  x0  :  x1);		non-compiled	[CE]  ';'  expected	6	None	add
101	[BUG]  [BUGGY]    ensureBracketing(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    ensureBracketing(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	12	None	add
102	[BUG]  [BUGGY]    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURACY);		non-compiled	[CE]  cannot  find  symbol	12	None	add
103	[BUG]  [BUGGY]    setResult(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    setResult(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    setResult(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	12	None	add
104	[BUG]  [BUGGY]    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURacy);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURacy);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    ensureBracketing(x0,  x1);  System.arraycopy(x0,  x1,  f0,  x1,  DEFAULT_ABSOLUTE_ACCURacy);		non-compiled	[CE]  cannot  find  symbol	12	None	add
105	[BUG]  [BUGGY]    if(f0  ==  0.0)  {  if(!f0.equals(x1))  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f0  ==  0.0)  {  if(!f0.equals(x1))  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f0  ==  0.0)  {  if(!f0.equals(x1))  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
121	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
122	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
123	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
124	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbsoluteAccuracy();  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
125	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)/  atol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)/  atol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =(atol  >  rtol)/  atol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
142	[BUG]  [BUGGY]  switch(false)  {  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(false)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(false)  {	switch  (allowed)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
162	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [CE]  ';'  expected  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;	boolean  inverted  =  false;  	non-compiled	[CE]  ';'  expected	17	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <  atol  -  rtol);  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	add	boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <  atol  -  rtol);	boolean  inverted  =  false;  	compilable	  [FE]  AssertionError  testIssue631	17	1
164	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <  atol  -  rtol);  [FE]  AssertionError  testIssue631  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <  atol  -  rtol);  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <  atol  -  rtol);	boolean  inverted  =  false;  	compilable	  [FE]  AssertionError  testIssue631	17	1	replace
164	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <=  atol  -  rtol);  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	add	boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <=  atol  -  rtol);	boolean  inverted  =  false;  	compilable	  [FE]  AssertionError  testIssue631	17	1
165	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <=  atol  -  rtol);  [FE]  AssertionError  testIssue631  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <=  atol  -  rtol);  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	boolean  inverted  =(atol  >  rtol)&&(atol  <  rtol)&&(rtol  <=  atol  -  rtol);	boolean  inverted  =  false;  	compilable	  [FE]  AssertionError  testIssue631	17	1	replace
182	[BUG]  [BUGGY]  return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  cannot  find  symbol  minEval  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  cannot  find  symbol  minEval	7	None	replace
183	[BUG]  [BUGGY]  return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,double,AllowedSolution)	7	None	replace
203	[BUG]  [BUGGY]  final  double  ftol  =  getInitialValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getInitialValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getInitialValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
221	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  maxEval);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  maxEval);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    clearResult();  verifyInterval(min,  startValue,  maxEval);		non-compiled	[CE]  cannot  find  symbol	8	None	add
222	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
223	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	8	None	add
224	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  f);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    clearResult();  verifyInterval(min,  startValue,  f);		non-compiled	[CE]  cannot  find  symbol	8	None	add
242	[BUG]  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAlternativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
243	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
244	[BUG]  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getFunctionValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
245	[BUG]  [BUGGY]    final  double  x0  =  Math.max(atol,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  x0  =  Math.max(atol,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  x0  =  Math.max(atol,  DEFAULT_ABSOLUTE_ACCURACY);		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	16	None	add
261	[BUG]  [BUGGY]    x0  =  computeRelativeAccuracy(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeRelativeAccuracy(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeRelativeAccuracy(x0);		non-compiled	[CE]  cannot  find  symbol	4	None	add
262	[BUG]  [BUGGY]    x0  =  computeNegativeValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeNegativeValue(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeNegativeValue(x0);		non-compiled	[CE]  cannot  find  symbol	4	None	add
263	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.min(x0,  Math.max(rtol  *  FastMath.abs(x0),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	add	    x0  =  Math.min(x0,  Math.max(rtol  *  FastMath.abs(x0),  atol));		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	4	1
264	[BUG]  [BUGGY]    x0  =  Math.min(x0,  Math.max(rtol  *  FastMath.abs(x0),  atol));  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.min(x0,  Math.max(rtol  *  FastMath.abs(x0),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  Math.min(x0,  Math.max(rtol  *  FastMath.abs(x0),  atol));		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	4	1	add
264	[BUG]  [BUGGY]    x0  =  computeComparableValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeComparableValue(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeComparableValue(x0);		non-compiled	[CE]  cannot  find  symbol	4	None	add
265	[BUG]  [BUGGY]    x0  =  computeRelativeAccuracy(x0,  atol);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeRelativeAccuracy(x0,  atol);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeRelativeAccuracy(x0,  atol);		non-compiled	[CE]  cannot  find  symbol	4	None	add
301	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
302	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
303	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
304	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
305	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbstractAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
323	[BUG]  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getAlternativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	14	None	add
325	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	14	None	add
341	[BUG]  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
342	[BUG]  [BUGGY]    atol  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
343	[BUG]  [BUGGY]    double  atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  variable  atol  is  already  defined  in  method  doSolve()  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    double  atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    double  atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  variable  atol  is  already  defined  in  method  doSolve()	2	None	add
344	[BUG]  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x0),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x0),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.min(relativeAccuracy  *  Math.abs(x0),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
345	[BUG]  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  x0  =  0.5  *(x0  +  x1);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  x0  =  0.5  *(x0  +  x1);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  x0  =  0.5  *(x0  +  x1);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
363	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  Atol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol  Atol	15	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	add	final  double  rtol  =  getRelativeAccuracy()  +  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1
365	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRelativeAccuracy()  +  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1	replace
384	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return(x0  ==  0)?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	return(x0  ==  0)?  x1  :  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1
385	[BUG]  [BUGGY]  return(x0  ==  0)?  x1  :  x0;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return(x0  ==  0)?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return(x0  ==  0)?  x1  :  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1	replace
4	[BUG]  [BUGGY]  last  boolean  inverted  =  false;  [CE]  not  a  statement  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  last  boolean  inverted  =  false;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	last  boolean  inverted  =  false;	boolean  inverted  =  false;  	non-compiled	[CE]  not  a  statement	17	None	replace
34	[BUG]  [BUGGY]    x0  =  Math.max(x0  -  FastMath.abs(x0),  atol));  [CE]  ';'  expected  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.max(x0  -  FastMath.abs(x0),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  Math.max(x0  -  FastMath.abs(x0),  atol));		non-compiled	[CE]  ';'  expected	4	None	add
35	[BUG]  [BUGGY]    x0  =  Math.max(x0  -  FastMath.abs(x0),  absoluteAccuracy);  [CE]  absoluteAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  Math.max(x0  -  FastMath.abs(x0),  absoluteAccuracy);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  Math.max(x0  -  FastMath.abs(x0),  absoluteAccuracy);		non-compiled	[CE]  absoluteAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	4	None	add
61	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  Math.max(rtol,  absoluteAccuracy);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
62	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  Math.max(rtol,  atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
63	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
64	[BUG]  [BUGGY]    final  double  f0  =  atol  *  atol  +  inverted;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  atol  *  atol  +  inverted;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =  atol  *  atol  +  inverted;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
65	[BUG]  [BUGGY]    double  f0  =  atol  *  atol  +  inverted;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  atol  *  atol  +  inverted;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    double  f0  =  atol  *  atol  +  inverted;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	20	None	add
93	[BUG]  [BUGGY]  return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,int,UnivariateRealFunction,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,int,UnivariateRealFunction,double,AllowedSolution)	7	None	replace
94	[BUG]  [BUGGY]  return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);  [CE]  cannot  find  symbol  minEval  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  cannot  find  symbol  minEval	7	None	replace
122	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);  [CE]  variable  rtol  might  not  have  been  initialized  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  variable  rtol  might  not  have  been  initialized	15	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	add	final  double  rtol  =  getRelativeAccuracy()  *  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1
124	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	add	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1
125	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [FE]  AssertionError  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  AssertionError  testIssue631	15	1	replace
152	[BUG]  [BUGGY]  switch(true)  {  [CE]  incompatible  types  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(true)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(true)  {	switch  (allowed)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
182	[BUG]  [BUGGY]  f0  =  computeRule(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeRule(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeRule(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
183	[BUG]  [BUGGY]  f0  =  computeIntegerValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeIntegerValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeIntegerValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
184	[BUG]  [BUGGY]  f0  =  computeRangeValue(x0);  [CE]  cannot  find  symbol  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeRangeValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeRangeValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
212	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  max  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  cannot  find  symbol  max  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  max  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  max  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  cannot  find  symbol  max	1	None	replace
214	[BUG]  [BUGGY]  x0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]  x0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	x0  =  0.5  *(x0  +  f1  -  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	1	None	replace
272	[BUG]  [BUGGY]  final  double  ftol  =  getFunctionalValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFunctionalValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getFunctionalValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
273	[BUG]  [BUGGY]  final  double  ftol  =  getFunctionMaximumAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFunctionMaximumAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getFunctionMaximumAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
274	[BUG]  [BUGGY]  final  double  ftol  =  getActualValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getActualValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	final  double  ftol  =  getActualValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
301	[BUG]  [BUGGY]    final  double  f0  =  Math.max(rtol,  atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  Math.max(rtol,  atol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  Math.max(rtol,  atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
302	[BUG]  [BUGGY]    final  double  f0  =  Math.max(atol,  rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  Math.max(atol,  rtol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  Math.max(atol,  rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
303	[BUG]  [BUGGY]    setResult(atol,  rtol);  [CE]  cannot  find  symbol  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    setResult(atol,  rtol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    setResult(atol,  rtol);		non-compiled	[CE]  cannot  find  symbol	18	None	add
304	[BUG]  [BUGGY]    final  double  f0  =  getFloatValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getFloatValueAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    final  double  f0  =  getFloatValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	18	None	add
305	[BUG]  [BUGGY]    setResult(atol,  rtol);  return  true;  [CE]  cannot  find  symbol  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    setResult(atol,  rtol);  return  true;  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	155	155	1	replace	    setResult(atol,  rtol);  return  true;		non-compiled	[CE]  cannot  find  symbol	18	None	add
331	[BUG]  [BUGGY]  return  inverted;  [CE]  incompatible  types  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return  inverted;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return  inverted;	return  x1;  	non-compiled	[CE]  incompatible  types	5	None	replace
332	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return(x0  <=  0)?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	add	return(x0  <=  0)?  x1  :  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1
333	[BUG]  [BUGGY]  return(x0  <=  0)?  x1  :  x0;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]  return(x0  <=  0)?  x1  :  x0;  [BUGGY]  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	return(x0  <=  0)?  x1  :  x0;	return  x1;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	5	1	replace
362	[BUG]  [BUGGY]    final  double  f0  =  getMinimumValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
363	[BUG]  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  x0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	16	None	add
364	[BUG]  [BUGGY]    final  double  f0  =  getActualAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getActualAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getActualAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
365	[BUG]  [BUGGY]    final  double  f0  =  getDelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getDelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getDelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	16	None	add
393	[BUG]  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  x0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	14	None	add
394	[BUG]  [BUGGY]    final  double  f1  =  getRelativeAccuracy();  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f1  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f1  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	14	None	add
395	[BUG]  [BUGGY]    setResult(x0,  ftol);  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    setResult(x0,  ftol);  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    setResult(x0,  ftol);		non-compiled	[CE]  cannot  find  symbol	14	None	add
452	[BUG]  [BUGGY]    ?  x0  :  x1;  [CE]  illegal  start  of  expression  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    ?  x0  :  x1;  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    ?  x0  :  x1;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
453	[BUG]  [BUGGY]    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }  [CE]  no  suitable  constructor  found  for  MathInternalError(String)  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }		non-compiled	[CE]  no  suitable  constructor  found  for  MathInternalError(String)	6	None	add
454	[BUG]  [BUGGY]    if(f0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }  [CE]  no  suitable  constructor  found  for  MathInternalError(String)  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    if(f0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    if(f0  ==  0)  {  throw  new  MathInternalError( "Missing  to  set  up  fast  enough  method. ");  }		non-compiled	[CE]  no  suitable  constructor  found  for  MathInternalError(String)	6	None	add
455	[BUG]  [BUGGY]    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  use  side-stripes. ");  }  [CE]  no  suitable  constructor  found  for  MathInternalError(String)  [CONTEXT]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  [BUGGY]    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  use  side-stripes. ");  }  [BUGGY]  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  default:  throw  new  MathInternalError();  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.7071067811865475	239	239	1	replace	    if(x0  ==  0)  {  throw  new  MathInternalError( "Missing  to  use  side-stripes. ");  }		non-compiled	[CE]  no  suitable  constructor  found  for  MathInternalError(String)	6	None	add
482	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  max,  startValue);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    clearResult();  verifyInterval(min,  max,  startValue);		non-compiled	[CE]  cannot  find  symbol	8	None	add
483	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    clearResult();  verifyInterval(min,  startValue);		non-compiled	[CE]  cannot  find  symbol	8	None	add
484	[BUG]  [BUGGY]    solve(min,  startValue,  f);  [CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    solve(min,  startValue,  f);		non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction)	8	None	add
485	[BUG]  [BUGGY]    checkAndUpdate(min,  startValue,  f);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    checkAndUpdate(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    checkAndUpdate(min,  startValue,  f);		non-compiled	[CE]  cannot  find  symbol	8	None	add
511	[BUG]  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  method. ");  }  [CE]  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  method. ");  }  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  method. ");  }		non-compiled	[CE]  	10	None	add
512	[BUG]  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  new  Integer(false);  }  [CE]  ')'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  new  Integer(false);  }  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  new  Integer(false);  }		non-compiled	[CE]  ')'  expected	10	None	add
513	[BUG]  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowableSolution  =  true;  }  [CE]  ')'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowableSolution  =  true;  }  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    if(rtol  >  FastMath.abs(x1),  atol))  {  allowableSolution  =  true;  }		non-compiled	[CE]  ')'  expected	10	None	add
514	[BUG]  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  true;  }  [CE]  ')'  expected  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  true;  }  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    if(rtol  >  FastMath.abs(x1),  atol))  {  allowedSolution  =  true;  }		non-compiled	[CE]  ')'  expected	10	None	add
515	[BUG]  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  to  use  the  supplied  method. ");  }  [CE]  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  to  use  the  supplied  method. ");  }  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    if(rtol  >  FastMath.abs(x1),  atol))  {  throw  new  MathInternalError( "Missing  to  use  the  supplied  method. ");  }		non-compiled	[CE]  	10	None	add
541	[BUG]  [BUGGY]    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
542	[BUG]  [BUGGY]    atol  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.max(rtol  *  FastMath.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
543	[BUG]  [BUGGY]    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  atol  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  atol	2	None	add
544	[BUG]  [BUGGY]    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.abs(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy));		non-compiled	[CE]  ';'  expected	2	None	add
545	[BUG]  [BUGGY]    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy));  [CE]  ';'  expected  [CONTEXT]  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  [BUGGY]    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	188	188	1	replace	    atol  =  Math.max(rtol  /  FastMath.abs(x1),  absoluteAccuracy));		non-compiled	[CE]  ';'  expected	2	None	add
571	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	add	    verifyBracketing(x0,  x1);		compilable	  [FE]  AssertionError  testIssue631	12	1
572	[BUG]  [BUGGY]    verifyBracketing(x0,  x1);  [FE]  AssertionError  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    verifyBracketing(x0,  x1);		compilable	  [FE]  AssertionError  testIssue631	12	1	add
572	[BUG]  [BUGGY]    clearResult();  verifyBracketing(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    clearResult();  verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    clearResult();  verifyBracketing(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	12	None	add
574	[BUG]  [BUGGY]    ensureStub(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureStub(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    ensureStub(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	12	None	add
575	[BUG]  [BUGGY]    clearResult();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    clearResult();  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    clearResult();		non-compiled	[CE]  cannot  find  symbol	12	None	add
