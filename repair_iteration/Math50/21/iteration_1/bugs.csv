bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  ftol)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f1)  <  ftol)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  ftol)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
2	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f0)  <  =  ftol)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  <  =  ftol)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
3	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  ftol)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f1)>  ftol)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  ftol)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
4	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  ftol)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f1)  ==  ftol)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  ftol)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	  	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
6	[BUG]  [BUGGY]    f1  =  fx;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f1  =  fx;  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f1  =  fx;		non-compiled	[CE]  illegal  start  of  expression	42	None	add
7	[BUG]  [BUGGY]    f1  =  Math.max(f1,  f1);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f1  =  Math.max(f1,  f1);  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f1  =  Math.max(f1,  f1);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
8	[BUG]  [BUGGY]    f1  =  Math.abs(f1);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f1  =  Math.abs(f1);  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f1  =  Math.abs(f1);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
9	[BUG]  [BUGGY]    f1  =  Math.min(f1,  f1);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f1  =  Math.min(f1,  f1);  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f1  =  Math.min(f1,  f1);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
10	[BUG]  [BUGGY]    f0  =  fx;  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f0  =  fx;  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f0  =  fx;		non-compiled	[CE]  illegal  start  of  expression	42	None	add
11	[BUG]  [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
12	[BUG]  [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
13	[BUG]  [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    if(allowed)  {  if  (FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
14	[BUG]  [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
15	[BUG]  [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    if(allowed)  {  if  (FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
16	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
17	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  MAX_SIDE)  {	if  (FastMath.abs(f1)  <=  ftol)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
18	[BUG]  [BUGGY]    f0  =  Math.max(f0,  f1);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f0  =  Math.max(f0,  f1);  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f0  =  Math.max(f0,  f1);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
19	[BUG]  [BUGGY]    f0  =  Math.min(f0,  f1);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    f0  =  Math.min(f0,  f1);  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    f0  =  Math.min(f0,  f1);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
20	[BUG]  [BUGGY]    x1  =  fx;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;      [BUGGY]    x1  =  fx;  f1  =  fx;  [BUGGY]  if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	    x1  =  fx;  f1  =  fx;		non-compiled	[CE]  illegal  start  of  expression	42	None	add
